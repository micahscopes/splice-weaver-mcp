{
  "examples": [
    {
      "content": "<!-- Remove Badge if it does not have fix-->\n\n## Fix Format String Vulnerability <Badge type=\"tip\" text=\"Has Fix\" />\n\n- [Playground Link](/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6ImNwcCIsInF1ZXJ5IjoiIiwicmV3cml0ZSI6IiIsInN0cmljdG5lc3MiOiJzbWFydCIsInNlbGVjdG9yIjoiIiwiY29uZmlnIjoiaWQ6IGZpeC1mb3JtYXQtc2VjdXJpdHktZXJyb3Jcbmxhbmd1YWdlOiBDcHBcbnJ1bGU6XG4gIHBhdHRlcm46ICRQUklOVEYoJFMsICRWQVIpXG5jb25zdHJhaW50czpcbiAgUFJJTlRGOiAjIGEgZm9ybWF0IHN0cmluZyBmdW5jdGlvblxuICAgIHsgcmVnZXg6IFwiXnNwcmludGZ8ZnByaW50ZiRcIiB9XG4gIFZBUjogIyBub3QgYSBsaXRlcmFsIHN0cmluZ1xuICAgIG5vdDpcbiAgICAgIGFueTpcbiAgICAgIC0geyBraW5kOiBzdHJpbmdfbGl0ZXJhbCB9XG4gICAgICAtIHsga2luZDogY29uY2F0ZW5hdGVkX3N0cmluZyB9XG5maXg6ICRQUklOVEYoJFMsIFwiJXNcIiwgJFZBUilcbiIsInNvdXJjZSI6Ii8vIEVycm9yXG5mcHJpbnRmKHN0ZGVyciwgb3V0KTtcbnNwcmludGYoJmJ1ZmZlclsyXSwgb2JqLT5UZXh0KTtcbnNwcmludGYoYnVmMSwgVGV4dF9TdHJpbmcoVFhUX1dBSVRJTkdfRk9SX0NPTk5FQ1RJT05TKSk7XG4vLyBPS1xuZnByaW50ZihzdGRlcnIsIFwiJXNcIiwgb3V0KTtcbnNwcmludGYoJmJ1ZmZlclsyXSwgXCIlc1wiLCBvYmotPlRleHQpO1xuc3ByaW50ZihidWYxLCBcIiVzXCIsIFRleHRfU3RyaW5nKFRYVF9XQUlUSU5HX0ZPUl9DT05ORUNUSU9OUykpOyJ9)\n\n### Description\n\nThe [Format String exploit](https://owasp.org/www-community/attacks/Format_string_attack) occurs when the submitted data of an input string is evaluated as a command by the application.\n\nFor example, using `sprintf(s, var)` can lead to format string vulnerabilities if `var` contains user-controlled data. This can be exploited to execute arbitrary code. By explicitly specifying the format string as `\"%s\"`, you ensure that `var` is treated as a string, mitigating this risk.\n\n<!-- Use YAML in the example. Delete this section if use pattern. -->\n\n### YAML\n\n```yaml\nid: fix-format-security-error\nlanguage: Cpp\nrule:\n  pattern: $PRINTF($S, $VAR)\nconstraints:\n  PRINTF: # a format string function\n    { regex: \"^sprintf|fprintf$\" }\n  VAR: # not a literal string\n    not:\n      any:\n      - { kind: string_literal }\n      - { kind: concatenated_string }\nfix: $PRINTF($S, \"%s\", $VAR)\n```\n\n### Example\n\n<!-- highlight matched code in curly-brace {lineNum} -->\n\n```cpp {2-4}\n// Error\nfprintf(stderr, out);\nsprintf(&buffer[2], obj->Text);\nsprintf(buf1, Text_String(TXT_WAITING_FOR_CONNECTIONS));\n// OK\nfprintf(stderr, \"%s\", out);\nsprintf(&buffer[2], \"%s\", obj->Text);\nsprintf(buf1, \"%s\", Text_String(TXT_WAITING_FOR_CONNECTIONS));\n```\n\n### Diff\n\n<!-- use // [!code --] and // [!code ++] to annotate diff -->\n\n```js\n// Error\nfprintf(stderr, out); // [!code --]\nfprintf(stderr, \"%s\", out); // [!code ++]\nsprintf(&buffer[2], obj->Text); // [!code --]\nsprintf(&buffer[2], \"%s\", obj->Text); // [!code ++]\nsprintf(buf1, Text_String(TXT_WAITING_FOR_CONNECTIONS)); // [!code --]\nsprintf(buf1, \"%s\", Text_String(TXT_WAITING_FOR_CONNECTIONS)); // [!code ++]\n// OK\nfprintf(stderr, \"%s\", out);\nsprintf(&buffer[2], \"%s\", obj->Text);\nsprintf(buf1, \"%s\", Text_String(TXT_WAITING_FOR_CONNECTIONS));\n```\n\n### Contributed by\n\n[xiaoxiangmoe](https://github.com/xiaoxiangmoe)\n",
      "description": "The [Format String exploit](https://owasp.org/www-community/attacks/Format_string_attack) occurs when the submitted data of an input string is evaluated as a command by the application.\n\nFor example, using `sprintf(s, var)` can lead to format string vulnerabilities if `var` contains user-controlled data. This can be exploited to execute arbitrary code. By explicitly specifying the format string as `\"%s\"`, you ensure that `var` is treated as a string, mitigating this risk.\n\n<!-- Use YAML in the example. Delete this section if use pattern. -->",
      "features": [
        "constraints"
      ],
      "has_fix": true,
      "id": "fix-format-vuln",
      "language": "cpp",
      "playground_link": "/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6ImNwcCIsInF1ZXJ5IjoiIiwicmV3cml0ZSI6IiIsInN0cmljdG5lc3MiOiJzbWFydCIsInNlbGVjdG9yIjoiIiwiY29uZmlnIjoiaWQ6IGZpeC1mb3JtYXQtc2VjdXJpdHktZXJyb3Jcbmxhbmd1YWdlOiBDcHBcbnJ1bGU6XG4gIHBhdHRlcm46ICRQUklOVEYoJFMsICRWQVIpXG5jb25zdHJhaW50czpcbiAgUFJJTlRGOiAjIGEgZm9ybWF0IHN0cmluZyBmdW5jdGlvblxuICAgIHsgcmVnZXg6IFwiXnNwcmludGZ8ZnByaW50ZiRcIiB9XG4gIFZBUjogIyBub3QgYSBsaXRlcmFsIHN0cmluZ1xuICAgIG5vdDpcbiAgICAgIGFueTpcbiAgICAgIC0geyBraW5kOiBzdHJpbmdfbGl0ZXJhbCB9XG4gICAgICAtIHsga2luZDogY29uY2F0ZW5hdGVkX3N0cmluZyB9XG5maXg6ICRQUklOVEYoJFMsIFwiJXNcIiwgJFZBUilcbiIsInNvdXJjZSI6Ii8vIEVycm9yXG5mcHJpbnRmKHN0ZGVyciwgb3V0KTtcbnNwcmludGYoJmJ1ZmZlclsyXSwgb2JqLT5UZXh0KTtcbnNwcmludGYoYnVmMSwgVGV4dF9TdHJpbmcoVFhUX1dBSVRJTkdfRk9SX0NPTk5FQ1RJT05TKSk7XG4vLyBPS1xuZnByaW50ZihzdGRlcnIsIFwiJXNcIiwgb3V0KTtcbnNwcmludGYoJmJ1ZmZlclsyXSwgXCIlc1wiLCBvYmotPlRleHQpO1xuc3ByaW50ZihidWYxLCBcIiVzXCIsIFRleHRfU3RyaW5nKFRYVF9XQUlUSU5HX0ZPUl9DT05ORUNUSU9OUykpOyJ9",
      "rules": [
        "pattern"
      ],
      "source_file": "/var/tmp/vibe-kanban/vk-ff35-organized/target/debug/build/organized-grepster-mcp-a639358d381b1d6e/out/ast-grep.github.io/website/catalog/cpp/fix-format-vuln.md",
      "title": "Fix Format String Vulnerability",
      "type": "YAML",
      "yaml_content": "id: fix-format-security-error\nlanguage: Cpp\nrule:\n  pattern: $PRINTF($S, $VAR)\nconstraints:\n  PRINTF: # a format string function\n    { regex: \"^sprintf|fprintf$\" }\n  VAR: # not a literal string\n    not:\n      any:\n      - { kind: string_literal }\n      - { kind: concatenated_string }\nfix: $PRINTF($S, \"%s\", $VAR)"
    },
    {
      "content": "## Find Struct Inheritance\n\n- [Playground Link](/playground.html#eyJtb2RlIjoiUGF0Y2giLCJsYW5nIjoiY3BwIiwicXVlcnkiOiJzdHJ1Y3QgJFNPTUVUSElORzogICRJTkhFUklUU19GUk9NIHsgJCQkQk9EWTsgfSIsInJld3JpdGUiOiIiLCJzdHJpY3RuZXNzIjoic21hcnQiLCJzZWxlY3RvciI6IiIsImNvbmZpZyI6IiIsInNvdXJjZSI6InN0cnVjdCBGb286IEJhciB7fTtcblxuc3RydWN0IEJhcjogQmF6IHtcbiAgaW50IGEsIGI7XG59In0=)\n\n### Description\n\nast-grep's pattern is AST based. A code snippet like `struct $SOMETHING:  $INHERITS` will not work because it does not have a correct AST structure. The correct pattern should spell out the full syntax like `struct $SOMETHING: $INHERITS { $$$BODY; }`.\n\nCompare the ast structure below to see the difference, especially the `ERROR` node. You can also use the playground's pattern panel to debug.\n\n:::code-group\n\n```shell [Wrong Pattern]\nERROR\n  $SOMETHING\n  base_class_clause\n    $INHERITS\n```\n\n```shell [Correct Pattern]\nstruct_specifier\n  $SOMETHING\n  base_class_clause\n    $INHERITS\n  field_declaration_list\n    field_declaration\n      $$$BODY\n```\n\n:::\n\nIf it is not possible to write a full pattern, [YAML rule](/guide/rule-config.html) is a better choice.\n\n### Pattern\n\n```shell\nast-grep --lang cpp --pattern '\nstruct $SOMETHING: $INHERITS { $$$BODY; }'\n```\n\n### Example\n\n<!-- highlight matched code in curly-brace {lineNum} -->\n\n```cpp {1-3}\nstruct Bar: Baz {\n  int a, b;\n}\n```\n\n### Contributed by\n\nInspired by this [tweet](https://x.com/techno_bog/status/1885421768384331871)\n",
      "description": "ast-grep's pattern is AST based. A code snippet like `struct $SOMETHING:  $INHERITS` will not work because it does not have a correct AST structure. The correct pattern should spell out the full syntax like `struct $SOMETHING: $INHERITS { $$$BODY; }`.\n\nCompare the ast structure below to see the difference, especially the `ERROR` node. You can also use the playground's pattern panel to debug.\n\n:::code-group",
      "features": [],
      "has_fix": false,
      "id": "find-struct-inheritance",
      "language": "cpp",
      "playground_link": "/playground.html#eyJtb2RlIjoiUGF0Y2giLCJsYW5nIjoiY3BwIiwicXVlcnkiOiJzdHJ1Y3QgJFNPTUVUSElORzogICRJTkhFUklUU19GUk9NIHsgJCQkQk9EWTsgfSIsInJld3JpdGUiOiIiLCJzdHJpY3RuZXNzIjoic21hcnQiLCJzZWxlY3RvciI6IiIsImNvbmZpZyI6IiIsInNvdXJjZSI6InN0cnVjdCBGb286IEJhciB7fTtcblxuc3RydWN0IEJhcjogQmF6IHtcbiAgaW50IGEsIGI7XG59In0=",
      "rules": [],
      "source_file": "/var/tmp/vibe-kanban/vk-ff35-organized/target/debug/build/organized-grepster-mcp-a639358d381b1d6e/out/ast-grep.github.io/website/catalog/cpp/find-struct-inheritance.md",
      "title": "Find Struct Inheritance",
      "type": "Pattern",
      "yaml_content": ""
    },
    {
      "content": "## No Unused Vars in Java\n\n- [Playground Link](/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6ImphdmEiLCJxdWVyeSI6ImlmKHRydWUpeyQkJEJPRFl9IiwicmV3cml0ZSI6IiRDOiBMaXN0WyRUXSA9IHJlbGF0aW9uc2hpcCgkJCRBLCB1c2VsaXN0PVRydWUsICQkJEIpIiwic3RyaWN0bmVzcyI6InNtYXJ0Iiwic2VsZWN0b3IiOiIiLCJjb25maWciOiJpZDogbm8tdW51c2VkLXZhcnNcbnJ1bGU6XG4gICAga2luZDogbG9jYWxfdmFyaWFibGVfZGVjbGFyYXRpb25cbiAgICBhbGw6XG4gICAgICAgIC0gaGFzOlxuICAgICAgICAgICAgaGFzOlxuICAgICAgICAgICAgICAgIGtpbmQ6IGlkZW50aWZpZXJcbiAgICAgICAgICAgICAgICBwYXR0ZXJuOiAkSURFTlRcbiAgICAgICAgLSBub3Q6XG4gICAgICAgICAgICBwcmVjZWRlczpcbiAgICAgICAgICAgICAgICBzdG9wQnk6IGVuZFxuICAgICAgICAgICAgICAgIGhhczpcbiAgICAgICAgICAgICAgICAgICAgc3RvcEJ5OiBlbmRcbiAgICAgICAgICAgICAgICAgICAgYW55OlxuICAgICAgICAgICAgICAgICAgICAgICAgLSB7IGtpbmQ6IGlkZW50aWZpZXIsIHBhdHRlcm46ICRJREVOVCB9XG4gICAgICAgICAgICAgICAgICAgICAgICAtIHsgaGFzOiB7a2luZDogaWRlbnRpZmllciwgcGF0dGVybjogJElERU5ULCBzdG9wQnk6IGVuZH19XG5maXg6ICcnXG4iLCJzb3VyY2UiOiJTdHJpbmcgdW51c2VkID0gXCJ1bnVzZWRcIjtcbk1hcDxTdHJpbmcsIFN0cmluZz4gZGVjbGFyZWRCdXROb3RJbnN0YW50aWF0ZWQ7XG5cblN0cmluZyB1c2VkMSA9IFwidXNlZFwiO1xuaW50IHVzZWQyID0gMztcbmJvb2xlYW4gdXNlZDMgPSBmYWxzZTtcbmludCB1c2VkNCA9IDQ7XG5TdHJpbmcgdXNlZDUgPSBcIjVcIjtcblxuXG5cbnVzZWQxO1xuU3lzdGVtLm91dC5wcmludGxuKHVzZWQyKTtcbmlmKHVzZWQzKXtcbiAgICBTeXN0ZW0ub3V0LnByaW50bG4oXCJzb21lIHZhcnMgYXJlIHVudXNlZFwiKTtcbiAgICBNYXA8U3RyaW5nLCBTdHJpbmc+IHVudXNlZE1hcCA9IG5ldyBIYXNoTWFwPD4oKSB7e1xuICAgICAgICBwdXQodXNlZDUsIFwidXNlZDVcIik7XG4gICAgfX07XG5cbiAgICAvLyBFdmVuIHRob3VnaCB3ZSBkb24ndCByZWFsbHkgZG8gYW55dGhpbmcgd2l0aCB0aGlzIG1hcCwgc2VwYXJhdGluZyB0aGUgZGVjbGFyYXRpb24gYW5kIGluc3RhbnRpYXRpb24gbWFrZXMgaXQgY291bnQgYXMgYmVpbmcgdXNlZFxuICAgIGRlY2xhcmVkQnV0Tm90SW5zdGFudGlhdGVkID0gbmV3IEhhc2hNYXA8PigpO1xuXG4gICAgcmV0dXJuIHVzZWQ0O1xufSJ9)\n\n### Description\n\nIdentifying unused variables is a common task in code refactoring. You should rely on a Java linter or IDE for this task rather than writing a custom rule in ast-grep, but for educational purposes, this rule demonstrates how to find unused variables in Java.\n\nThis approach makes some simplifying assumptions. We only consider local variable declarations and ignore the other many ways variables can be declared: Method Parameters, Fields, Class Variables, Constructor Parameters, Loop Variables, Exception Handler Parameters, Lambda Parameters, Annotation Parameters, Enum Constants, and Record Components. Now you may see why it is recommended to use a rule from an established linter or IDE rather than writing your own.\n\n### YAML\n\n```yaml\nid: no-unused-vars\nrule:\n    kind: local_variable_declaration\n    all:\n        - has:\n            has:\n                kind: identifier\n                pattern: $IDENT\n        - not:\n            precedes:\n                stopBy: end\n                has:\n                    stopBy: end\n                    any:\n                        - { kind: identifier, pattern: $IDENT }\n                        - { has: {kind: identifier, pattern: $IDENT, stopBy: end}}\nfix: ''\n```\n\nFirst, we identify the local variable declaration and capture the pattern of the identifier inside of it. Then we use `not` and `precedes` to only match the local variable declaration if the identifier we captured does not appear later in the code.\n\nIt is important to note that we use `all` here to force the ordering of the `has` rule to be before the `not` rule. This guarantees that the meta-variable `$IDENT` is captured by looking inside of the local variable declaration.\n\nAdditionally, when looking ahead in the code, we can't just look for the identifier directly, but for any node that may contain the identifier.\n\n### Example\n\n<!-- use // [!code --] and // [!code ++] to annotate diff -->\n\n```java\nString unused = \"unused\"; // [!code --]\nString used = \"used\";\nSystem.out.println(used);\n```\n",
      "description": "Identifying unused variables is a common task in code refactoring. You should rely on a Java linter or IDE for this task rather than writing a custom rule in ast-grep, but for educational purposes, this rule demonstrates how to find unused variables in Java.\n\nThis approach makes some simplifying assumptions. We only consider local variable declarations and ignore the other many ways variables can be declared: Method Parameters, Fields, Class Variables, Constructor Parameters, Loop Variables, Exception Handler Parameters, Lambda Parameters, Annotation Parameters, Enum Constants, and Record Components. Now you may see why it is recommended to use a rule from an established linter or IDE rather than writing your own.",
      "features": [],
      "has_fix": false,
      "id": "no-unused-vars",
      "language": "java",
      "playground_link": "/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6ImphdmEiLCJxdWVyeSI6ImlmKHRydWUpeyQkJEJPRFl9IiwicmV3cml0ZSI6IiRDOiBMaXN0WyRUXSA9IHJlbGF0aW9uc2hpcCgkJCRBLCB1c2VsaXN0PVRydWUsICQkJEIpIiwic3RyaWN0bmVzcyI6InNtYXJ0Iiwic2VsZWN0b3IiOiIiLCJjb25maWciOiJpZDogbm8tdW51c2VkLXZhcnNcbnJ1bGU6XG4gICAga2luZDogbG9jYWxfdmFyaWFibGVfZGVjbGFyYXRpb25cbiAgICBhbGw6XG4gICAgICAgIC0gaGFzOlxuICAgICAgICAgICAgaGFzOlxuICAgICAgICAgICAgICAgIGtpbmQ6IGlkZW50aWZpZXJcbiAgICAgICAgICAgICAgICBwYXR0ZXJuOiAkSURFTlRcbiAgICAgICAgLSBub3Q6XG4gICAgICAgICAgICBwcmVjZWRlczpcbiAgICAgICAgICAgICAgICBzdG9wQnk6IGVuZFxuICAgICAgICAgICAgICAgIGhhczpcbiAgICAgICAgICAgICAgICAgICAgc3RvcEJ5OiBlbmRcbiAgICAgICAgICAgICAgICAgICAgYW55OlxuICAgICAgICAgICAgICAgICAgICAgICAgLSB7IGtpbmQ6IGlkZW50aWZpZXIsIHBhdHRlcm46ICRJREVOVCB9XG4gICAgICAgICAgICAgICAgICAgICAgICAtIHsgaGFzOiB7a2luZDogaWRlbnRpZmllciwgcGF0dGVybjogJElERU5ULCBzdG9wQnk6IGVuZH19XG5maXg6ICcnXG4iLCJzb3VyY2UiOiJTdHJpbmcgdW51c2VkID0gXCJ1bnVzZWRcIjtcbk1hcDxTdHJpbmcsIFN0cmluZz4gZGVjbGFyZWRCdXROb3RJbnN0YW50aWF0ZWQ7XG5cblN0cmluZyB1c2VkMSA9IFwidXNlZFwiO1xuaW50IHVzZWQyID0gMztcbmJvb2xlYW4gdXNlZDMgPSBmYWxzZTtcbmludCB1c2VkNCA9IDQ7XG5TdHJpbmcgdXNlZDUgPSBcIjVcIjtcblxuXG5cbnVzZWQxO1xuU3lzdGVtLm91dC5wcmludGxuKHVzZWQyKTtcbmlmKHVzZWQzKXtcbiAgICBTeXN0ZW0ub3V0LnByaW50bG4oXCJzb21lIHZhcnMgYXJlIHVudXNlZFwiKTtcbiAgICBNYXA8U3RyaW5nLCBTdHJpbmc+IHVudXNlZE1hcCA9IG5ldyBIYXNoTWFwPD4oKSB7e1xuICAgICAgICBwdXQodXNlZDUsIFwidXNlZDVcIik7XG4gICAgfX07XG5cbiAgICAvLyBFdmVuIHRob3VnaCB3ZSBkb24ndCByZWFsbHkgZG8gYW55dGhpbmcgd2l0aCB0aGlzIG1hcCwgc2VwYXJhdGluZyB0aGUgZGVjbGFyYXRpb24gYW5kIGluc3RhbnRpYXRpb24gbWFrZXMgaXQgY291bnQgYXMgYmVpbmcgdXNlZFxuICAgIGRlY2xhcmVkQnV0Tm90SW5zdGFudGlhdGVkID0gbmV3IEhhc2hNYXA8PigpO1xuXG4gICAgcmV0dXJuIHVzZWQ0O1xufSJ9",
      "rules": [
        "kind",
        "all",
        "has",
        "not"
      ],
      "source_file": "/var/tmp/vibe-kanban/vk-ff35-organized/target/debug/build/organized-grepster-mcp-a639358d381b1d6e/out/ast-grep.github.io/website/catalog/java/no-unused-vars.md",
      "title": "No Unused Vars in Java",
      "type": "YAML",
      "yaml_content": "id: no-unused-vars\nrule:\n    kind: local_variable_declaration\n    all:\n        - has:\n            has:\n                kind: identifier\n                pattern: $IDENT\n        - not:\n            precedes:\n                stopBy: end\n                has:\n                    stopBy: end\n                    any:\n                        - { kind: identifier, pattern: $IDENT }\n                        - { has: {kind: identifier, pattern: $IDENT, stopBy: end}}\nfix: ''"
    },
    {
      "content": "## Get number of digits in a `usize` <Badge type=\"tip\" text=\"Has Fix\" />\n\n- [Playground Link](/playground.html#eyJtb2RlIjoiUGF0Y2giLCJsYW5nIjoicnVzdCIsInF1ZXJ5IjoiJE5VTS50b19zdHJpbmcoKS5jaGFycygpLmNvdW50KCkiLCJyZXdyaXRlIjoiJE5VTS5jaGVja2VkX2lsb2cxMCgpLnVud3JhcF9vcigwKSArIDEiLCJjb25maWciOiIjIFlBTUwgUnVsZSBpcyBtb3JlIHBvd2VyZnVsIVxuIyBodHRwczovL2FzdC1ncmVwLmdpdGh1Yi5pby9ndWlkZS9ydWxlLWNvbmZpZy5odG1sI3J1bGVcbnJ1bGU6XG4gIGFueTpcbiAgICAtIHBhdHRlcm46IGNvbnNvbGUubG9nKCRBKVxuICAgIC0gcGF0dGVybjogY29uc29sZS5kZWJ1ZygkQSlcbmZpeDpcbiAgbG9nZ2VyLmxvZygkQSkiLCJzb3VyY2UiOiJsZXQgd2lkdGggPSAobGluZXMgKyBudW0pLnRvX3N0cmluZygpLmNoYXJzKCkuY291bnQoKTsifQ==)\n\n### Description\n\nGetting the number of digits in a usize number can be useful for various purposes, such as counting the column width of line numbers in a text editor or formatting the output of a number with commas or spaces.\n\nA common but inefficient way of getting the number of digits in a `usize` number is to use `num.to_string().chars().count()`. This method converts the number to a string, iterates over its characters, and counts them. However, this method involves allocating a new string, which can be costly in terms of memory and time.\n\nA better alternative is to use [`checked_ilog10`](https://doc.rust-lang.org/std/primitive.usize.html#method.checked_ilog10).\n\n```rs\nnum.checked_ilog10().unwrap_or(0) + 1\n```\n\nThe snippet above computes the integer logarithm base 10 of the number and adds one. This snippet does not allocate any memory and is faster than the string conversion approach. The [efficient](https://doc.rust-lang.org/src/core/num/int_log10.rs.html) `checked_ilog10` function returns an `Option<usize>` that is `Some(log)` if the number is positive and `None` if the number is zero. The `unwrap_or(0)` function returns the value inside the option or `0` if the option is `None`.\n\n### Pattern\n\n```shell\nast-grep -p '$NUM.to_string().chars().count()' \\\n   -r '$NUM.checked_ilog10().unwrap_or(0) + 1' \\\n   -l rs\n```\n\n### Example\n\n```rs {1}\nlet width = (lines + num).to_string().chars().count();\n```\n\n### Diff\n\n<!-- use // [!code --] and // [!code ++] to annotate diff -->\n\n```rs\nlet width = (lines + num).to_string().chars().count(); // [!code --]\nlet width = (lines + num).checked_ilog10().unwrap_or(0) + 1; // [!code ++]\n```\n\n### Contributed by\n\n[Herrington Darkholme](https://twitter.com/hd_nvim), inspired by [dogfooding ast-grep](https://github.com/ast-grep/ast-grep/issues/550)\n",
      "description": "Getting the number of digits in a usize number can be useful for various purposes, such as counting the column width of line numbers in a text editor or formatting the output of a number with commas or spaces.\n\nA common but inefficient way of getting the number of digits in a `usize` number is to use `num.to_string().chars().count()`. This method converts the number to a string, iterates over its characters, and counts them. However, this method involves allocating a new string, which can be costly in terms of memory and time.\n\nA better alternative is to use [`checked_ilog10`](https://doc.rust-lang.org/std/primitive.usize.html#method.checked_ilog10).",
      "features": [],
      "has_fix": true,
      "id": "get-digit-count-in-usize",
      "language": "rust",
      "playground_link": "/playground.html#eyJtb2RlIjoiUGF0Y2giLCJsYW5nIjoicnVzdCIsInF1ZXJ5IjoiJE5VTS50b19zdHJpbmcoKS5jaGFycygpLmNvdW50KCkiLCJyZXdyaXRlIjoiJE5VTS5jaGVja2VkX2lsb2cxMCgpLnVud3JhcF9vcigwKSArIDEiLCJjb25maWciOiIjIFlBTUwgUnVsZSBpcyBtb3JlIHBvd2VyZnVsIVxuIyBodHRwczovL2FzdC1ncmVwLmdpdGh1Yi5pby9ndWlkZS9ydWxlLWNvbmZpZy5odG1sI3J1bGVcbnJ1bGU6XG4gIGFueTpcbiAgICAtIHBhdHRlcm46IGNvbnNvbGUubG9nKCRBKVxuICAgIC0gcGF0dGVybjogY29uc29sZS5kZWJ1ZygkQSlcbmZpeDpcbiAgbG9nZ2VyLmxvZygkQSkiLCJzb3VyY2UiOiJsZXQgd2lkdGggPSAobGluZXMgKyBudW0pLnRvX3N0cmluZygpLmNoYXJzKCkuY291bnQoKTsifQ==",
      "rules": [],
      "source_file": "/var/tmp/vibe-kanban/vk-ff35-organized/target/debug/build/organized-grepster-mcp-a639358d381b1d6e/out/ast-grep.github.io/website/catalog/rust/get-digit-count-in-usize.md",
      "title": "Get number of digits in a `usize`",
      "type": "Pattern",
      "yaml_content": ""
    },
    {
      "content": "## Avoid Duplicated Exports\n\n- [Playground Link](/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6InJ1c3QiLCJxdWVyeSI6IiIsImNvbmZpZyI6InJ1bGU6XG4gIGFsbDpcbiAgICAgLSBwYXR0ZXJuOiBwdWIgdXNlICRCOjokQztcbiAgICAgLSBpbnNpZGU6XG4gICAgICAgIGtpbmQ6IHNvdXJjZV9maWxlXG4gICAgICAgIGhhczpcbiAgICAgICAgICBwYXR0ZXJuOiBwdWIgbW9kICRBO1xuICAgICAtIGhhczpcbiAgICAgICAgcGF0dGVybjogJEFcbiAgICAgICAgc3RvcEJ5OiBlbmQiLCJzb3VyY2UiOiJwdWIgbW9kIGZvbztcbnB1YiB1c2UgZm9vOjpGb287XG5wdWIgdXNlIGZvbzo6QTo6QjtcblxuXG5wdWIgdXNlIGFhYTo6QTtcbnB1YiB1c2Ugd29vOjpXb287In0=)\n\n### Description\n\nGenerally, we don't encourage the use of re-exports.\n\nHowever, sometimes, to keep the interface exposed by a lib crate tidy, we use re-exports to shorten the path to specific items.\nWhen doing so, a pitfall is to export a single item under two different names.\n\nConsider:\n\n```rs\npub mod foo;\npub use foo::Foo;\n```\n\nThe issue with this code, is that `Foo` is now exposed under two different paths: `Foo`, `foo::Foo`.\n\nThis unnecessarily increases the surface of your API.\nIt can also cause issues on the client side. For example, it makes the usage of auto-complete in the IDE more involved.\n\nInstead, ensure you export only once with `pub`.\n\n<!-- Use YAML in the example. Delete this section if use pattern. -->\n\n### YAML\n\n```yaml\nid: avoid-duplicate-export\nlanguage: rust\nrule:\n  all:\n     - pattern: pub use $B::$C;\n     - inside:\n        kind: source_file\n        has:\n          pattern: pub mod $A;\n     - has:\n        pattern: $A\n        stopBy: end\n```\n\n### Example\n\n<!-- highlight matched code in curly-brace {lineNum} -->\n\n```rs {2,3}\npub mod foo;\npub use foo::Foo;\npub use foo::A::B;\n\n\npub use aaa::A;\npub use woo::Woo;\n```\n\n### Contributed by\n\nJulius Lungys([voidpumpkin](https://github.com/voidpumpkin))\n",
      "description": "Generally, we don't encourage the use of re-exports.\n\nHowever, sometimes, to keep the interface exposed by a lib crate tidy, we use re-exports to shorten the path to specific items.\nWhen doing so, a pitfall is to export a single item under two different names.\n\nConsider:",
      "features": [],
      "has_fix": false,
      "id": "avoid-duplicated-exports",
      "language": "rust",
      "playground_link": "/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6InJ1c3QiLCJxdWVyeSI6IiIsImNvbmZpZyI6InJ1bGU6XG4gIGFsbDpcbiAgICAgLSBwYXR0ZXJuOiBwdWIgdXNlICRCOjokQztcbiAgICAgLSBpbnNpZGU6XG4gICAgICAgIGtpbmQ6IHNvdXJjZV9maWxlXG4gICAgICAgIGhhczpcbiAgICAgICAgICBwYXR0ZXJuOiBwdWIgbW9kICRBO1xuICAgICAtIGhhczpcbiAgICAgICAgcGF0dGVybjogJEFcbiAgICAgICAgc3RvcEJ5OiBlbmQiLCJzb3VyY2UiOiJwdWIgbW9kIGZvbztcbnB1YiB1c2UgZm9vOjpGb287XG5wdWIgdXNlIGZvbzo6QTo6QjtcblxuXG5wdWIgdXNlIGFhYTo6QTtcbnB1YiB1c2Ugd29vOjpXb287In0=",
      "rules": [
        "all",
        "pattern",
        "inside",
        "has"
      ],
      "source_file": "/var/tmp/vibe-kanban/vk-ff35-organized/target/debug/build/organized-grepster-mcp-a639358d381b1d6e/out/ast-grep.github.io/website/catalog/rust/avoid-duplicated-exports.md",
      "title": "Avoid Duplicated Exports",
      "type": "YAML",
      "yaml_content": "id: avoid-duplicate-export\nlanguage: rust\nrule:\n  all:\n     - pattern: pub use $B::$C;\n     - inside:\n        kind: source_file\n        has:\n          pattern: pub mod $A;\n     - has:\n        pattern: $A\n        stopBy: end"
    },
    {
      "content": "## Beware of char offset when iterate over a string <Badge type=\"tip\" text=\"Has Fix\" />\n\n- [Playground Link](https://ast-grep.github.io/playground.html#eyJtb2RlIjoiUGF0Y2giLCJsYW5nIjoicnVzdCIsInF1ZXJ5IjoiJEEuY2hhcnMoKS5lbnVtZXJhdGUoKSIsInJld3JpdGUiOiIkQS5jaGFyX2luZGljZXMoKSIsImNvbmZpZyI6IiIsInNvdXJjZSI6ImZvciAoaSwgY2hhcikgaW4gc291cmNlLmNoYXJzKCkuZW51bWVyYXRlKCkge1xuICAgIHByaW50bG4hKFwiQm9zaGVuIGlzIGFuZ3J5IDopXCIpO1xufSJ9)\n\n### Description\n\nIt's a common pitfall in Rust that counting _character offset_ is not the same as counting _byte offset_ when iterating through a string. Rust string is represented by utf-8 byte array, which is a variable-length encoding scheme.\n\n`chars().enumerate()` will yield the character offset, while [`char_indices()`](https://doc.rust-lang.org/std/primitive.str.html#method.char_indices) will yield the byte offset.\n\n```rs\nlet yes = \"y̆es\";\nlet mut char_indices = yes.char_indices();\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n```\n\nDepending on your use case, you may want to use `char_indices()` instead of `chars().enumerate()`.\n\n### Pattern\n\n```shell\nast-grep -p '$A.chars().enumerate()' \\\n   -r '$A.char_indices()' \\\n   -l rs\n```\n\n### Example\n\n```rs {1}\nfor (i, char) in source.chars().enumerate() {\n    println!(\"Boshen is angry :)\");\n}\n```\n\n### Diff\n\n<!-- use // [!code --] and // [!code ++] to annotate diff -->\n\n```rs\nfor (i, char) in source.chars().enumerate() { // [!code --]\nfor (i, char) in source.char_indices() { // [!code ++]\n    println!(\"Boshen is angry :)\");\n}\n```\n\n### Contributed by\n\nInspired by [Boshen's Tweet](https://x.com/boshen_c/status/1719033308682870891)\n\n![Boshen's footgun](https://pbs.twimg.com/media/F9s7mJHaYAEndnY?format=jpg&name=medium)\n",
      "description": "It's a common pitfall in Rust that counting _character offset_ is not the same as counting _byte offset_ when iterating through a string. Rust string is represented by utf-8 byte array, which is a variable-length encoding scheme.\n\n`chars().enumerate()` will yield the character offset, while [`char_indices()`](https://doc.rust-lang.org/std/primitive.str.html#method.char_indices) will yield the byte offset.",
      "features": [],
      "has_fix": true,
      "id": "boshen-footgun",
      "language": "rust",
      "playground_link": "https://ast-grep.github.io/playground.html#eyJtb2RlIjoiUGF0Y2giLCJsYW5nIjoicnVzdCIsInF1ZXJ5IjoiJEEuY2hhcnMoKS5lbnVtZXJhdGUoKSIsInJld3JpdGUiOiIkQS5jaGFyX2luZGljZXMoKSIsImNvbmZpZyI6IiIsInNvdXJjZSI6ImZvciAoaSwgY2hhcikgaW4gc291cmNlLmNoYXJzKCkuZW51bWVyYXRlKCkge1xuICAgIHByaW50bG4hKFwiQm9zaGVuIGlzIGFuZ3J5IDopXCIpO1xufSJ9",
      "rules": [],
      "source_file": "/var/tmp/vibe-kanban/vk-ff35-organized/target/debug/build/organized-grepster-mcp-a639358d381b1d6e/out/ast-grep.github.io/website/catalog/rust/boshen-footgun.md",
      "title": "Beware of char offset when iterate over a string",
      "type": "Pattern",
      "yaml_content": ""
    },
    {
      "content": "## Rewrite `indoc!` macro <Badge type=\"tip\" text=\"Has Fix\" />\n\n- [Playground Link](/playground.html#eyJtb2RlIjoiUGF0Y2giLCJsYW5nIjoicnVzdCIsInF1ZXJ5IjoiaW5kb2MhIHsgciNcIiQkJEFcIiMgfSIsInJld3JpdGUiOiJgJCQkQWAiLCJzdHJpY3RuZXNzIjoicmVsYXhlZCIsInNlbGVjdG9yIjoiIiwiY29uZmlnIjoicnVsZTogXG4gYW55OlxuIC0gcGF0dGVybjogJFYgPT09ICRTRU5TRVRJVkVXT1JEXG4gLSBwYXR0ZXJuOiAkU0VOU0VUSVZFV09SRCA9PT0gJFZcbmNvbnN0cmFpbnRzOlxuICBTRU5TRVRJVkVXT1JEOlxuICAgIHJlZ2V4OiBwYXNzd29yZCIsInNvdXJjZSI6ImZuIG1haW4oKSB7XG4gICAgaW5kb2MhIHtyI1wiXG4gICAgICAgIC5mb28ge1xuICAgICAgICAgICAgb3JkZXI6IDE7XG4gICAgICAgIH1cbiAgICBcIiN9O1xufSJ9)\n\n### Description\n\nThis example, created from [a Tweet](https://x.com/zack_overflow/status/1885065128590401551), shows a refactoring operation being performed on Rust source code. The changes involve removing `indoc!` macro declarations while preserving the CSS-like content within them.\n\nPreviously, the same refactor is implemented by a _unreadable monster regex_ in vim syntax.\n\n:::details Click to see the original regex (neovim, btw)\n\n```vimscript\n:%s/\\v(indoc!|)(| )([|\\{)r#\"(([^#]+|\\n+)+)\"#/`\\4`\n```\n\nI have to confess that I don't understand this regex even if I use neovim, btw.\n\nLet Claude break it down piece by piece:\n\n- `:%s/` - Vim substitution command for all lines\n- `\\v` - Very magic mode in vim for simpler regex syntax\n- `(indoc!|)` - First capture group: matches either \"indoc!\" or nothing\n- `(| )` - Second capture group: matches either empty string or a space\n- `([|\\{)` - Third capture group: matches either `[` or `{`\n- `r#\"` - Matches literal `r#\"` (Rust raw string delimiter)\n- `(([^#]+|\\n+)+)` - Fourth capture group (nested):\n  - `[^#]+` - One or more non-# characters\n  - `|\\n+` - OR one or more newlines\n  - Outer `()+` makes this repeat one or more times\n- `\"#` - Matches the closing raw string delimiter\n- \\`\\4\\` - Replaces with the fourth capture group wrapped in backticks\n\nThis regex is designed to find Rust raw string literals (possibly wrapped in `indoc!` macro), capture their content, and replace the entire match with just the content wrapped in backticks. It's more precise than my previous explanation and matches the pattern you're showing.\n\n:::\n\n<!-- Use pattern in the example. Delete this section if use YAML. -->\n\n### Pattern\n\n```shell\nast-grep --pattern 'indoc! { r#\"$$$A\"# }' --rewrite '`$$$A`' sgtest.rs\n```\n\n### Example\n\n<!-- highlight matched code in curly-brace {lineNum} -->\n\n```rs {2-6}\nfn main() {\n    indoc! {r#\"\n        .foo {\n            order: 1;\n        }\n    \"#};\n}\n```\n\n### Diff\n\n<!-- use // [!code --] and // [!code ++] to annotate diff -->\n\n```rs\nfn main() {\n    indoc! {r#\" // [!code --]\n    `.foo {    // [!code ++]\n        order: 1;\n    }\n    \"#}; // [!code --]\n        `; // [!code ++]\n}\n```\n\n### Contributed by\n\n[Zack in SF](https://x.com/zack_overflow)\n",
      "description": "This example, created from [a Tweet](https://x.com/zack_overflow/status/1885065128590401551), shows a refactoring operation being performed on Rust source code. The changes involve removing `indoc!` macro declarations while preserving the CSS-like content within them.\n\nPreviously, the same refactor is implemented by a _unreadable monster regex_ in vim syntax.\n\n:::details Click to see the original regex (neovim, btw)",
      "features": [],
      "has_fix": true,
      "id": "rewrite-indoc-macro",
      "language": "rust",
      "playground_link": "/playground.html#eyJtb2RlIjoiUGF0Y2giLCJsYW5nIjoicnVzdCIsInF1ZXJ5IjoiaW5kb2MhIHsgciNcIiQkJEFcIiMgfSIsInJld3JpdGUiOiJgJCQkQWAiLCJzdHJpY3RuZXNzIjoicmVsYXhlZCIsInNlbGVjdG9yIjoiIiwiY29uZmlnIjoicnVsZTogXG4gYW55OlxuIC0gcGF0dGVybjogJFYgPT09ICRTRU5TRVRJVkVXT1JEXG4gLSBwYXR0ZXJuOiAkU0VOU0VUSVZFV09SRCA9PT0gJFZcbmNvbnN0cmFpbnRzOlxuICBTRU5TRVRJVkVXT1JEOlxuICAgIHJlZ2V4OiBwYXNzd29yZCIsInNvdXJjZSI6ImZuIG1haW4oKSB7XG4gICAgaW5kb2MhIHtyI1wiXG4gICAgICAgIC5mb28ge1xuICAgICAgICAgICAgb3JkZXI6IDE7XG4gICAgICAgIH1cbiAgICBcIiN9O1xufSJ9",
      "rules": [],
      "source_file": "/var/tmp/vibe-kanban/vk-ff35-organized/target/debug/build/organized-grepster-mcp-a639358d381b1d6e/out/ast-grep.github.io/website/catalog/rust/rewrite-indoc-macro.md",
      "title": "Rewrite `indoc!` macro",
      "type": "Pattern",
      "yaml_content": ""
    },
    {
      "content": "## Extract i18n Keys <Badge type=\"tip\" text=\"Has Fix\" />\n\n- [Playground Link](/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6Imh0bWwiLCJxdWVyeSI6IiIsInJld3JpdGUiOiIiLCJzdHJpY3RuZXNzIjoicmVsYXhlZCIsInNlbGVjdG9yIjoiIiwiY29uZmlnIjoicnVsZTpcbiAga2luZDogdGV4dFxuICBwYXR0ZXJuOiAkVFxuICBub3Q6XG4gICAgcmVnZXg6ICdcXHtcXHsuKlxcfVxcfSdcbmZpeDogXCJ7eyAkKCckVCcpIH19XCIiLCJzb3VyY2UiOiI8dGVtcGxhdGU+XG4gIDxzcGFuPkhlbGxvPC9zcGFuPlxuICA8c3Bhbj57eyB0ZXh0IH19PC9zcGFuPlxuPC90ZW1wbGF0ZT4ifQ==)\n\n### Description\n\nIt is tedious to manually find and replace all the text in the template with i18n keys. This rule helps to extract static text into i18n keys. Dynamic text, e.g. mustache syntax, will be skipped.\n\nIn practice, you may want to map the extracted text to a key in a dictionary file. While this rule only demonstrates the extraction part, further mapping process can be done via a script reading the output of ast-grep's [`--json`](/guide/tools/json.html) mode, or using [`@ast-grep/napi`](/guide/api-usage/js-api.html).\n\n### YAML\n\n```yaml\nid: extract-i18n-key\nlanguage: html\nrule:\n  kind: text\n  pattern: $T\n  # skip dynamic text in mustache syntax\n  not: { regex: '\\{\\{.*\\}\\}' }\nfix: \"{{ $('$T') }}\"\n```\n\n### Example\n\n<!-- highlight matched code in curly-brace {lineNum} -->\n\n```html {2}\n<template>\n  <span>Hello</span>\n  <span>{{ text }}</span>\n</template>\n```\n\n### Diff\n\n<!-- use // [!code --] and // [!code ++] to annotate diff -->\n\n```html\n<template>\n  <span>Hello</span> // [!code --]\n  <span>{{ $('Hello') }}</span> // [!code ++]\n  <span>{{ text }}</span>\n</template>\n```\n\n### Contributed by\n\nInspired by [Vue.js RFC](https://github.com/vuejs/rfcs/discussions/705#discussion-7255672)\n",
      "description": "It is tedious to manually find and replace all the text in the template with i18n keys. This rule helps to extract static text into i18n keys. Dynamic text, e.g. mustache syntax, will be skipped.\n\nIn practice, you may want to map the extracted text to a key in a dictionary file. While this rule only demonstrates the extraction part, further mapping process can be done via a script reading the output of ast-grep's [`--json`](/guide/tools/json.html) mode, or using [`@ast-grep/napi`](/guide/api-usage/js-api.html).",
      "features": [],
      "has_fix": true,
      "id": "extract-i18n-key",
      "language": "html",
      "playground_link": "/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6Imh0bWwiLCJxdWVyeSI6IiIsInJld3JpdGUiOiIiLCJzdHJpY3RuZXNzIjoicmVsYXhlZCIsInNlbGVjdG9yIjoiIiwiY29uZmlnIjoicnVsZTpcbiAga2luZDogdGV4dFxuICBwYXR0ZXJuOiAkVFxuICBub3Q6XG4gICAgcmVnZXg6ICdcXHtcXHsuKlxcfVxcfSdcbmZpeDogXCJ7eyAkKCckVCcpIH19XCIiLCJzb3VyY2UiOiI8dGVtcGxhdGU+XG4gIDxzcGFuPkhlbGxvPC9zcGFuPlxuICA8c3Bhbj57eyB0ZXh0IH19PC9zcGFuPlxuPC90ZW1wbGF0ZT4ifQ==",
      "rules": [
        "kind",
        "pattern",
        "not"
      ],
      "source_file": "/var/tmp/vibe-kanban/vk-ff35-organized/target/debug/build/organized-grepster-mcp-a639358d381b1d6e/out/ast-grep.github.io/website/catalog/html/extract-i18n-key.md",
      "title": "Extract i18n Keys",
      "type": "YAML",
      "yaml_content": "id: extract-i18n-key\nlanguage: html\nrule:\n  kind: text\n  pattern: $T\n  # skip dynamic text in mustache syntax\n  not: { regex: '\\{\\{.*\\}\\}' }\nfix: \"{{ $('$T') }}\""
    },
    {
      "content": "<!-- Remove Badge if it does not have fix-->\n\n## Upgrade Ant Design Vue <Badge type=\"tip\" text=\"Has Fix\" />\n\n- [Playground Link](/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6Imh0bWwiLCJxdWVyeSI6IiIsInJld3JpdGUiOiIiLCJzdHJpY3RuZXNzIjoicmVsYXhlZCIsInNlbGVjdG9yIjoiIiwiY29uZmlnIjoidXRpbHM6XG4gIGluc2lkZS10YWc6XG4gICAgaW5zaWRlOlxuICAgICAga2luZDogZWxlbWVudCBcbiAgICAgIHN0b3BCeTogeyBraW5kOiBlbGVtZW50IH1cbiAgICAgIGhhczpcbiAgICAgICAgc3RvcEJ5OiB7IGtpbmQ6IHRhZ19uYW1lIH1cbiAgICAgICAga2luZDogdGFnX25hbWVcbiAgICAgICAgcGF0dGVybjogJFRBR19OQU1FXG5ydWxlOlxuICBraW5kOiBhdHRyaWJ1dGVfbmFtZVxuICByZWdleDogOnZpc2libGVcbiAgbWF0Y2hlczogaW5zaWRlLXRhZyAgXG5maXg6IDpvcGVuXG5jb25zdHJhaW50czpcbiAgVEFHX05BTUU6XG4gICAgcmVnZXg6IGEtbW9kYWx8YS10b29sdGlwIiwic291cmNlIjoiPHRlbXBsYXRlPlxuICA8YS1tb2RhbCA6dmlzaWJsZT1cInZpc2libGVcIj5jb250ZW50PC9hLW1vZGFsPlxuICA8YS10b29sdGlwIDp2aXNpYmxlPVwidmlzaWJsZVwiIC8+XG4gIDxhLXRhZyA6dmlzaWJsZT1cInZpc2libGVcIj50YWc8L2EtdGFnPlxuPC90ZW1wbGF0ZT4ifQ==)\n\n### Description\n\nast-grep can be used to upgrade Vue template using the HTML parser.\n\nThis rule is an example to upgrade [one breaking change](https://next.antdv.com/docs/vue/migration-v4#component-api-adjustment) in [Ant Design Vue](https://next.antdv.com/components/overview) from v3 to v4, unifying the controlled visible API of the component popup.\n\nIt is designed to identify and replace the `visible` attribute with the `open` attribute for specific components like `a-modal` and `a-tooltip`. Note the rule should not replace other visible attributes that are not related to the component popup like `a-tag`.\n\nThe rule can be broken down into the following steps:\n\n1. Find the target attribute name by `kind` and `regex`\n2. Find the attribute's enclosing element using `inside`, and get its tag name\n3. Ensure the tag name is related to popup components, using constraints\n\n<!-- Use YAML in the example. Delete this section if use pattern. -->\n\n### YAML\n\n```yaml\nid: upgrade-ant-design-vue\nlanguage: HTML\nutils:\n  inside-tag:\n    # find the enclosing element of the attribute\n    inside:\n      kind: element\n      stopBy: { kind: element } # only the closest element\n      # find the tag name and store it in metavar\n      has:\n        stopBy: { kind: tag_name }\n        kind: tag_name\n        pattern: $TAG_NAME\nrule:\n  # find the target attribute_name\n  kind: attribute_name\n  regex: :visible\n  # find the element\n  matches: inside-tag\n# ensure it only matches modal/tooltip but not tag\nconstraints:\n  TAG_NAME:\n    regex: a-modal|a-tooltip\nfix: :open\n```\n\n### Example\n\n<!-- highlight matched code in curly-brace {lineNum} -->\n\n```html {2,3}\n<template>\n  <a-modal :visible=\"visible\">content</a-modal>\n  <a-tooltip :visible=\"visible\" />\n  <a-tag :visible=\"visible\">tag</a-tag>\n</template>\n```\n\n### Diff\n\n<!-- use // [!code --] and // [!code ++] to annotate diff -->\n\n```html\n<template>\n  <a-modal :visible=\"visible\">content</a-modal> // [!code --]\n  <a-modal :open=\"visible\">content</a-modal> // [!code ++]\n  <a-tooltip :visible=\"visible\" /> // [!code --]\n  <a-tooltip :open=\"visible\" /> // [!code ++]\n  <a-tag :visible=\"visible\">tag</a-tag>\n</template>\n```\n\n### Contributed by\n\nInspired by [Vue.js RFC](https://github.com/vuejs/rfcs/discussions/705#discussion-7255672)\n",
      "description": "ast-grep can be used to upgrade Vue template using the HTML parser.\n\nThis rule is an example to upgrade [one breaking change](https://next.antdv.com/docs/vue/migration-v4#component-api-adjustment) in [Ant Design Vue](https://next.antdv.com/components/overview) from v3 to v4, unifying the controlled visible API of the component popup.\n\nIt is designed to identify and replace the `visible` attribute with the `open` attribute for specific components like `a-modal` and `a-tooltip`. Note the rule should not replace other visible attributes that are not related to the component popup like `a-tag`.\n\nThe rule can be broken down into the following steps:\n\n1. Find the target attribute name by `kind` and `regex`\n2. Find the attribute's enclosing element using `inside`, and get its tag name\n3. Ensure the tag name is related to popup components, using constraints\n\n<!-- Use YAML in the example. Delete this section if use pattern. -->",
      "features": [
        "utils",
        "constraints"
      ],
      "has_fix": true,
      "id": "upgrade-ant-design-vue",
      "language": "html",
      "playground_link": "/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6Imh0bWwiLCJxdWVyeSI6IiIsInJld3JpdGUiOiIiLCJzdHJpY3RuZXNzIjoicmVsYXhlZCIsInNlbGVjdG9yIjoiIiwiY29uZmlnIjoidXRpbHM6XG4gIGluc2lkZS10YWc6XG4gICAgaW5zaWRlOlxuICAgICAga2luZDogZWxlbWVudCBcbiAgICAgIHN0b3BCeTogeyBraW5kOiBlbGVtZW50IH1cbiAgICAgIGhhczpcbiAgICAgICAgc3RvcEJ5OiB7IGtpbmQ6IHRhZ19uYW1lIH1cbiAgICAgICAga2luZDogdGFnX25hbWVcbiAgICAgICAgcGF0dGVybjogJFRBR19OQU1FXG5ydWxlOlxuICBraW5kOiBhdHRyaWJ1dGVfbmFtZVxuICByZWdleDogOnZpc2libGVcbiAgbWF0Y2hlczogaW5zaWRlLXRhZyAgXG5maXg6IDpvcGVuXG5jb25zdHJhaW50czpcbiAgVEFHX05BTUU6XG4gICAgcmVnZXg6IGEtbW9kYWx8YS10b29sdGlwIiwic291cmNlIjoiPHRlbXBsYXRlPlxuICA8YS1tb2RhbCA6dmlzaWJsZT1cInZpc2libGVcIj5jb250ZW50PC9hLW1vZGFsPlxuICA8YS10b29sdGlwIDp2aXNpYmxlPVwidmlzaWJsZVwiIC8+XG4gIDxhLXRhZyA6dmlzaWJsZT1cInZpc2libGVcIj50YWc8L2EtdGFnPlxuPC90ZW1wbGF0ZT4ifQ==",
      "rules": [
        "kind",
        "regex",
        "matches"
      ],
      "source_file": "/var/tmp/vibe-kanban/vk-ff35-organized/target/debug/build/organized-grepster-mcp-a639358d381b1d6e/out/ast-grep.github.io/website/catalog/html/upgrade-ant-design-vue.md",
      "title": "Upgrade Ant Design Vue",
      "type": "YAML",
      "yaml_content": "id: upgrade-ant-design-vue\nlanguage: HTML\nutils:\n  inside-tag:\n    # find the enclosing element of the attribute\n    inside:\n      kind: element\n      stopBy: { kind: element } # only the closest element\n      # find the tag name and store it in metavar\n      has:\n        stopBy: { kind: tag_name }\n        kind: tag_name\n        pattern: $TAG_NAME\nrule:\n  # find the target attribute_name\n  kind: attribute_name\n  regex: :visible\n  # find the element\n  matches: inside-tag\n# ensure it only matches modal/tooltip but not tag\nconstraints:\n  TAG_NAME:\n    regex: a-modal|a-tooltip\nfix: :open"
    },
    {
      "content": "## Match Function Call in C\n\n- [Playground Link](/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6ImMiLCJxdWVyeSI6InRlc3QoJCQkKSIsInJld3JpdGUiOiIiLCJjb25maWciOiJydWxlOlxuICBwYXR0ZXJuOiBcbiAgICBjb250ZXh0OiAkTSgkJCQpO1xuICAgIHNlbGVjdG9yOiBjYWxsX2V4cHJlc3Npb24iLCJzb3VyY2UiOiIjZGVmaW5lIHRlc3QoeCkgKDIqeClcbmludCBhID0gdGVzdCgyKTtcbmludCBtYWluKCl7XG4gICAgaW50IGIgPSB0ZXN0KDIpO1xufSJ9)\n\n### Description\n\nOne of the common questions of ast-grep is to match function calls in C.\n\nA plain pattern like `test($A)` will not work. This is because [tree-sitter-c](https://github.com/tree-sitter/tree-sitter-c)\nparse the code snippet into `macro_type_specifier`, see the [pattern output](https://ast-grep.github.io/playground.html#eyJtb2RlIjoiUGF0Y2giLCJsYW5nIjoiYyIsInF1ZXJ5IjoidGVzdCgkJCQpIiwicmV3cml0ZSI6IiIsImNvbmZpZyI6InJ1bGU6XG4gIHBhdHRlcm46IFxuICAgIGNvbnRleHQ6ICRNKCQkJCk7XG4gICAgc2VsZWN0b3I6IGNhbGxfZXhwcmVzc2lvbiIsInNvdXJjZSI6IiNkZWZpbmUgdGVzdCh4KSAoMip4KVxuaW50IGEgPSB0ZXN0KDIpO1xuaW50IG1haW4oKXtcbiAgICBpbnQgYiA9IHRlc3QoMik7XG59In0=).\n\nTo avoid this ambiguity, ast-grep lets us write a [contextual pattern](/guide/rule-config/atomic-rule.html#pattern), which is a pattern inside a larger code snippet.\nWe can use `context` to write a pattern like this: `test($A);`. Then, we can use the selector `call_expression` to match only function calls.\n\n### YAML\n\n```yaml\nid: match-function-call\nlanguage: c\nrule:\n  pattern:\n    context: $M($$$);\n    selector: call_expression\n```\n\n### Example\n\n<!-- highlight matched code in curly-brace {lineNum} -->\n\n```c{2,4}\n#define test(x) (2*x)\nint a = test(2);\nint main(){\n    int b = test(2);\n}\n```\n\n### Caveat\n\nNote, tree-sitter-c parses code differently when it receives code fragment. For example,\n\n- `test(a)` is parsed as `macro_type_specifier`\n- `test(a);` is parsed as `expression_statement -> call_expression`\n- `int b = test(a)` is parsed as `declaration -> init_declarator -> call_expression`\n\nThe behavior is controlled by how the tree-sitter parser is written. And tree-sitter-c behaves differently from [tree-sitter-cpp](https://github.com/tree-sitter/tree-sitter-cpp).\n\nPlease file issues on tree-sitter-c repo if you want to change the behavior. ast-grep will respect changes and decision from upstream authors.\n",
      "description": "One of the common questions of ast-grep is to match function calls in C.\n\nA plain pattern like `test($A)` will not work. This is because [tree-sitter-c](https://github.com/tree-sitter/tree-sitter-c)\nparse the code snippet into `macro_type_specifier`, see the [pattern output](https://ast-grep.github.io/playground.html#eyJtb2RlIjoiUGF0Y2giLCJsYW5nIjoiYyIsInF1ZXJ5IjoidGVzdCgkJCQpIiwicmV3cml0ZSI6IiIsImNvbmZpZyI6InJ1bGU6XG4gIHBhdHRlcm46IFxuICAgIGNvbnRleHQ6ICRNKCQkJCk7XG4gICAgc2VsZWN0b3I6IGNhbGxfZXhwcmVzc2lvbiIsInNvdXJjZSI6IiNkZWZpbmUgdGVzdCh4KSAoMip4KVxuaW50IGEgPSB0ZXN0KDIpO1xuaW50IG1haW4oKXtcbiAgICBpbnQgYiA9IHRlc3QoMik7XG59In0=).\n\nTo avoid this ambiguity, ast-grep lets us write a [contextual pattern](/guide/rule-config/atomic-rule.html#pattern), which is a pattern inside a larger code snippet.\nWe can use `context` to write a pattern like this: `test($A);`. Then, we can use the selector `call_expression` to match only function calls.",
      "features": [],
      "has_fix": false,
      "id": "match-function-call",
      "language": "c",
      "playground_link": "/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6ImMiLCJxdWVyeSI6InRlc3QoJCQkKSIsInJld3JpdGUiOiIiLCJjb25maWciOiJydWxlOlxuICBwYXR0ZXJuOiBcbiAgICBjb250ZXh0OiAkTSgkJCQpO1xuICAgIHNlbGVjdG9yOiBjYWxsX2V4cHJlc3Npb24iLCJzb3VyY2UiOiIjZGVmaW5lIHRlc3QoeCkgKDIqeClcbmludCBhID0gdGVzdCgyKTtcbmludCBtYWluKCl7XG4gICAgaW50IGIgPSB0ZXN0KDIpO1xufSJ9",
      "rules": [
        "pattern"
      ],
      "source_file": "/var/tmp/vibe-kanban/vk-ff35-organized/target/debug/build/organized-grepster-mcp-a639358d381b1d6e/out/ast-grep.github.io/website/catalog/c/match-function-call.md",
      "title": "Match Function Call in C",
      "type": "YAML",
      "yaml_content": "id: match-function-call\nlanguage: c\nrule:\n  pattern:\n    context: $M($$$);\n    selector: call_expression"
    },
    {
      "content": "<!-- Remove Badge if it does not have fix-->\n\n## Rewrite Method to Function Call <Badge type=\"tip\" text=\"Has Fix\" />\n\n- [Playground Link](/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6ImMiLCJxdWVyeSI6IiRDT1VOVCA9ICRcbiIsInJld3JpdGUiOiIiLCJjb25maWciOiJpZDogbWV0aG9kX3JlY2VpdmVyXG5ydWxlOlxuICBwYXR0ZXJuOiAkUi4kTUVUSE9EKCQkJEFSR1MpXG50cmFuc2Zvcm06XG4gIE1BWUJFX0NPTU1BOlxuICAgIHJlcGxhY2U6XG4gICAgICBzb3VyY2U6ICQkJEFSR1NcbiAgICAgIHJlcGxhY2U6ICdeLisnXG4gICAgICBieTogJywgJ1xuZml4OlxuICAkTUVUSE9EKCYkUiRNQVlCRV9DT01NQSQkJEFSR1MpXG4iLCJzb3VyY2UiOiJ2b2lkIHRlc3RfZnVuYygpIHtcbiAgICBzb21lX3N0cnVjdC0+ZmllbGQubWV0aG9kKCk7XG4gICAgc29tZV9zdHJ1Y3QtPmZpZWxkLm90aGVyX21ldGhvZCgxLCAyLCAzKTtcbn0ifQ==)\n\n### Description\n\nIn C, there is no built-in support for object-oriented programming, but some programmers use structs and function pointers to simulate classes and methods. However, this style can have some drawbacks, such as:\n\n- extra memory allocation and deallocation for the struct and the function pointer.\n- indirection overhead when calling the function pointer.\n\nA possible alternative is to use a plain function call with the struct pointer as the first argument.\n\n<!-- Use YAML in the example. Delete this section if use pattern. -->\n\n### YAML\n\n```yaml\nid: method_receiver\nlanguage: c\nrule:\n  pattern: $R.$METHOD($$$ARGS)\ntransform:\n  MAYBE_COMMA:\n    replace:\n      source: $$$ARGS\n      replace: '^.+'\n      by: ', '\nfix:\n  $METHOD(&$R$MAYBE_COMMA$$$ARGS)\n```\n\n### Example\n\n<!-- highlight matched code in curly-brace {lineNum} -->\n\n```c {2-3}\nvoid test_func() {\n    some_struct->field.method();\n    some_struct->field.other_method(1, 2, 3);\n}\n```\n\n### Diff\n\n<!-- use // [!code --] and // [!code ++] to annotate diff -->\n\n```c\nvoid test_func() {\n    some_struct->field.method(); // [!code --]\n    method(&some_struct->field); // [!code ++]\n    some_struct->field.other_method(1, 2, 3); // [!code --]\n    other_method(&some_struct->field, 1, 2, 3); // [!code ++]\n}\n```\n\n### Contributed by\n\n[Surma](https://twitter.com/DasSurma), adapted from the [original tweet](https://twitter.com/DasSurma/status/1706086320051794217)\n",
      "description": "In C, there is no built-in support for object-oriented programming, but some programmers use structs and function pointers to simulate classes and methods. However, this style can have some drawbacks, such as:\n\n- extra memory allocation and deallocation for the struct and the function pointer.\n- indirection overhead when calling the function pointer.\n\nA possible alternative is to use a plain function call with the struct pointer as the first argument.\n\n<!-- Use YAML in the example. Delete this section if use pattern. -->",
      "features": [
        "transform"
      ],
      "has_fix": true,
      "id": "rewrite-method-to-function-call",
      "language": "c",
      "playground_link": "/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6ImMiLCJxdWVyeSI6IiRDT1VOVCA9ICRcbiIsInJld3JpdGUiOiIiLCJjb25maWciOiJpZDogbWV0aG9kX3JlY2VpdmVyXG5ydWxlOlxuICBwYXR0ZXJuOiAkUi4kTUVUSE9EKCQkJEFSR1MpXG50cmFuc2Zvcm06XG4gIE1BWUJFX0NPTU1BOlxuICAgIHJlcGxhY2U6XG4gICAgICBzb3VyY2U6ICQkJEFSR1NcbiAgICAgIHJlcGxhY2U6ICdeLisnXG4gICAgICBieTogJywgJ1xuZml4OlxuICAkTUVUSE9EKCYkUiRNQVlCRV9DT01NQSQkJEFSR1MpXG4iLCJzb3VyY2UiOiJ2b2lkIHRlc3RfZnVuYygpIHtcbiAgICBzb21lX3N0cnVjdC0+ZmllbGQubWV0aG9kKCk7XG4gICAgc29tZV9zdHJ1Y3QtPmZpZWxkLm90aGVyX21ldGhvZCgxLCAyLCAzKTtcbn0ifQ==",
      "rules": [
        "pattern"
      ],
      "source_file": "/var/tmp/vibe-kanban/vk-ff35-organized/target/debug/build/organized-grepster-mcp-a639358d381b1d6e/out/ast-grep.github.io/website/catalog/c/rewrite-method-to-function-call.md",
      "title": "Rewrite Method to Function Call",
      "type": "YAML",
      "yaml_content": "id: method_receiver\nlanguage: c\nrule:\n  pattern: $R.$METHOD($$$ARGS)\ntransform:\n  MAYBE_COMMA:\n    replace:\n      source: $$$ARGS\n      replace: '^.+'\n      by: ', '\nfix:\n  $METHOD(&$R$MAYBE_COMMA$$$ARGS)"
    },
    {
      "content": "<!-- Remove Badge if it does not have fix-->\n\n## Rewrite Check to Yoda Condition <Badge type=\"tip\" text=\"Has Fix\" />\n\n- [Playground Link](/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6ImMiLCJxdWVyeSI6IiRDOiAkVCA9IHJlbGF0aW9uc2hpcCgkJCRBLCB1c2VsaXN0PVRydWUsICQkJEIpIiwicmV3cml0ZSI6IiRDOiBMaXN0WyRUXSA9IHJlbGF0aW9uc2hpcCgkJCRBLCB1c2VsaXN0PVRydWUsICQkJEIpIiwiY29uZmlnIjoiaWQ6IG1heS10aGUtZm9yY2UtYmUtd2l0aC15b3Vcbmxhbmd1YWdlOiBjXG5ydWxlOlxuICBwYXR0ZXJuOiAkQSA9PSAkQiBcbiAgaW5zaWRlOlxuICAgIGtpbmQ6IHBhcmVudGhlc2l6ZWRfZXhwcmVzc2lvblxuICAgIGluc2lkZToge2tpbmQ6IGlmX3N0YXRlbWVudH1cbmNvbnN0cmFpbnRzOlxuICBCOiB7IGtpbmQ6IG51bWJlcl9saXRlcmFsIH1cbmZpeDogJEIgPT0gJEEiLCJzb3VyY2UiOiJpZiAobXlOdW1iZXIgPT0gNDIpIHsgLyogLi4uICovfVxuaWYgKG5vdE1hdGNoID09IGFub3RoZXIpIHt9XG5pZiAobm90TWF0Y2gpIHt9In0=)\n\n### Description\n\nIn programming jargon, a [Yoda condition](https://en.wikipedia.org/wiki/Yoda_conditions) is a style that places the constant portion of the expression on the left side of the conditional statement. It is used to prevent assignment errors that may occur in languages like C.\n\n<!-- Use YAML in the example. Delete this section if use pattern. -->\n\n### YAML\n\n```yaml\nid: may-the-force-be-with-you\nlanguage: c\nrule:\n  pattern: $A == $B                 # Find equality comparison\n  inside:                           # inside an if_statement\n    kind: parenthesized_expression\n    inside: {kind: if_statement}\nconstraints:                        # with the constraint that\n  B: { kind: number_literal }       # right side is a number\nfix: $B == $A\n```\n\nThe rule targets an equality comparison, denoted by the [pattern](/guide/pattern-syntax.html) `$A == $B`. This comparison must occur [inside](/reference/rule.html#inside) an `if_statement`. Additionally, there’s a [constraint](/reference/yaml.html#constraints) that the right side of the comparison, `$B`, must be a number_literal like `42`.\n\n### Example\n\n<!-- highlight matched code in curly-brace {lineNum} -->\n\n```c {1}\nif (myNumber == 42) { /* ... */}\nif (notMatch == another) { /* ... */}\nif (notMatch) { /* ... */}\n```\n\n### Diff\n\n<!-- use // [!code --] and // [!code ++] to annotate diff -->\n\n```c\nif (myNumber == 42) { /* ... */} // [!code --]\nif (42 == myNumber) { /* ... */} // [!code ++]\nif (notMatch == another) { /* ... */}\nif (notMatch) { /* ... */}\n```\n\n### Contributed by\n\nInspired by this [thread](https://x.com/cocoa1han/status/1763020689303581141)\n",
      "description": "In programming jargon, a [Yoda condition](https://en.wikipedia.org/wiki/Yoda_conditions) is a style that places the constant portion of the expression on the left side of the conditional statement. It is used to prevent assignment errors that may occur in languages like C.\n\n<!-- Use YAML in the example. Delete this section if use pattern. -->",
      "features": [
        "constraints"
      ],
      "has_fix": true,
      "id": "yoda-condition",
      "language": "c",
      "playground_link": "/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6ImMiLCJxdWVyeSI6IiRDOiAkVCA9IHJlbGF0aW9uc2hpcCgkJCRBLCB1c2VsaXN0PVRydWUsICQkJEIpIiwicmV3cml0ZSI6IiRDOiBMaXN0WyRUXSA9IHJlbGF0aW9uc2hpcCgkJCRBLCB1c2VsaXN0PVRydWUsICQkJEIpIiwiY29uZmlnIjoiaWQ6IG1heS10aGUtZm9yY2UtYmUtd2l0aC15b3Vcbmxhbmd1YWdlOiBjXG5ydWxlOlxuICBwYXR0ZXJuOiAkQSA9PSAkQiBcbiAgaW5zaWRlOlxuICAgIGtpbmQ6IHBhcmVudGhlc2l6ZWRfZXhwcmVzc2lvblxuICAgIGluc2lkZToge2tpbmQ6IGlmX3N0YXRlbWVudH1cbmNvbnN0cmFpbnRzOlxuICBCOiB7IGtpbmQ6IG51bWJlcl9saXRlcmFsIH1cbmZpeDogJEIgPT0gJEEiLCJzb3VyY2UiOiJpZiAobXlOdW1iZXIgPT0gNDIpIHsgLyogLi4uICovfVxuaWYgKG5vdE1hdGNoID09IGFub3RoZXIpIHt9XG5pZiAobm90TWF0Y2gpIHt9In0=",
      "rules": [
        "pattern",
        "inside"
      ],
      "source_file": "/var/tmp/vibe-kanban/vk-ff35-organized/target/debug/build/organized-grepster-mcp-a639358d381b1d6e/out/ast-grep.github.io/website/catalog/c/yoda-condition.md",
      "title": "Rewrite Check to Yoda Condition",
      "type": "YAML",
      "yaml_content": "id: may-the-force-be-with-you\nlanguage: c\nrule:\n  pattern: $A == $B                 # Find equality comparison\n  inside:                           # inside an if_statement\n    kind: parenthesized_expression\n    inside: {kind: if_statement}\nconstraints:                        # with the constraint that\n  B: { kind: number_literal }       # right side is a number\nfix: $B == $A"
    },
    {
      "content": "## Avoid `&&` short circuit in JSX <Badge type=\"tip\" text=\"Has Fix\" />\n\n- [Playground Link](/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6InRzeCIsInF1ZXJ5IjoiY29uc29sZS5sb2coJE1BVENIKSIsInJld3JpdGUiOiJsb2dnZXIubG9nKCRNQVRDSCkiLCJjb25maWciOiJpZDogZG8td2hhdC1icm9vb29vb2tseW4tc2FpZFxubGFuZ3VhZ2U6IFRzeFxuc2V2ZXJpdHk6IGVycm9yXG5ydWxlOlxuICBraW5kOiBqc3hfZXhwcmVzc2lvblxuICBoYXM6XG4gICAgcGF0dGVybjogJEEgJiYgJEJcbiAgbm90OlxuICAgIGluc2lkZTpcbiAgICAgIGtpbmQ6IGpzeF9hdHRyaWJ1dGVcbmZpeDogXCJ7JEEgPyAkQiA6IG51bGx9XCIiLCJzb3VyY2UiOiI8ZGl2PntcbiAgbnVtICYmIDxkaXYvPlxufTwvZGl2PiJ9)\n\n### Description\n\nIn [React](https://react.dev/learn/conditional-rendering), you can conditionally render JSX using JavaScript syntax like `if` statements, `&&`, and `? :` operators.\nHowever, you should almost never put numbers on the left side of `&&`. This is because React will render the number `0`, instead of the JSX element on the right side. A concrete example will be conditionally rendering a list when the list is not empty.\n\nThis rule will find and fix any short-circuit rendering in JSX and rewrite it to a ternary operator.\n\n### YAML\n\n```yaml\nid: do-what-brooooooklyn-said\nlanguage: Tsx\nrule:\n  kind: jsx_expression\n  has:\n    pattern: $A && $B\n  not:\n    inside:\n      kind: jsx_attribute\nfix: \"{$A ? $B : null}\"\n```\n\n### Example\n\n<!-- highlight matched code in curly-brace {lineNum} -->\n\n```tsx {1}\n<div>{list.length && list.map(i => <p />)}</div>\n```\n\n### Diff\n\n<!-- use // [!code --] and // [!code ++] to annotate diff -->\n\n```tsx\n<div>{ list.length && list.map(i => <p/>) }</div> // [!code --]\n<div>{ list.length ?  list.map(i => <p/>) : null }</div> // [!code ++]\n```\n\n### Contributed by\n\n[Herrington Darkholme](https://twitter.com/hd_nvim), inspired by [@Brooooook_lyn](https://twitter.com/Brooooook_lyn/status/1666637274757595141)\n",
      "description": "In [React](https://react.dev/learn/conditional-rendering), you can conditionally render JSX using JavaScript syntax like `if` statements, `&&`, and `? :` operators.\nHowever, you should almost never put numbers on the left side of `&&`. This is because React will render the number `0`, instead of the JSX element on the right side. A concrete example will be conditionally rendering a list when the list is not empty.\n\nThis rule will find and fix any short-circuit rendering in JSX and rewrite it to a ternary operator.",
      "features": [],
      "has_fix": true,
      "id": "avoid-jsx-short-circuit",
      "language": "tsx",
      "playground_link": "/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6InRzeCIsInF1ZXJ5IjoiY29uc29sZS5sb2coJE1BVENIKSIsInJld3JpdGUiOiJsb2dnZXIubG9nKCRNQVRDSCkiLCJjb25maWciOiJpZDogZG8td2hhdC1icm9vb29vb2tseW4tc2FpZFxubGFuZ3VhZ2U6IFRzeFxuc2V2ZXJpdHk6IGVycm9yXG5ydWxlOlxuICBraW5kOiBqc3hfZXhwcmVzc2lvblxuICBoYXM6XG4gICAgcGF0dGVybjogJEEgJiYgJEJcbiAgbm90OlxuICAgIGluc2lkZTpcbiAgICAgIGtpbmQ6IGpzeF9hdHRyaWJ1dGVcbmZpeDogXCJ7JEEgPyAkQiA6IG51bGx9XCIiLCJzb3VyY2UiOiI8ZGl2PntcbiAgbnVtICYmIDxkaXYvPlxufTwvZGl2PiJ9",
      "rules": [
        "kind",
        "has",
        "not"
      ],
      "source_file": "/var/tmp/vibe-kanban/vk-ff35-organized/target/debug/build/organized-grepster-mcp-a639358d381b1d6e/out/ast-grep.github.io/website/catalog/tsx/avoid-jsx-short-circuit.md",
      "title": "Avoid `&&` short circuit in JSX",
      "type": "YAML",
      "yaml_content": "id: do-what-brooooooklyn-said\nlanguage: Tsx\nrule:\n  kind: jsx_expression\n  has:\n    pattern: $A && $B\n  not:\n    inside:\n      kind: jsx_attribute\nfix: \"{$A ? $B : null}\""
    },
    {
      "content": "## Avoid Unnecessary React Hook\n\n- [Playground Link](/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6ImphdmFzY3JpcHQiLCJxdWVyeSI6IiIsInJld3JpdGUiOiIiLCJzdHJpY3RuZXNzIjoic21hcnQiLCJzZWxlY3RvciI6IiIsImNvbmZpZyI6InV0aWxzOlxuICBob29rX2NhbGw6XG4gICAgaGFzOlxuICAgICAga2luZDogY2FsbF9leHByZXNzaW9uXG4gICAgICByZWdleDogXnVzZVxuICAgICAgc3RvcEJ5OiBlbmRcbnJ1bGU6XG4gIGFueTpcbiAgLSBwYXR0ZXJuOiBmdW5jdGlvbiAkRlVOQygkJCQpIHsgJCQkIH1cbiAgLSBwYXR0ZXJuOiBsZXQgJEZVTkMgPSAoJCQkKSA9PiAkJCQgXG4gIC0gcGF0dGVybjogY29uc3QgJEZVTkMgPSAoJCQkKSA9PiAkJCRcbiAgaGFzOlxuICAgIHBhdHRlcm46ICRCT0RZXG4gICAga2luZDogc3RhdGVtZW50X2Jsb2NrXG4gICAgc3RvcEJ5OiBlbmQgXG5jb25zdHJhaW50czpcbiAgRlVOQzoge3JlZ2V4OiBedXNlIH1cbiAgQk9EWTogeyBub3Q6IHsgbWF0Y2hlczogaG9va19jYWxsIH0gfSBcbiIsInNvdXJjZSI6ImZ1bmN0aW9uIHVzZUlBbU5vdEhvb2tBY3R1YWxseShhcmdzKSB7XG4gICAgY29uc29sZS5sb2coJ0NhbGxlZCBpbiBSZWFjdCBidXQgSSBkb250IG5lZWQgdG8gYmUgYSBob29rJylcbiAgICByZXR1cm4gYXJncy5sZW5ndGhcbn1cbmNvbnN0IHVzZUlBbU5vdEhvb2tUb28gPSAoLi4uYXJncykgPT4ge1xuICAgIGNvbnNvbGUubG9nKCdDYWxsZWQgaW4gUmVhY3QgYnV0IEkgZG9udCBuZWVkIHRvIGJlIGEgaG9vaycpXG4gICAgcmV0dXJuIGFyZ3MubGVuZ3RoXG59XG5cbmZ1bmN0aW9uIHVzZUhvb2soKSB7XG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKCdSZWFsIGhvb2snKSAgIFxuICAgIH0pXG59In0=)\n\n### Description\n\nReact hook is a powerful feature in React that allows you to use state and other React features in a functional component.\n\nHowever, you should avoid using hooks when you don't need them. If the code does not contain using any other React hooks,\nit can be rewritten to a plain function. This can help to separate your application logic from the React-specific UI logic.\n\n### YAML\n\n```yaml\nid: unnecessary-react-hook\nlanguage: Tsx\nutils:\n  hook_call:\n    has:\n      kind: call_expression\n      regex: ^use\n      stopBy: end\nrule:\n  any:\n  - pattern: function $FUNC($$$) { $$$ }\n  - pattern: let $FUNC = ($$$) => $$$\n  - pattern: const $FUNC = ($$$) => $$$\n  has:\n    pattern: $BODY\n    kind: statement_block\n    stopBy: end\nconstraints:\n  FUNC: {regex: ^use }\n  BODY: { not: { matches: hook_call } }\n```\n\n### Example\n\n<!-- highlight matched code in curly-brace {lineNum} -->\n\n```tsx {1-8}\nfunction useIAmNotHookActually(args) {\n  console.log('Called in React but I dont need to be a hook')\n  return args.length\n}\nconst useIAmNotHookToo = (...args) => {\n  console.log('Called in React but I dont need to be a hook')\n  return args.length\n}\n\nfunction useTrueHook() {\n  useEffect(() => {\n    console.log('Real hook')\n  })\n}\n```\n\n### Contributed by\n\n[Herrington Darkholme](https://twitter.com/hd_nvim)\n",
      "description": "React hook is a powerful feature in React that allows you to use state and other React features in a functional component.\n\nHowever, you should avoid using hooks when you don't need them. If the code does not contain using any other React hooks,\nit can be rewritten to a plain function. This can help to separate your application logic from the React-specific UI logic.",
      "features": [
        "utils",
        "constraints"
      ],
      "has_fix": false,
      "id": "unnecessary-react-hook",
      "language": "tsx",
      "playground_link": "/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6ImphdmFzY3JpcHQiLCJxdWVyeSI6IiIsInJld3JpdGUiOiIiLCJzdHJpY3RuZXNzIjoic21hcnQiLCJzZWxlY3RvciI6IiIsImNvbmZpZyI6InV0aWxzOlxuICBob29rX2NhbGw6XG4gICAgaGFzOlxuICAgICAga2luZDogY2FsbF9leHByZXNzaW9uXG4gICAgICByZWdleDogXnVzZVxuICAgICAgc3RvcEJ5OiBlbmRcbnJ1bGU6XG4gIGFueTpcbiAgLSBwYXR0ZXJuOiBmdW5jdGlvbiAkRlVOQygkJCQpIHsgJCQkIH1cbiAgLSBwYXR0ZXJuOiBsZXQgJEZVTkMgPSAoJCQkKSA9PiAkJCQgXG4gIC0gcGF0dGVybjogY29uc3QgJEZVTkMgPSAoJCQkKSA9PiAkJCRcbiAgaGFzOlxuICAgIHBhdHRlcm46ICRCT0RZXG4gICAga2luZDogc3RhdGVtZW50X2Jsb2NrXG4gICAgc3RvcEJ5OiBlbmQgXG5jb25zdHJhaW50czpcbiAgRlVOQzoge3JlZ2V4OiBedXNlIH1cbiAgQk9EWTogeyBub3Q6IHsgbWF0Y2hlczogaG9va19jYWxsIH0gfSBcbiIsInNvdXJjZSI6ImZ1bmN0aW9uIHVzZUlBbU5vdEhvb2tBY3R1YWxseShhcmdzKSB7XG4gICAgY29uc29sZS5sb2coJ0NhbGxlZCBpbiBSZWFjdCBidXQgSSBkb250IG5lZWQgdG8gYmUgYSBob29rJylcbiAgICByZXR1cm4gYXJncy5sZW5ndGhcbn1cbmNvbnN0IHVzZUlBbU5vdEhvb2tUb28gPSAoLi4uYXJncykgPT4ge1xuICAgIGNvbnNvbGUubG9nKCdDYWxsZWQgaW4gUmVhY3QgYnV0IEkgZG9udCBuZWVkIHRvIGJlIGEgaG9vaycpXG4gICAgcmV0dXJuIGFyZ3MubGVuZ3RoXG59XG5cbmZ1bmN0aW9uIHVzZUhvb2soKSB7XG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKCdSZWFsIGhvb2snKSAgIFxuICAgIH0pXG59In0=",
      "rules": [
        "any",
        "pattern",
        "pattern",
        "pattern",
        "has"
      ],
      "source_file": "/var/tmp/vibe-kanban/vk-ff35-organized/target/debug/build/organized-grepster-mcp-a639358d381b1d6e/out/ast-grep.github.io/website/catalog/tsx/unnecessary-react-hook.md",
      "title": "Avoid Unnecessary React Hook",
      "type": "YAML",
      "yaml_content": "id: unnecessary-react-hook\nlanguage: Tsx\nutils:\n  hook_call:\n    has:\n      kind: call_expression\n      regex: ^use\n      stopBy: end\nrule:\n  any:\n  - pattern: function $FUNC($$$) { $$$ }\n  - pattern: let $FUNC = ($$$) => $$$\n  - pattern: const $FUNC = ($$$) => $$$\n  has:\n    pattern: $BODY\n    kind: statement_block\n    stopBy: end\nconstraints:\n  FUNC: {regex: ^use }\n  BODY: { not: { matches: hook_call } }"
    },
    {
      "content": "## Reverse React Compiler™ <Badge type=\"tip\" text=\"Has Fix\" />\n\n- [Playground Link](/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6InRzeCIsInF1ZXJ5IjoiIiwicmV3cml0ZSI6IiIsInN0cmljdG5lc3MiOiJyZWxheGVkIiwic2VsZWN0b3IiOiIiLCJjb25maWciOiJpZDogcmV3cml0ZS1jYWNoZSBcbmxhbmd1YWdlOiB0c3hcbnJ1bGU6XG4gIGFueTpcbiAgLSBwYXR0ZXJuOiB1c2VDYWxsYmFjaygkRk4sICQkJClcbiAgLSBwYXR0ZXJuOiBtZW1vKCRGTiwgJCQkKVxuZml4OiAkRk5cblxuLS0tXG5cbmlkOiByZXdyaXRlLXVzZS1tZW1vXG5sYW5ndWFnZTogdHN4XG5ydWxlOiB7IHBhdHRlcm46ICd1c2VNZW1vKCRGTiwgJCQkKScgfVxuZml4OiAoJEZOKSgpIiwic291cmNlIjoiY29uc3QgQ29tcG9uZW50ID0gKCkgPT4ge1xuICBjb25zdCBbY291bnQsIHNldENvdW50XSA9IHVzZVN0YXRlKDApXG4gIGNvbnN0IGluY3JlbWVudCA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBzZXRDb3VudCgocHJldkNvdW50KSA9PiBwcmV2Q291bnQgKyAxKVxuICB9LCBbXSlcbiAgY29uc3QgZXhwZW5zaXZlQ2FsY3VsYXRpb24gPSB1c2VNZW1vKCgpID0+IHtcbiAgICAvLyBtb2NrIEV4cGVuc2l2ZSBjYWxjdWxhdGlvblxuICAgIHJldHVybiBjb3VudCAqIDJcbiAgfSwgW2NvdW50XSlcblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8cD5FeHBlbnNpdmUgUmVzdWx0OiB7ZXhwZW5zaXZlQ2FsY3VsYXRpb259PC9wPlxuICAgICAgPGJ1dHRvbiBvbkNsaWNrPXtpbmNyZW1lbnR9Pntjb3VudH08L2J1dHRvbj5cbiAgICA8Lz5cbiAgKVxufSJ9)\n\n### Description\n\nReact Compiler is a build-time only tool that automatically optimizes your React app, working with plain JavaScript and understanding the Rules of React without requiring a rewrite. It optimizes apps by automatically memoizing code, similar to `useMemo`, `useCallback`, and `React.memo`, reducing unnecessary recomputation due to incorrect or forgotten memoization.\n\nReverse React Compiler™ is a [parody tweet](https://x.com/aidenybai/status/1881397529369034997) that works in the opposite direction. It takes React code and removes memoization, guaranteed to make your code slower. ([not](https://x.com/kentcdodds/status/1881404373646880997) [necessarily](https://dev.to/prathamisonline/are-you-over-using-usememo-and-usecallback-hooks-in-react-5lp))\n\nIt is originally written in Babel and this is an [ast-grep version](https://x.com/hd_nvim/status/1881402678493970620) of it.\n\n:::details The Original Babel Implementation\nFor comparison purposes only. Note the original code [does not correctly rewrite](https://x.com/hd_nvim/status/1881404893136896415) `useMemo`.\n\n```js\nconst ReverseReactCompiler = ({ types: t }) => ({\n  visitor: {\n    CallExpression(path) {\n      const callee = path.node.callee\n      if (\n        t.isIdentifier(callee, { name: 'useMemo' }) ||\n        t.isIdentifier(callee, { name: 'useCallback' }) ||\n        t.isIdentifier(callee, { name: 'memo' })\n      ) {\n        path.replaceWith(args[0])\n      }\n    },\n  },\n})\n```\n\n:::\n\n### YAML\n\n```yaml\nid: rewrite-cache\nlanguage: tsx\nrule:\n  any:\n  - pattern: useCallback($FN, $$$)\n  - pattern: memo($FN, $$$)\nfix: $FN\n---\nid: rewrite-use-memo\nlanguage: tsx\nrule: { pattern: 'useMemo($FN, $$$)' }\nfix: ($FN)()   # need IIFE to wrap memo function\n```\n\n### Example\n\n```tsx {3-5,6-9}\nconst Component = () => {\n  const [count, setCount] = useState(0)\n  const increment = useCallback(() => {\n    setCount((prevCount) => prevCount + 1)\n  }, [])\n  const expensiveCalculation = useMemo(() => {\n    // mock Expensive calculation\n    return count * 2\n  }, [count])\n\n  return (\n    <>\n      <p>Expensive Result: {expensiveCalculation}</p>\n      <button onClick={increment}>{count}</button>\n    </>\n  )\n}\n```\n\n### Diff\n\n```tsx\nconst Component = () => {\n  const [count, setCount] = useState(0)\n  const increment = useCallback(() => { // [!code --]\n    setCount((prevCount) => prevCount + 1) // [!code --]\n  }, []) // [!code --]\n  const increment = () => { // [!code ++]\n    setCount((prevCount) => prevCount + 1) // [!code ++]\n  } // [!code ++]\n  const expensiveCalculation = useMemo(() => { // [!code --]\n    // mock Expensive calculation             // [!code --]\n    return count * 2 // [!code --]\n  }, [count]) // [!code --]\n  const expensiveCalculation = (() => { // [!code ++]\n    // mock Expensive calculation      // [!code ++]\n    return count * 2 // [!code ++]\n  })() // [!code ++]\n  return (\n    <>\n      <p>Expensive Result: {expensiveCalculation}</p>\n      <button onClick={increment}>{count}</button>\n    </>\n  )\n}\n```\n\n### Contributed by\n\nInspired by [Aiden Bai](https://twitter.com/aidenybai)\n",
      "description": "React Compiler is a build-time only tool that automatically optimizes your React app, working with plain JavaScript and understanding the Rules of React without requiring a rewrite. It optimizes apps by automatically memoizing code, similar to `useMemo`, `useCallback`, and `React.memo`, reducing unnecessary recomputation due to incorrect or forgotten memoization.\n\nReverse React Compiler™ is a [parody tweet](https://x.com/aidenybai/status/1881397529369034997) that works in the opposite direction. It takes React code and removes memoization, guaranteed to make your code slower. ([not](https://x.com/kentcdodds/status/1881404373646880997) [necessarily](https://dev.to/prathamisonline/are-you-over-using-usememo-and-usecallback-hooks-in-react-5lp))\n\nIt is originally written in Babel and this is an [ast-grep version](https://x.com/hd_nvim/status/1881402678493970620) of it.\n\n:::details The Original Babel Implementation\nFor comparison purposes only. Note the original code [does not correctly rewrite](https://x.com/hd_nvim/status/1881404893136896415) `useMemo`.",
      "features": [],
      "has_fix": true,
      "id": "reverse-react-compiler",
      "language": "tsx",
      "playground_link": "/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6InRzeCIsInF1ZXJ5IjoiIiwicmV3cml0ZSI6IiIsInN0cmljdG5lc3MiOiJyZWxheGVkIiwic2VsZWN0b3IiOiIiLCJjb25maWciOiJpZDogcmV3cml0ZS1jYWNoZSBcbmxhbmd1YWdlOiB0c3hcbnJ1bGU6XG4gIGFueTpcbiAgLSBwYXR0ZXJuOiB1c2VDYWxsYmFjaygkRk4sICQkJClcbiAgLSBwYXR0ZXJuOiBtZW1vKCRGTiwgJCQkKVxuZml4OiAkRk5cblxuLS0tXG5cbmlkOiByZXdyaXRlLXVzZS1tZW1vXG5sYW5ndWFnZTogdHN4XG5ydWxlOiB7IHBhdHRlcm46ICd1c2VNZW1vKCRGTiwgJCQkKScgfVxuZml4OiAoJEZOKSgpIiwic291cmNlIjoiY29uc3QgQ29tcG9uZW50ID0gKCkgPT4ge1xuICBjb25zdCBbY291bnQsIHNldENvdW50XSA9IHVzZVN0YXRlKDApXG4gIGNvbnN0IGluY3JlbWVudCA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBzZXRDb3VudCgocHJldkNvdW50KSA9PiBwcmV2Q291bnQgKyAxKVxuICB9LCBbXSlcbiAgY29uc3QgZXhwZW5zaXZlQ2FsY3VsYXRpb24gPSB1c2VNZW1vKCgpID0+IHtcbiAgICAvLyBtb2NrIEV4cGVuc2l2ZSBjYWxjdWxhdGlvblxuICAgIHJldHVybiBjb3VudCAqIDJcbiAgfSwgW2NvdW50XSlcblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8cD5FeHBlbnNpdmUgUmVzdWx0OiB7ZXhwZW5zaXZlQ2FsY3VsYXRpb259PC9wPlxuICAgICAgPGJ1dHRvbiBvbkNsaWNrPXtpbmNyZW1lbnR9Pntjb3VudH08L2J1dHRvbj5cbiAgICA8Lz5cbiAgKVxufSJ9",
      "rules": [
        "any",
        "pattern",
        "pattern"
      ],
      "source_file": "/var/tmp/vibe-kanban/vk-ff35-organized/target/debug/build/organized-grepster-mcp-a639358d381b1d6e/out/ast-grep.github.io/website/catalog/tsx/reverse-react-compiler.md",
      "title": "Reverse React Compiler™",
      "type": "YAML",
      "yaml_content": "id: rewrite-cache\nlanguage: tsx\nrule:\n  any:\n  - pattern: useCallback($FN, $$$)\n  - pattern: memo($FN, $$$)\nfix: $FN\n---\nid: rewrite-use-memo\nlanguage: tsx\nrule: { pattern: 'useMemo($FN, $$$)' }\nfix: ($FN)()   # need IIFE to wrap memo function"
    },
    {
      "content": "## Rename SVG Attribute <Badge type=\"tip\" text=\"Has Fix\" />\n\n- [Playground Link](/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6InRzeCIsInF1ZXJ5IjoiIiwicmV3cml0ZSI6IiIsInN0cmljdG5lc3MiOiJyZWxheGVkIiwic2VsZWN0b3IiOiIiLCJjb25maWciOiJpZDogcmV3cml0ZS1zdmctYXR0cmlidXRlXG5sYW5ndWFnZTogdHN4XG5ydWxlOlxuICBwYXR0ZXJuOiAkUFJPUFxuICByZWdleDogKFthLXpdKyktKFthLXpdKVxuICBraW5kOiBwcm9wZXJ0eV9pZGVudGlmaWVyXG4gIGluc2lkZTpcbiAgICBraW5kOiBqc3hfYXR0cmlidXRlXG50cmFuc2Zvcm06XG4gIE5FV19QUk9QOlxuICAgIGNvbnZlcnQ6XG4gICAgICBzb3VyY2U6ICRQUk9QXG4gICAgICB0b0Nhc2U6IGNhbWVsQ2FzZVxuZml4OiAkTkVXX1BST1AiLCJzb3VyY2UiOiJjb25zdCBlbGVtZW50ID0gKFxuICA8c3ZnIHdpZHRoPVwiMTAwXCIgaGVpZ2h0PVwiMTAwXCIgdmlld0JveD1cIjAgMCAxMDAgMTAwXCI+XG4gICAgPHBhdGggZD1cIk0xMCAyMCBMMzAgNDBcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgZmlsbC1vcGFjaXR5PVwiMC41XCIgLz5cbiAgPC9zdmc+XG4pIn0=)\n\n### Description\n\n[SVG](https://en.wikipedia.org/wiki/SVG)(Scalable Vector Graphics)s' hyphenated names are not compatible with JSX syntax in React. JSX requires [camelCase naming](https://react.dev/learn/writing-markup-with-jsx#3-camelcase-salls-most-of-the-things) for attributes.\nFor example, an SVG attribute like `stroke-linecap` needs to be renamed to `strokeLinecap` to work correctly in React.\n\n### YAML\n\n```yaml\nid: rewrite-svg-attribute\nlanguage: tsx\nrule:\n  pattern: $PROP            # capture in metavar\n  regex: ([a-z]+)-([a-z])   # hyphenated name\n  kind: property_identifier\n  inside:\n    kind: jsx_attribute     # in JSX attribute\ntransform:\n  NEW_PROP:                 # new property name\n    convert:                # use ast-grep's convert\n      source: $PROP\n      toCase: camelCase     # to camelCase naming\nfix: $NEW_PROP\n```\n\n### Example\n\n```tsx {3}\nconst element = (\n  <svg width='100' height='100' viewBox='0 0 100 100'>\n    <path d='M10 20 L30 40' stroke-linecap='round' fill-opacity='0.5' />\n  </svg>\n)\n```\n\n### Diff\n\n```ts\nconst element = (\n  <svg width='100' height='100' viewBox='0 0 100 100'>\n    <path d='M10 20 L30 40' stroke-linecap='round' fill-opacity='0.5' /> // [!code --]\n    <path d='M10 20 L30 40' strokeLinecap='round' fillOpacity='0.5' /> // [!code ++]\n  </svg>\n)\n```\n\n### Contributed by\n\nInspired by [SVG Renamer](https://admondtamang.medium.com/introducing-svg-renamer-your-solution-for-react-svg-attributes-26503382d5a8)\n",
      "description": "[SVG](https://en.wikipedia.org/wiki/SVG)(Scalable Vector Graphics)s' hyphenated names are not compatible with JSX syntax in React. JSX requires [camelCase naming](https://react.dev/learn/writing-markup-with-jsx#3-camelcase-salls-most-of-the-things) for attributes.\nFor example, an SVG attribute like `stroke-linecap` needs to be renamed to `strokeLinecap` to work correctly in React.",
      "features": [
        "transform"
      ],
      "has_fix": true,
      "id": "rename-svg-attribute",
      "language": "tsx",
      "playground_link": "/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6InRzeCIsInF1ZXJ5IjoiIiwicmV3cml0ZSI6IiIsInN0cmljdG5lc3MiOiJyZWxheGVkIiwic2VsZWN0b3IiOiIiLCJjb25maWciOiJpZDogcmV3cml0ZS1zdmctYXR0cmlidXRlXG5sYW5ndWFnZTogdHN4XG5ydWxlOlxuICBwYXR0ZXJuOiAkUFJPUFxuICByZWdleDogKFthLXpdKyktKFthLXpdKVxuICBraW5kOiBwcm9wZXJ0eV9pZGVudGlmaWVyXG4gIGluc2lkZTpcbiAgICBraW5kOiBqc3hfYXR0cmlidXRlXG50cmFuc2Zvcm06XG4gIE5FV19QUk9QOlxuICAgIGNvbnZlcnQ6XG4gICAgICBzb3VyY2U6ICRQUk9QXG4gICAgICB0b0Nhc2U6IGNhbWVsQ2FzZVxuZml4OiAkTkVXX1BST1AiLCJzb3VyY2UiOiJjb25zdCBlbGVtZW50ID0gKFxuICA8c3ZnIHdpZHRoPVwiMTAwXCIgaGVpZ2h0PVwiMTAwXCIgdmlld0JveD1cIjAgMCAxMDAgMTAwXCI+XG4gICAgPHBhdGggZD1cIk0xMCAyMCBMMzAgNDBcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgZmlsbC1vcGFjaXR5PVwiMC41XCIgLz5cbiAgPC9zdmc+XG4pIn0=",
      "rules": [
        "pattern",
        "regex",
        "kind",
        "inside"
      ],
      "source_file": "/var/tmp/vibe-kanban/vk-ff35-organized/target/debug/build/organized-grepster-mcp-a639358d381b1d6e/out/ast-grep.github.io/website/catalog/tsx/rename-svg-attribute.md",
      "title": "Rename SVG Attribute",
      "type": "YAML",
      "yaml_content": "id: rewrite-svg-attribute\nlanguage: tsx\nrule:\n  pattern: $PROP            # capture in metavar\n  regex: ([a-z]+)-([a-z])   # hyphenated name\n  kind: property_identifier\n  inside:\n    kind: jsx_attribute     # in JSX attribute\ntransform:\n  NEW_PROP:                 # new property name\n    convert:                # use ast-grep's convert\n      source: $PROP\n      toCase: camelCase     # to camelCase naming\nfix: $NEW_PROP"
    },
    {
      "content": "<!-- Remove Badge if it does not have fix-->\n\n## Rewrite MobX Component Style <Badge type=\"tip\" text=\"Has Fix\" />\n\n- [Playground Link](/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6ImphdmFzY3JpcHQiLCJxdWVyeSI6ImNvbnNvbGUubG9nKCRNQVRDSCkiLCJyZXdyaXRlIjoibG9nZ2VyLmxvZygkTUFUQ0gpIiwiY29uZmlnIjoicnVsZTpcbiAgcGF0dGVybjogZXhwb3J0IGNvbnN0ICRDT01QID0gb2JzZXJ2ZXIoJEZVTkMpXG5maXg6IHwtXG4gIGNvbnN0IEJhc2UkQ09NUCA9ICRGVU5DXG4gIGV4cG9ydCBjb25zdCAkQ09NUCA9IG9ic2VydmVyKEJhc2UkQ09NUCkiLCJzb3VyY2UiOiJleHBvcnQgY29uc3QgRXhhbXBsZSA9IG9ic2VydmVyKCgpID0+IHtcbiAgcmV0dXJuIDxkaXY+SGVsbG8gV29ybGQ8L2Rpdj5cbn0pIn0=)\n\n### Description\n\nReact and MobX are libraries that help us build user interfaces with JavaScript.\n\n[React hooks](https://react.dev/reference/react) allow us to use state and lifecycle methods in functional components. But we need follow some hook rules, or React may break. [MobX](https://mobx.js.org/react-integration.html) has an `observer` function that makes a component update when data changes.\n\nWhen we use the `observer` function like this:\n\n```JavaScript\nexport const Example = observer(() => {…})\n```\n\nESLint, the tool that checks hooks, thinks that `Example` is not a React component, but just a regular function. So it does not check the hooks inside it, and we may miss some wrong usages.\n\nTo fix this, we need to change our component style to this:\n\n```JavaScript\nconst BaseExample = () => {…}\nconst Example = observer(BaseExample)\n```\n\nNow ESLint can see that `BaseExample` is a React component, and it can check the hooks inside it.\n\n<!-- Use YAML in the example. Delete this section if use pattern. -->\n\n### YAML\n\n```yaml\nid: rewrite-mobx-component\nlanguage: typescript\nrule:\n  pattern: export const $COMP = observer($FUNC)\nfix: |-\n  const Base$COMP = $FUNC\n  export const $COMP = observer(Base$COMP)\n```\n\n### Example\n\n<!-- highlight matched code in curly-brace {lineNum} -->\n\n```js {1-3}\nexport const Example = observer(() => {\n  return <div>Hello World</div>\n})\n```\n\n### Diff\n\n<!-- use // [!code --] and // [!code ++] to annotate diff -->\n\n```js\nexport const Example = observer(() => { // [!code --]\n  return <div>Hello World</div> // [!code --]\n}) // [!code --]\nconst BaseExample = () => { // [!code ++]\n  return <div>Hello World</div> // [!code ++]\n} // [!code ++]\nexport const Example = observer(BaseExample) // [!code ++]\n```\n\n### Contributed by\n\n[Bryan Lee](https://twitter.com/meetliby/status/1698601672568901723)\n",
      "description": "React and MobX are libraries that help us build user interfaces with JavaScript.\n\n[React hooks](https://react.dev/reference/react) allow us to use state and lifecycle methods in functional components. But we need follow some hook rules, or React may break. [MobX](https://mobx.js.org/react-integration.html) has an `observer` function that makes a component update when data changes.\n\nWhen we use the `observer` function like this:",
      "features": [],
      "has_fix": true,
      "id": "rewrite-mobx-component",
      "language": "tsx",
      "playground_link": "/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6ImphdmFzY3JpcHQiLCJxdWVyeSI6ImNvbnNvbGUubG9nKCRNQVRDSCkiLCJyZXdyaXRlIjoibG9nZ2VyLmxvZygkTUFUQ0gpIiwiY29uZmlnIjoicnVsZTpcbiAgcGF0dGVybjogZXhwb3J0IGNvbnN0ICRDT01QID0gb2JzZXJ2ZXIoJEZVTkMpXG5maXg6IHwtXG4gIGNvbnN0IEJhc2UkQ09NUCA9ICRGVU5DXG4gIGV4cG9ydCBjb25zdCAkQ09NUCA9IG9ic2VydmVyKEJhc2UkQ09NUCkiLCJzb3VyY2UiOiJleHBvcnQgY29uc3QgRXhhbXBsZSA9IG9ic2VydmVyKCgpID0+IHtcbiAgcmV0dXJuIDxkaXY+SGVsbG8gV29ybGQ8L2Rpdj5cbn0pIn0=",
      "rules": [
        "pattern"
      ],
      "source_file": "/var/tmp/vibe-kanban/vk-ff35-organized/target/debug/build/organized-grepster-mcp-a639358d381b1d6e/out/ast-grep.github.io/website/catalog/tsx/rewrite-mobx-component.md",
      "title": "Rewrite MobX Component Style",
      "type": "YAML",
      "yaml_content": "id: rewrite-mobx-component\nlanguage: typescript\nrule:\n  pattern: export const $COMP = observer($FUNC)\nfix: |-\n  const Base$COMP = $FUNC\n  export const $COMP = observer(Base$COMP)"
    },
    {
      "content": "## Avoid nested links\n\n- [Playground Link](https://ast-grep.github.io/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6InRzeCIsInF1ZXJ5IjoiaWYgKCRBKSB7ICQkJEIgfSIsInJld3JpdGUiOiJpZiAoISgkQSkpIHtcbiAgICByZXR1cm47XG59XG4kJCRCIiwic3RyaWN0bmVzcyI6InNtYXJ0Iiwic2VsZWN0b3IiOiIiLCJjb25maWciOiJpZDogbm8tbmVzdGVkLWxpbmtzXG5sYW5ndWFnZTogdHN4XG5zZXZlcml0eTogZXJyb3JcbnJ1bGU6XG4gIHBhdHRlcm46IDxhICQkJD4kJCRBPC9hPlxuICBoYXM6XG4gICAgcGF0dGVybjogPGEgJCQkPiQkJDwvYT5cbiAgICBzdG9wQnk6IGVuZCIsInNvdXJjZSI6ImZ1bmN0aW9uIENvbXBvbmVudCgpIHtcbiAgcmV0dXJuIDxhIGhyZWY9Jy9kZXN0aW5hdGlvbic+XG4gICAgPGEgaHJlZj0nL2Fub3RoZXJkZXN0aW5hdGlvbic+TmVzdGVkIGxpbmshPC9hPlxuICA8L2E+O1xufVxuZnVuY3Rpb24gT2theUNvbXBvbmVudCgpIHtcbiAgcmV0dXJuIDxhIGhyZWY9Jy9kZXN0aW5hdGlvbic+XG4gICAgSSBhbSBqdXN0IGEgbGluay5cbiAgPC9hPjtcbn0ifQ==)\n\n### Description\n\nReact will produce a warning message if you nest a link element inside of another link element. This rule will catch this mistake!\n\n### YAML\n\n```yaml\nid: no-nested-links\nlanguage: tsx\nseverity: error\nrule:\n  pattern: <a $$$>$$$A</a>\n  has:\n    pattern: <a $$$>$$$</a>\n    stopBy: end\n```\n\n### Example\n\n<!-- highlight matched code in curly-brace {lineNum} -->\n\n```tsx {1-5}\nfunction Component() {\n  return (\n    <a href='/destination'>\n      <a href='/anotherdestination'>Nested link!</a>\n    </a>\n  )\n}\nfunction OkayComponent() {\n  return (\n    <a href='/destination'>\n      I am just a link.\n    </a>\n  )\n}\n```\n\n### Contributed by\n\n[Tom MacWright](https://macwright.com/)\n",
      "description": "React will produce a warning message if you nest a link element inside of another link element. This rule will catch this mistake!",
      "features": [],
      "has_fix": false,
      "id": "avoid-nested-links",
      "language": "tsx",
      "playground_link": "https://ast-grep.github.io/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6InRzeCIsInF1ZXJ5IjoiaWYgKCRBKSB7ICQkJEIgfSIsInJld3JpdGUiOiJpZiAoISgkQSkpIHtcbiAgICByZXR1cm47XG59XG4kJCRCIiwic3RyaWN0bmVzcyI6InNtYXJ0Iiwic2VsZWN0b3IiOiIiLCJjb25maWciOiJpZDogbm8tbmVzdGVkLWxpbmtzXG5sYW5ndWFnZTogdHN4XG5zZXZlcml0eTogZXJyb3JcbnJ1bGU6XG4gIHBhdHRlcm46IDxhICQkJD4kJCRBPC9hPlxuICBoYXM6XG4gICAgcGF0dGVybjogPGEgJCQkPiQkJDwvYT5cbiAgICBzdG9wQnk6IGVuZCIsInNvdXJjZSI6ImZ1bmN0aW9uIENvbXBvbmVudCgpIHtcbiAgcmV0dXJuIDxhIGhyZWY9Jy9kZXN0aW5hdGlvbic+XG4gICAgPGEgaHJlZj0nL2Fub3RoZXJkZXN0aW5hdGlvbic+TmVzdGVkIGxpbmshPC9hPlxuICA8L2E+O1xufVxuZnVuY3Rpb24gT2theUNvbXBvbmVudCgpIHtcbiAgcmV0dXJuIDxhIGhyZWY9Jy9kZXN0aW5hdGlvbic+XG4gICAgSSBhbSBqdXN0IGEgbGluay5cbiAgPC9hPjtcbn0ifQ==",
      "rules": [
        "pattern",
        "has"
      ],
      "source_file": "/var/tmp/vibe-kanban/vk-ff35-organized/target/debug/build/organized-grepster-mcp-a639358d381b1d6e/out/ast-grep.github.io/website/catalog/tsx/avoid-nested-links.md",
      "title": "Avoid nested links",
      "type": "YAML",
      "yaml_content": "id: no-nested-links\nlanguage: tsx\nseverity: error\nrule:\n  pattern: <a $$$>$$$A</a>\n  has:\n    pattern: <a $$$>$$$</a>\n    stopBy: end"
    },
    {
      "content": "## Unnecessary `useState` Type <Badge type=\"tip\" text=\"Has Fix\" />\n\n- [Playground Link](/playground.html#eyJtb2RlIjoiUGF0Y2giLCJsYW5nIjoidHlwZXNjcmlwdCIsInF1ZXJ5IjoidXNlU3RhdGU8c3RyaW5nPigkQSkiLCJyZXdyaXRlIjoidXNlU3RhdGUoJEEpIiwiY29uZmlnIjoiIyBZQU1MIFJ1bGUgaXMgbW9yZSBwb3dlcmZ1bCFcbiMgaHR0cHM6Ly9hc3QtZ3JlcC5naXRodWIuaW8vZ3VpZGUvcnVsZS1jb25maWcuaHRtbCNydWxlXG5ydWxlOlxuICBhbnk6XG4gICAgLSBwYXR0ZXJuOiBjb25zb2xlLmxvZygkQSlcbiAgICAtIHBhdHRlcm46IGNvbnNvbGUuZGVidWcoJEEpXG5maXg6XG4gIGxvZ2dlci5sb2coJEEpIiwic291cmNlIjoiZnVuY3Rpb24gQ29tcG9uZW50KCkge1xuICBjb25zdCBbbmFtZSwgc2V0TmFtZV0gPSB1c2VTdGF0ZTxzdHJpbmc+KCdSZWFjdCcpXG59In0=)\n\n### Description\n\nReact's [`useState`](https://react.dev/reference/react/useState) is a Hook that lets you add a state variable to your component. The type annotation of `useState`'s generic type argument, for example `useState<number>(123)`, is unnecessary if TypeScript can infer the type of the state variable from the initial value.\n\nWe can usually skip annotating if the generic type argument is a single primitive type like `number`, `string` or `boolean`.\n\n<!-- Use pattern in the example. Delete this section if use YAML. -->\n\n### Pattern\n\n::: code-group\n\n```bash [number]\nast-grep -p 'useState<number>($A)' -r 'useState($A)' -l tsx\n```\n\n```bash [string]\nast-grep -p 'useState<string>($A)' -r 'useState($A)'\n```\n\n```bash [boolean]\nast-grep -p 'useState<boolean>($A)' -r 'useState($A)'\n```\n\n:::\n\n### Example\n\n<!-- highlight matched code in curly-brace {lineNum} -->\n\n```ts {2}\nfunction Component() {\n  const [name, setName] = useState<string>('React')\n}\n```\n\n### Diff\n\n<!-- use // [!code --] and // [!code ++] to annotate diff -->\n\n```ts\nfunction Component() {\n  const [name, setName] = useState<string>('React') // [!code --]\n  const [name, setName] = useState('React') // [!code ++]\n}\n```\n\n### Contributed by\n\n[Herrington Darkholme](https://twitter.com/hd_nvim)\n",
      "description": "React's [`useState`](https://react.dev/reference/react/useState) is a Hook that lets you add a state variable to your component. The type annotation of `useState`'s generic type argument, for example `useState<number>(123)`, is unnecessary if TypeScript can infer the type of the state variable from the initial value.\n\nWe can usually skip annotating if the generic type argument is a single primitive type like `number`, `string` or `boolean`.\n\n<!-- Use pattern in the example. Delete this section if use YAML. -->",
      "features": [],
      "has_fix": true,
      "id": "redundant-usestate-type",
      "language": "tsx",
      "playground_link": "/playground.html#eyJtb2RlIjoiUGF0Y2giLCJsYW5nIjoidHlwZXNjcmlwdCIsInF1ZXJ5IjoidXNlU3RhdGU8c3RyaW5nPigkQSkiLCJyZXdyaXRlIjoidXNlU3RhdGUoJEEpIiwiY29uZmlnIjoiIyBZQU1MIFJ1bGUgaXMgbW9yZSBwb3dlcmZ1bCFcbiMgaHR0cHM6Ly9hc3QtZ3JlcC5naXRodWIuaW8vZ3VpZGUvcnVsZS1jb25maWcuaHRtbCNydWxlXG5ydWxlOlxuICBhbnk6XG4gICAgLSBwYXR0ZXJuOiBjb25zb2xlLmxvZygkQSlcbiAgICAtIHBhdHRlcm46IGNvbnNvbGUuZGVidWcoJEEpXG5maXg6XG4gIGxvZ2dlci5sb2coJEEpIiwic291cmNlIjoiZnVuY3Rpb24gQ29tcG9uZW50KCkge1xuICBjb25zdCBbbmFtZSwgc2V0TmFtZV0gPSB1c2VTdGF0ZTxzdHJpbmc+KCdSZWFjdCcpXG59In0=",
      "rules": [],
      "source_file": "/var/tmp/vibe-kanban/vk-ff35-organized/target/debug/build/organized-grepster-mcp-a639358d381b1d6e/out/ast-grep.github.io/website/catalog/tsx/redundant-usestate-type.md",
      "title": "Unnecessary `useState` Type",
      "type": "Pattern",
      "yaml_content": ""
    },
    {
      "content": "## Find Import File without Extension\n\n- [Playground Link](/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6ImphdmFzY3JpcHQiLCJxdWVyeSI6ImNvbnNvbGUubG9nKCRNQVRDSCkiLCJyZXdyaXRlIjoibG9nZ2VyLmxvZygkTUFUQ0gpIiwiY29uZmlnIjoibGFuZ3VhZ2U6IFwianNcIlxucnVsZTpcbiAgcmVnZXg6IFwiL1teLl0rW14vXSRcIiAgXG4gIGtpbmQ6IHN0cmluZ19mcmFnbWVudFxuICBhbnk6XG4gICAgLSBpbnNpZGU6XG4gICAgICAgIHN0b3BCeTogZW5kXG4gICAgICAgIGtpbmQ6IGltcG9ydF9zdGF0ZW1lbnRcbiAgICAtIGluc2lkZTpcbiAgICAgICAgc3RvcEJ5OiBlbmRcbiAgICAgICAga2luZDogY2FsbF9leHByZXNzaW9uXG4gICAgICAgIGhhczpcbiAgICAgICAgICBmaWVsZDogZnVuY3Rpb25cbiAgICAgICAgICByZWdleDogXCJeaW1wb3J0JFwiXG4iLCJzb3VyY2UiOiJpbXBvcnQgYSwge2IsIGMsIGR9IGZyb20gXCIuL2ZpbGVcIjtcbmltcG9ydCBlIGZyb20gXCIuL290aGVyX2ZpbGUuanNcIjtcbmltcG9ydCBcIi4vZm9sZGVyL1wiO1xuaW1wb3J0IHt4fSBmcm9tIFwicGFja2FnZVwiO1xuaW1wb3J0IHt5fSBmcm9tIFwicGFja2FnZS93aXRoL3BhdGhcIjtcblxuaW1wb3J0KFwiLi9keW5hbWljMVwiKTtcbmltcG9ydChcIi4vZHluYW1pYzIuanNcIik7XG5cbm15X2Z1bmMoXCIuL3VucmVsYXRlZF9wYXRoX3N0cmluZ1wiKVxuXG4ifQ==)\n\n### Description\n\nIn ECMAScript modules (ESM), the module specifier must include the file extension, such as `.js` or `.mjs`, when importing local or absolute modules. This is because ESM does not perform any automatic file extension resolution, unlike CommonJS modules tools such as Webpack or Babel. This behavior matches how import behaves in browser environments, and is specified by the [ESM module spec](https://stackoverflow.com/questions/66375075/node-14-ecmascript-modules-import-modules-without-file-extensions).\n\nThe rule finds all imports (static and dynamic) for files without a file extension.\n\n<!-- Use YAML in the example. Delete this section if use pattern. -->\n\n### YAML\n\n```yaml\nid: find-import-file\nlanguage: js\nrule:\n  regex: \"/[^.]+[^/]$\"\n  kind: string_fragment\n  any:\n    - inside:\n        stopBy: end\n        kind: import_statement\n    - inside:\n        stopBy: end\n        kind: call_expression\n        has:\n          field: function\n          regex: \"^import$\"\n```\n\n### Example\n\n<!-- highlight matched code in curly-brace {lineNum} -->\n\n```ts {1,5,7}\nimport a, { b, c, d } from './file'\nimport e from './other_file.js'\nimport './folder/'\nimport { x } from 'package'\nimport { y } from 'package/with/path'\n\nimport('./dynamic1')\nimport('./dynamic2.js')\n\nmy_func('./unrelated_path_string')\n```\n\n### Contributed by\n\n[DasSurma](https://twitter.com/DasSurma) in [this tweet](https://x.com/DasSurma/status/1706213303331029277).\n",
      "description": "In ECMAScript modules (ESM), the module specifier must include the file extension, such as `.js` or `.mjs`, when importing local or absolute modules. This is because ESM does not perform any automatic file extension resolution, unlike CommonJS modules tools such as Webpack or Babel. This behavior matches how import behaves in browser environments, and is specified by the [ESM module spec](https://stackoverflow.com/questions/66375075/node-14-ecmascript-modules-import-modules-without-file-extensions).\n\nThe rule finds all imports (static and dynamic) for files without a file extension.\n\n<!-- Use YAML in the example. Delete this section if use pattern. -->",
      "features": [],
      "has_fix": false,
      "id": "find-import-file-without-extension",
      "language": "typescript",
      "playground_link": "/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6ImphdmFzY3JpcHQiLCJxdWVyeSI6ImNvbnNvbGUubG9nKCRNQVRDSCkiLCJyZXdyaXRlIjoibG9nZ2VyLmxvZygkTUFUQ0gpIiwiY29uZmlnIjoibGFuZ3VhZ2U6IFwianNcIlxucnVsZTpcbiAgcmVnZXg6IFwiL1teLl0rW14vXSRcIiAgXG4gIGtpbmQ6IHN0cmluZ19mcmFnbWVudFxuICBhbnk6XG4gICAgLSBpbnNpZGU6XG4gICAgICAgIHN0b3BCeTogZW5kXG4gICAgICAgIGtpbmQ6IGltcG9ydF9zdGF0ZW1lbnRcbiAgICAtIGluc2lkZTpcbiAgICAgICAgc3RvcEJ5OiBlbmRcbiAgICAgICAga2luZDogY2FsbF9leHByZXNzaW9uXG4gICAgICAgIGhhczpcbiAgICAgICAgICBmaWVsZDogZnVuY3Rpb25cbiAgICAgICAgICByZWdleDogXCJeaW1wb3J0JFwiXG4iLCJzb3VyY2UiOiJpbXBvcnQgYSwge2IsIGMsIGR9IGZyb20gXCIuL2ZpbGVcIjtcbmltcG9ydCBlIGZyb20gXCIuL290aGVyX2ZpbGUuanNcIjtcbmltcG9ydCBcIi4vZm9sZGVyL1wiO1xuaW1wb3J0IHt4fSBmcm9tIFwicGFja2FnZVwiO1xuaW1wb3J0IHt5fSBmcm9tIFwicGFja2FnZS93aXRoL3BhdGhcIjtcblxuaW1wb3J0KFwiLi9keW5hbWljMVwiKTtcbmltcG9ydChcIi4vZHluYW1pYzIuanNcIik7XG5cbm15X2Z1bmMoXCIuL3VucmVsYXRlZF9wYXRoX3N0cmluZ1wiKVxuXG4ifQ==",
      "rules": [
        "regex",
        "kind",
        "any",
        "inside",
        "inside"
      ],
      "source_file": "/var/tmp/vibe-kanban/vk-ff35-organized/target/debug/build/organized-grepster-mcp-a639358d381b1d6e/out/ast-grep.github.io/website/catalog/typescript/find-import-file-without-extension.md",
      "title": "Find Import File without Extension",
      "type": "YAML",
      "yaml_content": "id: find-import-file\nlanguage: js\nrule:\n  regex: \"/[^.]+[^/]$\"\n  kind: string_fragment\n  any:\n    - inside:\n        stopBy: end\n        kind: import_statement\n    - inside:\n        stopBy: end\n        kind: call_expression\n        has:\n          field: function\n          regex: \"^import$\""
    },
    {
      "content": "## Find Import Usage\n\n- [Playground Link](/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6InR5cGVzY3JpcHQiLCJxdWVyeSI6IiIsInJld3JpdGUiOiIiLCJzdHJpY3RuZXNzIjoicmVsYXhlZCIsInNlbGVjdG9yIjoiIiwiY29uZmlnIjoicnVsZTpcbiAgIyB0aGUgdXNhZ2VcbiAga2luZDogaWRlbnRpZmllclxuICBwYXR0ZXJuOiAkTU9EXG4gICMgaXRzIHJlbGF0aW9uc2hpcCB0byB0aGUgcm9vdFxuICBpbnNpZGU6XG4gICAgc3RvcEJ5OiBlbmRcbiAgICBraW5kOiBwcm9ncmFtXG4gICAgIyBhbmQgYmFjayBkb3duIHRvIHRoZSBpbXBvcnQgc3RhdGVtZW50XG4gICAgaGFzOlxuICAgICAga2luZDogaW1wb3J0X3N0YXRlbWVudFxuICAgICAgIyBhbmQgZGVlcGVyIGludG8gdGhlIGltcG9ydCBzdGF0ZW1lbnQgbG9va2luZyBmb3IgdGhlIG1hdGNoaW5nIGlkZW50aWZpZXJcbiAgICAgIGhhczpcbiAgICAgICAgc3RvcEJ5OiBlbmRcbiAgICAgICAga2luZDogaW1wb3J0X3NwZWNpZmllclxuICAgICAgICBwYXR0ZXJuOiAkTU9EICMgc2FtZSBwYXR0ZXJuIGFzIHRoZSB1c2FnZSBpcyBlbmZvcmNlZCBoZXJlIiwic291cmNlIjoiaW1wb3J0IHsgTW9uZ29DbGllbnQgfSBmcm9tICdtb25nb2RiJztcbmNvbnN0IHVybCA9ICdtb25nb2RiOi8vbG9jYWxob3N0OjI3MDE3JztcbmFzeW5jIGZ1bmN0aW9uIHJ1bigpIHtcbiAgY29uc3QgY2xpZW50ID0gbmV3IE1vbmdvQ2xpZW50KHVybCk7XG59XG4ifQ==)\n\n### Description\n\nIt is common to find the usage of an imported module in a codebase. This rule helps you to find the usage of an imported module in your codebase.\nThe idea of this rule can be broken into several parts:\n\n- Find the use of an identifier `$MOD`\n- To find the import, we first need to find the root file of which `$MOD` is `inside`\n- The `program` file `has` an `import` statement\n- The `import` statement `has` the identifier `$MOD`\n\n<!-- Use YAML in the example. Delete this section if use pattern. -->\n\n### YAML\n\n```yaml\nid: find-import-usage\nlanguage: typescript\nrule:\n  kind: identifier # ast-grep requires a kind\n  pattern: $MOD   # the identifier to find\n  inside: # find the root\n    stopBy: end\n    kind: program\n    has: # and has the import statement\n      kind: import_statement\n      has: # look for the matching identifier\n        stopBy: end\n        kind: import_specifier\n        pattern: $MOD # same pattern as the usage is enforced here\n```\n\n### Example\n\n<!-- highlight matched code in curly-brace {lineNum} -->\n\n```ts {4}\nimport { MongoClient } from 'mongodb'\nconst url = 'mongodb://localhost:27017'\nasync function run() {\n  const client = new MongoClient(url)\n}\n```\n\n### Contributed by\n\n[Steven Love](https://github.com/StevenLove)\n",
      "description": "It is common to find the usage of an imported module in a codebase. This rule helps you to find the usage of an imported module in your codebase.\nThe idea of this rule can be broken into several parts:\n\n- Find the use of an identifier `$MOD`\n- To find the import, we first need to find the root file of which `$MOD` is `inside`\n- The `program` file `has` an `import` statement\n- The `import` statement `has` the identifier `$MOD`\n\n<!-- Use YAML in the example. Delete this section if use pattern. -->",
      "features": [],
      "has_fix": false,
      "id": "find-import-usage",
      "language": "typescript",
      "playground_link": "/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6InR5cGVzY3JpcHQiLCJxdWVyeSI6IiIsInJld3JpdGUiOiIiLCJzdHJpY3RuZXNzIjoicmVsYXhlZCIsInNlbGVjdG9yIjoiIiwiY29uZmlnIjoicnVsZTpcbiAgIyB0aGUgdXNhZ2VcbiAga2luZDogaWRlbnRpZmllclxuICBwYXR0ZXJuOiAkTU9EXG4gICMgaXRzIHJlbGF0aW9uc2hpcCB0byB0aGUgcm9vdFxuICBpbnNpZGU6XG4gICAgc3RvcEJ5OiBlbmRcbiAgICBraW5kOiBwcm9ncmFtXG4gICAgIyBhbmQgYmFjayBkb3duIHRvIHRoZSBpbXBvcnQgc3RhdGVtZW50XG4gICAgaGFzOlxuICAgICAga2luZDogaW1wb3J0X3N0YXRlbWVudFxuICAgICAgIyBhbmQgZGVlcGVyIGludG8gdGhlIGltcG9ydCBzdGF0ZW1lbnQgbG9va2luZyBmb3IgdGhlIG1hdGNoaW5nIGlkZW50aWZpZXJcbiAgICAgIGhhczpcbiAgICAgICAgc3RvcEJ5OiBlbmRcbiAgICAgICAga2luZDogaW1wb3J0X3NwZWNpZmllclxuICAgICAgICBwYXR0ZXJuOiAkTU9EICMgc2FtZSBwYXR0ZXJuIGFzIHRoZSB1c2FnZSBpcyBlbmZvcmNlZCBoZXJlIiwic291cmNlIjoiaW1wb3J0IHsgTW9uZ29DbGllbnQgfSBmcm9tICdtb25nb2RiJztcbmNvbnN0IHVybCA9ICdtb25nb2RiOi8vbG9jYWxob3N0OjI3MDE3JztcbmFzeW5jIGZ1bmN0aW9uIHJ1bigpIHtcbiAgY29uc3QgY2xpZW50ID0gbmV3IE1vbmdvQ2xpZW50KHVybCk7XG59XG4ifQ==",
      "rules": [
        "kind",
        "pattern",
        "inside"
      ],
      "source_file": "/var/tmp/vibe-kanban/vk-ff35-organized/target/debug/build/organized-grepster-mcp-a639358d381b1d6e/out/ast-grep.github.io/website/catalog/typescript/find-import-usage.md",
      "title": "Find Import Usage",
      "type": "YAML",
      "yaml_content": "id: find-import-usage\nlanguage: typescript\nrule:\n  kind: identifier # ast-grep requires a kind\n  pattern: $MOD   # the identifier to find\n  inside: # find the root\n    stopBy: end\n    kind: program\n    has: # and has the import statement\n      kind: import_statement\n      has: # look for the matching identifier\n        stopBy: end\n        kind: import_specifier\n        pattern: $MOD # same pattern as the usage is enforced here"
    },
    {
      "content": "## Missing Component Decorator\n\n- [Playground Link](/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6ImphdmFzY3JpcHQiLCJxdWVyeSI6ImltcG9ydCAkQSBmcm9tICdhbmltZWpzJyIsInJld3JpdGUiOiJpbXBvcnQgeyBhbmltZSBhcyAkQSB9IGZyb20gJ2FuaW1lJyIsInN0cmljdG5lc3MiOiJzbWFydCIsInNlbGVjdG9yIjoiIiwiY29uZmlnIjoiaWQ6IG1pc3NpbmctY29tcG9uZW50LWRlY29yYXRvclxubWVzc2FnZTogWW91J3JlIHVzaW5nIGFuIEFuZ3VsYXIgbGlmZWN5Y2xlIG1ldGhvZCwgYnV0IG1pc3NpbmcgYW4gQW5ndWxhciBAQ29tcG9uZW50KCkgZGVjb3JhdG9yLlxubGFuZ3VhZ2U6IFR5cGVTY3JpcHRcbnNldmVyaXR5OiB3YXJuaW5nXG5ydWxlOlxuICBwYXR0ZXJuOlxuICAgIGNvbnRleHQ6ICdjbGFzcyBIaSB7ICRNRVRIT0QoKSB7ICQkJF99IH0nXG4gICAgc2VsZWN0b3I6IG1ldGhvZF9kZWZpbml0aW9uXG4gIGluc2lkZTpcbiAgICBwYXR0ZXJuOiAnY2xhc3MgJEtMQVNTICQkJF8geyAkJCRfIH0nXG4gICAgc3RvcEJ5OiBlbmRcbiAgICBub3Q6XG4gICAgICBoYXM6XG4gICAgICAgIHBhdHRlcm46ICdAQ29tcG9uZW50KCQkJF8pJ1xuY29uc3RyYWludHM6XG4gIE1FVEhPRDpcbiAgICByZWdleDogbmdPbkluaXR8bmdPbkRlc3Ryb3lcbmxhYmVsczpcbiAgS0xBU1M6XG4gICAgc3R5bGU6IHByaW1hcnlcbiAgICBtZXNzYWdlOiBcIlRoaXMgY2xhc3MgaXMgbWlzc2luZyB0aGUgZGVjb3JhdG9yLlwiXG4gIE1FVEhPRDpcbiAgICBzdHlsZTogc2Vjb25kYXJ5XG4gICAgbWVzc2FnZTogXCJUaGlzIGlzIGFuIEFuZ3VsYXIgbGlmZWN5Y2xlIG1ldGhvZC5cIlxubWV0YWRhdGE6XG4gIGNvbnRyaWJ1dGVkQnk6IHNhbXdpZ2h0dCIsInNvdXJjZSI6ImNsYXNzIE5vdENvbXBvbmVudCB7XG4gICAgbmdPbkluaXQoKSB7fVxufVxuXG5AQ29tcG9uZW50KClcbmNsYXNzIEtsYXNzIHtcbiAgICBuZ09uSW5pdCgpIHt9XG59In0=)\n\n### Description\n\nAngular lifecycle methods are a set of methods that allow you to hook into the lifecycle of an Angular component or directive.\nThey must be used within a class that is decorated with the `@Component()` decorator.\n\n### YAML\n\nThis rule illustrates how to use custom labels to highlight specific parts of the code.\n\n```yaml\nid: missing-component-decorator\nmessage: You're using an Angular lifecycle method, but missing an Angular @Component() decorator.\nlanguage: TypeScript\nseverity: warning\nrule:\n  pattern:\n    context: 'class Hi { $METHOD() { $$$_} }'\n    selector: method_definition\n  inside:\n    pattern: 'class $KLASS $$$_ { $$$_ }'\n    stopBy: end\n    not:\n      has:\n        pattern: '@Component($$$_)'\nconstraints:\n  METHOD:\n    regex: ngOnInit|ngOnDestroy\nlabels:\n  KLASS:\n    style: primary\n    message: \"This class is missing the decorator.\"\n  METHOD:\n    style: secondary\n    message: \"This is an Angular lifecycle method.\"\nmetadata:\n  contributedBy: samwightt\n```\n\n### Example\n\n<!-- highlight matched code in curly-brace {lineNum} -->\n\n```ts {2}\nclass NotComponent {\n  ngOnInit() {}\n}\n\n@Component()\nclass Klass {\n  ngOnInit() {}\n}\n```\n\n### Contributed by\n\n[Sam Wight](https://github.com/samwightt).\n",
      "description": "Angular lifecycle methods are a set of methods that allow you to hook into the lifecycle of an Angular component or directive.\nThey must be used within a class that is decorated with the `@Component()` decorator.",
      "features": [
        "constraints"
      ],
      "has_fix": false,
      "id": "missing-component-decorator",
      "language": "typescript",
      "playground_link": "/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6ImphdmFzY3JpcHQiLCJxdWVyeSI6ImltcG9ydCAkQSBmcm9tICdhbmltZWpzJyIsInJld3JpdGUiOiJpbXBvcnQgeyBhbmltZSBhcyAkQSB9IGZyb20gJ2FuaW1lJyIsInN0cmljdG5lc3MiOiJzbWFydCIsInNlbGVjdG9yIjoiIiwiY29uZmlnIjoiaWQ6IG1pc3NpbmctY29tcG9uZW50LWRlY29yYXRvclxubWVzc2FnZTogWW91J3JlIHVzaW5nIGFuIEFuZ3VsYXIgbGlmZWN5Y2xlIG1ldGhvZCwgYnV0IG1pc3NpbmcgYW4gQW5ndWxhciBAQ29tcG9uZW50KCkgZGVjb3JhdG9yLlxubGFuZ3VhZ2U6IFR5cGVTY3JpcHRcbnNldmVyaXR5OiB3YXJuaW5nXG5ydWxlOlxuICBwYXR0ZXJuOlxuICAgIGNvbnRleHQ6ICdjbGFzcyBIaSB7ICRNRVRIT0QoKSB7ICQkJF99IH0nXG4gICAgc2VsZWN0b3I6IG1ldGhvZF9kZWZpbml0aW9uXG4gIGluc2lkZTpcbiAgICBwYXR0ZXJuOiAnY2xhc3MgJEtMQVNTICQkJF8geyAkJCRfIH0nXG4gICAgc3RvcEJ5OiBlbmRcbiAgICBub3Q6XG4gICAgICBoYXM6XG4gICAgICAgIHBhdHRlcm46ICdAQ29tcG9uZW50KCQkJF8pJ1xuY29uc3RyYWludHM6XG4gIE1FVEhPRDpcbiAgICByZWdleDogbmdPbkluaXR8bmdPbkRlc3Ryb3lcbmxhYmVsczpcbiAgS0xBU1M6XG4gICAgc3R5bGU6IHByaW1hcnlcbiAgICBtZXNzYWdlOiBcIlRoaXMgY2xhc3MgaXMgbWlzc2luZyB0aGUgZGVjb3JhdG9yLlwiXG4gIE1FVEhPRDpcbiAgICBzdHlsZTogc2Vjb25kYXJ5XG4gICAgbWVzc2FnZTogXCJUaGlzIGlzIGFuIEFuZ3VsYXIgbGlmZWN5Y2xlIG1ldGhvZC5cIlxubWV0YWRhdGE6XG4gIGNvbnRyaWJ1dGVkQnk6IHNhbXdpZ2h0dCIsInNvdXJjZSI6ImNsYXNzIE5vdENvbXBvbmVudCB7XG4gICAgbmdPbkluaXQoKSB7fVxufVxuXG5AQ29tcG9uZW50KClcbmNsYXNzIEtsYXNzIHtcbiAgICBuZ09uSW5pdCgpIHt9XG59In0=",
      "rules": [
        "pattern",
        "inside"
      ],
      "source_file": "/var/tmp/vibe-kanban/vk-ff35-organized/target/debug/build/organized-grepster-mcp-a639358d381b1d6e/out/ast-grep.github.io/website/catalog/typescript/missing-component-decorator.md",
      "title": "Missing Component Decorator",
      "type": "YAML",
      "yaml_content": "id: missing-component-decorator\nmessage: You're using an Angular lifecycle method, but missing an Angular @Component() decorator.\nlanguage: TypeScript\nseverity: warning\nrule:\n  pattern:\n    context: 'class Hi { $METHOD() { $$$_} }'\n    selector: method_definition\n  inside:\n    pattern: 'class $KLASS $$$_ { $$$_ }'\n    stopBy: end\n    not:\n      has:\n        pattern: '@Component($$$_)'\nconstraints:\n  METHOD:\n    regex: ngOnInit|ngOnDestroy\nlabels:\n  KLASS:\n    style: primary\n    message: \"This class is missing the decorator.\"\n  METHOD:\n    style: secondary\n    message: \"This is an Angular lifecycle method.\"\nmetadata:\n  contributedBy: samwightt"
    },
    {
      "content": "## Speed up Barrel Import <Badge type=\"tip\" text=\"Has Fix\" />\n\n- [Playground Link](/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6ImphdmFzY3JpcHQiLCJxdWVyeSI6IiIsInJld3JpdGUiOiIiLCJjb25maWciOiJydWxlOlxuICBwYXR0ZXJuOiBpbXBvcnQgeyQkJElERU5UU30gZnJvbSAnLi9iYXJyZWwnXG5yZXdyaXRlcnM6XG4tIGlkOiByZXdyaXRlLWlkZW50aWZlclxuICBydWxlOlxuICAgIHBhdHRlcm46ICRJREVOVFxuICAgIGtpbmQ6IGlkZW50aWZpZXJcbiAgZml4OiBpbXBvcnQgJElERU5UIGZyb20gJy4vYmFycmVsLyRJREVOVCdcbnRyYW5zZm9ybTpcbiAgSU1QT1JUUzpcbiAgICByZXdyaXRlOlxuICAgICAgcmV3cml0ZXJzOiBbcmV3cml0ZS1pZGVudGlmZXJdXG4gICAgICBzb3VyY2U6ICQkJElERU5UU1xuICAgICAgam9pbkJ5OiBcIlxcblwiXG5maXg6ICRJTVBPUlRTIiwic291cmNlIjoiaW1wb3J0IHsgYSwgYiwgYyB9IGZyb20gJy4vYmFycmVsJzsifQ==)\n\n### Description\n\nA [barrel import](https://adrianfaciu.dev/posts/barrel-files/) is a way to consolidate the exports of multiple modules into a single convenient module that can be imported using a single import statement. For instance, `import {a, b, c} from './barrel'`.\n\nIt has [some](https://vercel.com/blog/how-we-optimized-package-imports-in-next-js) [benefits](https://marvinh.dev/blog/speeding-up-javascript-ecosystem-part-7/) to import each module directly from its own file without going through the barrel file.\nSuch as reducing [bundle size](https://dev.to/tassiofront/barrel-files-and-why-you-should-stop-using-them-now-bc4), improving building time or avoiding [conflicting names](https://flaming.codes/posts/barrel-files-in-javascript/).\n\n<!-- Use YAML in the example. Delete this section if use pattern. -->\n\n### YAML\n\n```yaml\nid: speed-up-barrel-import\nlanguage: typescript\n# find the barrel import statement\nrule:\n  pattern: import {$$$IDENTS} from './barrel'\n# rewrite imported identifiers to direct imports\nrewriters:\n- id: rewrite-identifer\n  rule:\n    pattern: $IDENT\n    kind: identifier\n  fix: import $IDENT from './barrel/$IDENT'\n# apply the rewriter to the import statement\ntransform:\n  IMPORTS:\n    rewrite:\n      rewriters: [rewrite-identifer]\n      # $$$IDENTS contains imported identifiers\n      source: $$$IDENTS\n      # join the rewritten imports by newline\n      joinBy: \"\\n\"\nfix: $IMPORTS\n```\n\n### Example\n\n```ts {1}\nimport { a, b, c } from './barrel'\n```\n\n### Diff\n\n<!-- use // [!code --] and // [!code ++] to annotate diff -->\n\n```ts\nimport { a, b, c } from './barrel' // [!code --]\nimport a from './barrel/a' // [!code ++]\nimport b from './barrel/b' // [!code ++]\nimport c from './barrel/c' // [!code ++]\n```\n\n### Contributed by\n\n[Herrington Darkholme](https://x.com/hd_nvim)\n",
      "description": "A [barrel import](https://adrianfaciu.dev/posts/barrel-files/) is a way to consolidate the exports of multiple modules into a single convenient module that can be imported using a single import statement. For instance, `import {a, b, c} from './barrel'`.\n\nIt has [some](https://vercel.com/blog/how-we-optimized-package-imports-in-next-js) [benefits](https://marvinh.dev/blog/speeding-up-javascript-ecosystem-part-7/) to import each module directly from its own file without going through the barrel file.\nSuch as reducing [bundle size](https://dev.to/tassiofront/barrel-files-and-why-you-should-stop-using-them-now-bc4), improving building time or avoiding [conflicting names](https://flaming.codes/posts/barrel-files-in-javascript/).\n\n<!-- Use YAML in the example. Delete this section if use pattern. -->",
      "features": [
        "transform",
        "rewriters"
      ],
      "has_fix": true,
      "id": "speed-up-barrel-import",
      "language": "typescript",
      "playground_link": "/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6ImphdmFzY3JpcHQiLCJxdWVyeSI6IiIsInJld3JpdGUiOiIiLCJjb25maWciOiJydWxlOlxuICBwYXR0ZXJuOiBpbXBvcnQgeyQkJElERU5UU30gZnJvbSAnLi9iYXJyZWwnXG5yZXdyaXRlcnM6XG4tIGlkOiByZXdyaXRlLWlkZW50aWZlclxuICBydWxlOlxuICAgIHBhdHRlcm46ICRJREVOVFxuICAgIGtpbmQ6IGlkZW50aWZpZXJcbiAgZml4OiBpbXBvcnQgJElERU5UIGZyb20gJy4vYmFycmVsLyRJREVOVCdcbnRyYW5zZm9ybTpcbiAgSU1QT1JUUzpcbiAgICByZXdyaXRlOlxuICAgICAgcmV3cml0ZXJzOiBbcmV3cml0ZS1pZGVudGlmZXJdXG4gICAgICBzb3VyY2U6ICQkJElERU5UU1xuICAgICAgam9pbkJ5OiBcIlxcblwiXG5maXg6ICRJTVBPUlRTIiwic291cmNlIjoiaW1wb3J0IHsgYSwgYiwgYyB9IGZyb20gJy4vYmFycmVsJzsifQ==",
      "rules": [
        "pattern"
      ],
      "source_file": "/var/tmp/vibe-kanban/vk-ff35-organized/target/debug/build/organized-grepster-mcp-a639358d381b1d6e/out/ast-grep.github.io/website/catalog/typescript/speed-up-barrel-import.md",
      "title": "Speed up Barrel Import",
      "type": "YAML",
      "yaml_content": "id: speed-up-barrel-import\nlanguage: typescript\n# find the barrel import statement\nrule:\n  pattern: import {$$$IDENTS} from './barrel'\n# rewrite imported identifiers to direct imports\nrewriters:\n- id: rewrite-identifer\n  rule:\n    pattern: $IDENT\n    kind: identifier\n  fix: import $IDENT from './barrel/$IDENT'\n# apply the rewriter to the import statement\ntransform:\n  IMPORTS:\n    rewrite:\n      rewriters: [rewrite-identifer]\n      # $$$IDENTS contains imported identifiers\n      source: $$$IDENTS\n      # join the rewritten imports by newline\n      joinBy: \"\\n\"\nfix: $IMPORTS"
    },
    {
      "content": "## Switch Chai from `should` style to `expect` <Badge type=\"tip\" text=\"Has Fix\" />\n\n- [Playground Link](/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6InJ1c3QiLCJxdWVyeSI6IiIsInJld3JpdGUiOiIiLCJzdHJpY3RuZXNzIjoicmVsYXhlZCIsInNlbGVjdG9yIjoiIiwiY29uZmlnIjoiaWQ6IHNob3VsZF90b19leHBlY3RfaW5zdGFuY2VvZlxubGFuZ3VhZ2U6IFR5cGVTY3JpcHRcbnJ1bGU6XG4gIGFueTpcbiAgLSBwYXR0ZXJuOiAkTkFNRS5zaG91bGQuYmUuYW4uaW5zdGFuY2VvZigkVFlQRSlcbiAgLSBwYXR0ZXJuOiAkTkFNRS5zaG91bGQuYmUuYW4uaW5zdGFuY2VPZigkVFlQRSlcbmZpeDogfC1cbiAgZXhwZWN0KCROQU1FKS5pbnN0YW5jZU9mKCRUWVBFKVxuLS0tXG5pZDogc2hvdWxkX3RvX2V4cGVjdF9nZW5lcmljU2hvdWxkQmVcbmxhbmd1YWdlOiBUeXBlU2NyaXB0XG5ydWxlOlxuICBwYXR0ZXJuOiAkTkFNRS5zaG91bGQuYmUuJFBST1BcbmZpeDogfC1cbiAgZXhwZWN0KCROQU1FKS50by5iZS4kUFJPUFxuIiwic291cmNlIjoiaXQoJ3Nob3VsZCBwcm9kdWNlIGFuIGluc3RhbmNlIG9mIGNob2tpZGFyLkZTV2F0Y2hlcicsICgpID0+IHtcbiAgd2F0Y2hlci5zaG91bGQuYmUuYW4uaW5zdGFuY2VvZihjaG9raWRhci5GU1dhdGNoZXIpO1xufSk7XG5pdCgnc2hvdWxkIGV4cG9zZSBwdWJsaWMgQVBJIG1ldGhvZHMnLCAoKSA9PiB7XG4gIHdhdGNoZXIub24uc2hvdWxkLmJlLmEoJ2Z1bmN0aW9uJyk7XG4gIHdhdGNoZXIuZW1pdC5zaG91bGQuYmUuYSgnZnVuY3Rpb24nKTtcbiAgd2F0Y2hlci5hZGQuc2hvdWxkLmJlLmEoJ2Z1bmN0aW9uJyk7XG4gIHdhdGNoZXIuY2xvc2Uuc2hvdWxkLmJlLmEoJ2Z1bmN0aW9uJyk7XG4gIHdhdGNoZXIuZ2V0V2F0Y2hlZC5zaG91bGQuYmUuYSgnZnVuY3Rpb24nKTtcbn0pOyJ9)\n\n### Description\n\n[Chai](https://www.chaijs.com) is a BDD / TDD assertion library for JavaScript. It comes with [two styles](https://www.chaijs.com/) of assertions: `should` and `expect`.\n\nThe `expect` interface provides a function as a starting point for chaining your language assertions and works with `undefined` and `null` values.\nThe `should` style allows for the same chainable assertions as the expect interface, however it extends each object with a should property to start your chain and [does not work](https://www.chaijs.com/guide/styles/#should-extras) with `undefined` and `null` values.\n\nThis rule migrates Chai `should` style assertions to `expect` style assertions. Note this is an example rule and a excerpt from [the original rules](https://github.com/43081j/codemods/blob/cddfe101e7f759e4da08b7e2f7bfe892c20f6f48/codemods/chai-should-to-expect.yml).\n\n### YAML\n\n```yaml\nid: should_to_expect_instanceof\nlanguage: TypeScript\nrule:\n  any:\n  - pattern: $NAME.should.be.an.instanceof($TYPE)\n  - pattern: $NAME.should.be.an.instanceOf($TYPE)\nfix: |-\n  expect($NAME).instanceOf($TYPE)\n---\nid: should_to_expect_genericShouldBe\nlanguage: TypeScript\nrule:\n  pattern: $NAME.should.be.$PROP\nfix: |-\n  expect($NAME).to.be.$PROP\n```\n\n### Example\n\n<!-- highlight matched code in curly-brace {lineNum} -->\n\n```js {2,5-9}\nit('should produce an instance of chokidar.FSWatcher', () => {\n  watcher.should.be.an.instanceof(chokidar.FSWatcher)\n})\nit('should expose public API methods', () => {\n  watcher.on.should.be.a('function')\n  watcher.emit.should.be.a('function')\n  watcher.add.should.be.a('function')\n  watcher.close.should.be.a('function')\n  watcher.getWatched.should.be.a('function')\n})\n```\n\n### Diff\n\n<!-- use // [!code --] and // [!code ++] to annotate diff -->\n\n```js\nit('should produce an instance of chokidar.FSWatcher', () => {\n  watcher.should.be.an.instanceof(chokidar.FSWatcher) // [!code --]\n  expect(watcher).instanceOf(chokidar.FSWatcher) // [!code ++]\n})\nit('should expose public API methods', () => {\n  watcher.on.should.be.a('function') // [!code --]\n  watcher.emit.should.be.a('function') // [!code --]\n  watcher.add.should.be.a('function') // [!code --]\n  watcher.close.should.be.a('function') // [!code --]\n  watcher.getWatched.should.be.a('function') // [!code --]\n  expect(watcher.on).to.be.a('function') // [!code ++]\n  expect(watcher.emit).to.be.a('function') // [!code ++]\n  expect(watcher.add).to.be.a('function') // [!code ++]\n  expect(watcher.close).to.be.a('function') // [!code ++]\n  expect(watcher.getWatched).to.be.a('function') // [!code ++]\n})\n```\n\n### Contributed by\n\n[James](https://bsky.app/profile/43081j.com), by [this post](https://bsky.app/profile/43081j.com/post/3lgimzfxza22i)\n\n### Exercise\n\nExercise left to the reader: can you write a rule to implement [this migration to `node:assert`](https://github.com/paulmillr/chokidar/pull/1409/files)?\n",
      "description": "[Chai](https://www.chaijs.com) is a BDD / TDD assertion library for JavaScript. It comes with [two styles](https://www.chaijs.com/) of assertions: `should` and `expect`.\n\nThe `expect` interface provides a function as a starting point for chaining your language assertions and works with `undefined` and `null` values.\nThe `should` style allows for the same chainable assertions as the expect interface, however it extends each object with a should property to start your chain and [does not work](https://www.chaijs.com/guide/styles/#should-extras) with `undefined` and `null` values.\n\nThis rule migrates Chai `should` style assertions to `expect` style assertions. Note this is an example rule and a excerpt from [the original rules](https://github.com/43081j/codemods/blob/cddfe101e7f759e4da08b7e2f7bfe892c20f6f48/codemods/chai-should-to-expect.yml).",
      "features": [],
      "has_fix": true,
      "id": "switch-from-should-to-expect",
      "language": "typescript",
      "playground_link": "/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6InJ1c3QiLCJxdWVyeSI6IiIsInJld3JpdGUiOiIiLCJzdHJpY3RuZXNzIjoicmVsYXhlZCIsInNlbGVjdG9yIjoiIiwiY29uZmlnIjoiaWQ6IHNob3VsZF90b19leHBlY3RfaW5zdGFuY2VvZlxubGFuZ3VhZ2U6IFR5cGVTY3JpcHRcbnJ1bGU6XG4gIGFueTpcbiAgLSBwYXR0ZXJuOiAkTkFNRS5zaG91bGQuYmUuYW4uaW5zdGFuY2VvZigkVFlQRSlcbiAgLSBwYXR0ZXJuOiAkTkFNRS5zaG91bGQuYmUuYW4uaW5zdGFuY2VPZigkVFlQRSlcbmZpeDogfC1cbiAgZXhwZWN0KCROQU1FKS5pbnN0YW5jZU9mKCRUWVBFKVxuLS0tXG5pZDogc2hvdWxkX3RvX2V4cGVjdF9nZW5lcmljU2hvdWxkQmVcbmxhbmd1YWdlOiBUeXBlU2NyaXB0XG5ydWxlOlxuICBwYXR0ZXJuOiAkTkFNRS5zaG91bGQuYmUuJFBST1BcbmZpeDogfC1cbiAgZXhwZWN0KCROQU1FKS50by5iZS4kUFJPUFxuIiwic291cmNlIjoiaXQoJ3Nob3VsZCBwcm9kdWNlIGFuIGluc3RhbmNlIG9mIGNob2tpZGFyLkZTV2F0Y2hlcicsICgpID0+IHtcbiAgd2F0Y2hlci5zaG91bGQuYmUuYW4uaW5zdGFuY2VvZihjaG9raWRhci5GU1dhdGNoZXIpO1xufSk7XG5pdCgnc2hvdWxkIGV4cG9zZSBwdWJsaWMgQVBJIG1ldGhvZHMnLCAoKSA9PiB7XG4gIHdhdGNoZXIub24uc2hvdWxkLmJlLmEoJ2Z1bmN0aW9uJyk7XG4gIHdhdGNoZXIuZW1pdC5zaG91bGQuYmUuYSgnZnVuY3Rpb24nKTtcbiAgd2F0Y2hlci5hZGQuc2hvdWxkLmJlLmEoJ2Z1bmN0aW9uJyk7XG4gIHdhdGNoZXIuY2xvc2Uuc2hvdWxkLmJlLmEoJ2Z1bmN0aW9uJyk7XG4gIHdhdGNoZXIuZ2V0V2F0Y2hlZC5zaG91bGQuYmUuYSgnZnVuY3Rpb24nKTtcbn0pOyJ9",
      "rules": [
        "any",
        "pattern",
        "pattern"
      ],
      "source_file": "/var/tmp/vibe-kanban/vk-ff35-organized/target/debug/build/organized-grepster-mcp-a639358d381b1d6e/out/ast-grep.github.io/website/catalog/typescript/switch-from-should-to-expect.md",
      "title": "Switch Chai from `should` style to `expect`",
      "type": "YAML",
      "yaml_content": "id: should_to_expect_instanceof\nlanguage: TypeScript\nrule:\n  any:\n  - pattern: $NAME.should.be.an.instanceof($TYPE)\n  - pattern: $NAME.should.be.an.instanceOf($TYPE)\nfix: |-\n  expect($NAME).instanceOf($TYPE)\n---\nid: should_to_expect_genericShouldBe\nlanguage: TypeScript\nrule:\n  pattern: $NAME.should.be.$PROP\nfix: |-\n  expect($NAME).to.be.$PROP"
    },
    {
      "content": "## No `await` in `Promise.all` array <Badge type=\"tip\" text=\"Has Fix\" />\n\n- [Playground Link](/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6ImphdmFzY3JpcHQiLCJxdWVyeSI6ImNvbnNvbGUubG9nKCRNQVRDSCkiLCJyZXdyaXRlIjoibG9nZ2VyLmxvZygkTUFUQ0gpIiwiY29uZmlnIjoiaWQ6IG5vLWF3YWl0LWluLXByb21pc2UtYWxsXG5zZXZlcml0eTogZXJyb3Jcbmxhbmd1YWdlOiBKYXZhU2NyaXB0XG5tZXNzYWdlOiBObyBhd2FpdCBpbiBQcm9taXNlLmFsbFxucnVsZTpcbiAgcGF0dGVybjogYXdhaXQgJEFcbiAgaW5zaWRlOlxuICAgIHBhdHRlcm46IFByb21pc2UuYWxsKCRfKVxuICAgIHN0b3BCeTpcbiAgICAgIG5vdDogeyBhbnk6IFt7a2luZDogYXJyYXl9LCB7a2luZDogYXJndW1lbnRzfV0gfVxuZml4OiAkQSIsInNvdXJjZSI6ImNvbnN0IFtmb28sIGJhcl0gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gIGF3YWl0IGdldEZvbygpLFxuICBnZXRCYXIoKSxcbiAgKGFzeW5jICgpID0+IHsgYXdhaXQgZ2V0QmF6KCl9KSgpLFxuXSkifQ==)\n\n### Description\n\nUsing `await` inside an inline `Promise.all` array is usually a mistake, as it defeats the purpose of running the promises in parallel. Instead, the promises should be created without `await` and passed to `Promise.all`, which can then be awaited.\n\n<!-- Use YAML in the example. Delete this section if use pattern. -->\n\n### YAML\n\n```yaml\nid: no-await-in-promise-all\nlanguage: typescript\nrule:\n  pattern: await $A\n  inside:\n    pattern: Promise.all($_)\n    stopBy:\n      not: { any: [{kind: array}, {kind: arguments}] }\nfix: $A\n```\n\n### Example\n\n<!-- highlight matched code in curly-brace {lineNum} -->\n\n```ts {2}\nconst [foo, bar] = await Promise.all([\n  await getFoo(),\n  getBar(),\n  (async () => {\n    await getBaz()\n  })(),\n])\n```\n\n### Diff\n\n<!-- use // [!code --] and // [!code ++] to annotate diff -->\n\n```ts\nconst [foo, bar] = await Promise.all([\n  await getFoo(), // [!code --]\n  getFoo(), // [!code ++]\n  getBar(),\n  (async () => {\n    await getBaz()\n  })(),\n])\n```\n\n### Contributed by\n\nInspired by [Alvar Lagerlöf](https://twitter.com/alvarlagerlof)\n",
      "description": "Using `await` inside an inline `Promise.all` array is usually a mistake, as it defeats the purpose of running the promises in parallel. Instead, the promises should be created without `await` and passed to `Promise.all`, which can then be awaited.\n\n<!-- Use YAML in the example. Delete this section if use pattern. -->",
      "features": [],
      "has_fix": true,
      "id": "no-await-in-promise-all",
      "language": "typescript",
      "playground_link": "/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6ImphdmFzY3JpcHQiLCJxdWVyeSI6ImNvbnNvbGUubG9nKCRNQVRDSCkiLCJyZXdyaXRlIjoibG9nZ2VyLmxvZygkTUFUQ0gpIiwiY29uZmlnIjoiaWQ6IG5vLWF3YWl0LWluLXByb21pc2UtYWxsXG5zZXZlcml0eTogZXJyb3Jcbmxhbmd1YWdlOiBKYXZhU2NyaXB0XG5tZXNzYWdlOiBObyBhd2FpdCBpbiBQcm9taXNlLmFsbFxucnVsZTpcbiAgcGF0dGVybjogYXdhaXQgJEFcbiAgaW5zaWRlOlxuICAgIHBhdHRlcm46IFByb21pc2UuYWxsKCRfKVxuICAgIHN0b3BCeTpcbiAgICAgIG5vdDogeyBhbnk6IFt7a2luZDogYXJyYXl9LCB7a2luZDogYXJndW1lbnRzfV0gfVxuZml4OiAkQSIsInNvdXJjZSI6ImNvbnN0IFtmb28sIGJhcl0gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gIGF3YWl0IGdldEZvbygpLFxuICBnZXRCYXIoKSxcbiAgKGFzeW5jICgpID0+IHsgYXdhaXQgZ2V0QmF6KCl9KSgpLFxuXSkifQ==",
      "rules": [
        "pattern",
        "inside"
      ],
      "source_file": "/var/tmp/vibe-kanban/vk-ff35-organized/target/debug/build/organized-grepster-mcp-a639358d381b1d6e/out/ast-grep.github.io/website/catalog/typescript/no-await-in-promise-all.md",
      "title": "No `await` in `Promise.all` array",
      "type": "YAML",
      "yaml_content": "id: no-await-in-promise-all\nlanguage: typescript\nrule:\n  pattern: await $A\n  inside:\n    pattern: Promise.all($_)\n    stopBy:\n      not: { any: [{kind: array}, {kind: arguments}] }\nfix: $A"
    },
    {
      "content": "## Find Import Identifiers\n\n- [Playground Link](https://ast-grep.github.io/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6InR5cGVzY3JpcHQiLCJxdWVyeSI6ImNvbnNvbGUubG9nKCRNQVRDSCkiLCJyZXdyaXRlIjoibG9nZ2VyLmxvZygkTUFUQ0gpIiwic3RyaWN0bmVzcyI6InNtYXJ0Iiwic2VsZWN0b3IiOiIiLCJjb25maWciOiIjIGZpbmQtYWxsLWltcG9ydHMtYW5kLXJlcXVpcmVzLnlhbWxcbmlkOiBmaW5kLWFsbC1pbXBvcnRzLWFuZC1yZXF1aXJlc1xubGFuZ3VhZ2U6IFR5cGVTY3JpcHRcbm1lc3NhZ2U6IEZvdW5kIG1vZHVsZSBpbXBvcnQgb3IgcmVxdWlyZS5cbnNldmVyaXR5OiBpbmZvXG5ydWxlOlxuICBhbnk6XG4gICAgIyBBTElBUyBJTVBPUlRTXG4gICAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAjIGltcG9ydCB7IE9SSUdJTkFMIGFzIEFMSUFTIH0gZnJvbSAnU09VUkNFJ1xuICAgICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLSBhbGw6XG4gICAgICAgICMgMS4gVGFyZ2V0IHRoZSBzcGVjaWZpYyBub2RlIHR5cGUgZm9yIG5hbWVkIGltcG9ydHNcbiAgICAgICAgLSBraW5kOiBpbXBvcnRfc3BlY2lmaWVyXG4gICAgICAgICMgMi4gRW5zdXJlIGl0ICpoYXMqIGFuICdhbGlhcycgZmllbGQsIGNhcHR1cmluZyB0aGUgYWxpYXMgaWRlbnRpZmllclxuICAgICAgICAtIGhhczpcbiAgICAgICAgICAgIGZpZWxkOiBhbGlhc1xuICAgICAgICAgICAgcGF0dGVybjogJEFMSUFTXG4gICAgICAgICMgMy4gQ2FwdHVyZSB0aGUgb3JpZ2luYWwgaWRlbnRpZmllciAod2hpY2ggaGFzIHRoZSAnbmFtZScgZmllbGQpXG4gICAgICAgIC0gaGFzOlxuICAgICAgICAgICAgZmllbGQ6IG5hbWVcbiAgICAgICAgICAgIHBhdHRlcm46ICRPUklHSU5BTFxuICAgICAgICAjIDQuIEZpbmQgYW4gQU5DRVNUT1IgaW1wb3J0X3N0YXRlbWVudCBhbmQgY2FwdHVyZSBpdHMgc291cmNlIHBhdGhcbiAgICAgICAgLSBpbnNpZGU6XG4gICAgICAgICAgICBzdG9wQnk6IGVuZCAjIDw8PC0tLSBUaGlzIGlzIHRoZSBrZXkgZml4ISBTZWFyY2ggYW5jZXN0b3JzLlxuICAgICAgICAgICAga2luZDogaW1wb3J0X3N0YXRlbWVudFxuICAgICAgICAgICAgaGFzOiAjIEVuc3VyZSB0aGUgZm91bmQgaW1wb3J0X3N0YXRlbWVudCBoYXMgdGhlIHNvdXJjZSBmaWVsZFxuICAgICAgICAgICAgICBmaWVsZDogc291cmNlXG4gICAgICAgICAgICAgIHBhdHRlcm46ICRTT1VSQ0VcblxuICAgICMgREVGQVVMVCBJTVBPUlRTXG4gICAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAjIGltcG9ydCB7IE9SSUdJTkFMIH0gZnJvbSAnU09VUkNFJ1xuICAgICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLSBhbGw6XG4gICAgICAgIC0ga2luZDogaW1wb3J0X3N0YXRlbWVudFxuICAgICAgICAtIGhhczpcbiAgICAgICAgICAgICMgRW5zdXJlIGl0IGhhcyBhbiBpbXBvcnRfY2xhdXNlLi4uXG4gICAgICAgICAgICBraW5kOiBpbXBvcnRfY2xhdXNlXG4gICAgICAgICAgICBoYXM6XG4gICAgICAgICAgICAgICMgLi4udGhhdCBkaXJlY3RseSBjb250YWlucyBhbiBpZGVudGlmaWVyICh0aGUgZGVmYXVsdCBpbXBvcnQgbmFtZSlcbiAgICAgICAgICAgICAgIyBUaGlzIGlkZW50aWZpZXIgaXMgTk9UIHVuZGVyIGEgJ25hbWVkX2ltcG9ydHMnIG9yICduYW1lc3BhY2VfaW1wb3J0JyBub2RlXG4gICAgICAgICAgICAgIGtpbmQ6IGlkZW50aWZpZXJcbiAgICAgICAgICAgICAgcGF0dGVybjogJERFRkFVTFRfTkFNRVxuICAgICAgICAtIGhhczpcbiAgICAgICAgICAgIGZpZWxkOiBzb3VyY2VcbiAgICAgICAgICAgIHBhdHRlcm46ICRTT1VSQ0VcbiAgICBcbiAgICAjIFJFR1VMQVIgSU1QT1JUU1xuICAgICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgIyBpbXBvcnQgeyBPUklHSU5BTCB9IGZyb20gJ1NPVVJDRSdcbiAgICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC0gYWxsOlxuICAgICAgICAjIDEuIFRhcmdldCB0aGUgc3BlY2lmaWMgbm9kZSB0eXBlIGZvciBuYW1lZCBpbXBvcnRzXG4gICAgICAgIC0ga2luZDogaW1wb3J0X3NwZWNpZmllclxuICAgICAgICAjIDIuIEVuc3VyZSBpdCAqaGFzKiBhbiAnYWxpYXMnIGZpZWxkLCBjYXB0dXJpbmcgdGhlIGFsaWFzIGlkZW50aWZpZXJcbiAgICAgICAgLSBoYXM6XG4gICAgICAgICAgICBmaWVsZDogbmFtZVxuICAgICAgICAgICAgcGF0dGVybjogJE9SSUdJTkFMXG4gICAgICAgICMgNC4gRmluZCBhbiBBTkNFU1RPUiBpbXBvcnRfc3RhdGVtZW50IGFuZCBjYXB0dXJlIGl0cyBzb3VyY2UgcGF0aFxuICAgICAgICAtIGluc2lkZTpcbiAgICAgICAgICAgIHN0b3BCeTogZW5kICMgPDw8LS0tIFRoaXMgaXMgdGhlIGtleSBmaXghIFNlYXJjaCBhbmNlc3RvcnMuXG4gICAgICAgICAgICBraW5kOiBpbXBvcnRfc3RhdGVtZW50XG4gICAgICAgICAgICBoYXM6ICMgRW5zdXJlIHRoZSBmb3VuZCBpbXBvcnRfc3RhdGVtZW50IGhhcyB0aGUgc291cmNlIGZpZWxkXG4gICAgICAgICAgICAgIGZpZWxkOiBzb3VyY2VcbiAgICAgICAgICAgICAgcGF0dGVybjogJFNPVVJDRVxuXG4gICAgIyBEWU5BTUlDIElNUE9SVFMgKFNpbmdsZSBWYXJpYWJsZSBBc3NpZ25tZW50KSBcbiAgICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICMgZWc6IChjb25zdCBWQVJfTkFNRSA9IHJlcXVpcmUoJ1NPVVJDRScpKVxuICAgICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLSBhbGw6XG4gICAgICAgIC0ga2luZDogdmFyaWFibGVfZGVjbGFyYXRvclxuICAgICAgICAtIGhhczpcbiAgICAgICAgICAgIGZpZWxkOiBuYW1lXG4gICAgICAgICAgICBraW5kOiBpZGVudGlmaWVyXG4gICAgICAgICAgICBwYXR0ZXJuOiAkVkFSX05BTUUgIyBDYXB0dXJlIHRoZSBzaW5nbGUgdmFyaWFibGUgbmFtZVxuICAgICAgICAtIGhhczpcbiAgICAgICAgICAgIGZpZWxkOiB2YWx1ZVxuICAgICAgICAgICAgYW55OlxuICAgICAgICAgICAgICAjIERpcmVjdCBjYWxsXG4gICAgICAgICAgICAgIC0gYWxsOiAjIFdyYXAgY29uZGl0aW9ucyBpbiBhbGxcbiAgICAgICAgICAgICAgICAgIC0ga2luZDogY2FsbF9leHByZXNzaW9uXG4gICAgICAgICAgICAgICAgICAtIGhhczogeyBmaWVsZDogZnVuY3Rpb24sIHJlZ2V4OiAnXihyZXF1aXJlfGltcG9ydCkkJyB9XG4gICAgICAgICAgICAgICAgICAtIGhhczogeyBmaWVsZDogYXJndW1lbnRzLCBoYXM6IHsga2luZDogc3RyaW5nLCBwYXR0ZXJuOiAkU09VUkNFIH0gfSAjIENhcHR1cmUgc291cmNlXG4gICAgICAgICAgICAgICMgQXdhaXRlZCBjYWxsXG4gICAgICAgICAgICAgIC0ga2luZDogYXdhaXRfZXhwcmVzc2lvblxuICAgICAgICAgICAgICAgIGhhczpcbiAgICAgICAgICAgICAgICAgIGFsbDogIyBXcmFwIGNvbmRpdGlvbnMgaW4gYWxsXG4gICAgICAgICAgICAgICAgICAgIC0ga2luZDogY2FsbF9leHByZXNzaW9uXG4gICAgICAgICAgICAgICAgICAgIC0gaGFzOiB7IGZpZWxkOiBmdW5jdGlvbiwgcmVnZXg6ICdeKHJlcXVpcmV8aW1wb3J0KSQnIH1cbiAgICAgICAgICAgICAgICAgICAgLSBoYXM6IHsgZmllbGQ6IGFyZ3VtZW50cywgaGFzOiB7IGtpbmQ6IHN0cmluZywgcGF0dGVybjogJFNPVVJDRSB9IH0gIyBDYXB0dXJlIHNvdXJjZVxuXG4gICAgIyBEWU5BTUlDIElNUE9SVFMgKERlc3RydWN0dXJlZCBTaG9ydGhhbmQgQXNzaWdubWVudCkgICAgIFxuICAgICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgIyBlZzogKGNvbnN0IHsgT1JJR0lOQUwgfSA9IHJlcXVpcmUoJ1NPVVJDRScpKVxuICAgICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLSBhbGw6XG4gICAgICAgICMgMS4gVGFyZ2V0IHRoZSBzaG9ydGhhbmQgaWRlbnRpZmllciB3aXRoaW4gdGhlIHBhdHRlcm5cbiAgICAgICAgLSBraW5kOiBzaG9ydGhhbmRfcHJvcGVydHlfaWRlbnRpZmllcl9wYXR0ZXJuXG4gICAgICAgIC0gcGF0dGVybjogJE9SSUdJTkFMXG4gICAgICAgICMgMi4gRW5zdXJlIGl0J3MgaW5zaWRlIGFuIG9iamVjdF9wYXR0ZXJuIHRoYXQgaXMgdGhlIG5hbWUgb2YgYSB2YXJpYWJsZV9kZWNsYXJhdG9yXG4gICAgICAgIC0gaW5zaWRlOlxuICAgICAgICAgICAga2luZDogb2JqZWN0X3BhdHRlcm5cbiAgICAgICAgICAgIGluc2lkZTogIyBDaGVjayB0aGUgdmFyaWFibGVfZGVjbGFyYXRvciBpdCBiZWxvbmdzIHRvXG4gICAgICAgICAgICAgIGtpbmQ6IHZhcmlhYmxlX2RlY2xhcmF0b3JcbiAgICAgICAgICAgICAgIyAzLiBDaGVjayB0aGUgdmFsdWUgYXNzaWduZWQgYnkgdGhlIHZhcmlhYmxlX2RlY2xhcmF0b3JcbiAgICAgICAgICAgICAgaGFzOlxuICAgICAgICAgICAgICAgIGZpZWxkOiB2YWx1ZVxuICAgICAgICAgICAgICAgIGFueTpcbiAgICAgICAgICAgICAgICAgICMgRGlyZWN0IGNhbGxcbiAgICAgICAgICAgICAgICAgIC0gYWxsOlxuICAgICAgICAgICAgICAgICAgICAgIC0ga2luZDogY2FsbF9leHByZXNzaW9uXG4gICAgICAgICAgICAgICAgICAgICAgLSBoYXM6IHsgZmllbGQ6IGZ1bmN0aW9uLCByZWdleDogJ14ocmVxdWlyZXxpbXBvcnQpJCcgfVxuICAgICAgICAgICAgICAgICAgICAgIC0gaGFzOiB7IGZpZWxkOiBhcmd1bWVudHMsIGhhczogeyBraW5kOiBzdHJpbmcsIHBhdHRlcm46ICRTT1VSQ0UgfSB9ICMgQ2FwdHVyZSBzb3VyY2VcbiAgICAgICAgICAgICAgICAgICMgQXdhaXRlZCBjYWxsXG4gICAgICAgICAgICAgICAgICAtIGtpbmQ6IGF3YWl0X2V4cHJlc3Npb25cbiAgICAgICAgICAgICAgICAgICAgaGFzOlxuICAgICAgICAgICAgICAgICAgICAgIGFsbDpcbiAgICAgICAgICAgICAgICAgICAgICAgIC0ga2luZDogY2FsbF9leHByZXNzaW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAtIGhhczogeyBmaWVsZDogZnVuY3Rpb24sIHJlZ2V4OiAnXihyZXF1aXJlfGltcG9ydCkkJyB9XG4gICAgICAgICAgICAgICAgICAgICAgICAtIGhhczogeyBmaWVsZDogYXJndW1lbnRzLCBoYXM6IHsga2luZDogc3RyaW5nLCBwYXR0ZXJuOiAkU09VUkNFIH0gfSAjIENhcHR1cmUgc291cmNlXG4gICAgICAgICAgICAgIHN0b3BCeTogZW5kICMgU2VhcmNoIGFuY2VzdG9ycyB0byBmaW5kIHRoZSBjb3JyZWN0IHZhcmlhYmxlX2RlY2xhcmF0b3JcblxuICAgICMgRFlOQU1JQyBJTVBPUlRTIChEZXN0cnVjdHVyZWQgQWxpYXMgQXNzaWdubWVudCkgXG4gICAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAjIGVnOiAoY29uc3QgeyBPUklHSU5BTDogQUxJQVMgfSA9IHJlcXVpcmUoJ1NPVVJDRScpKVxuICAgICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLSBhbGw6XG4gICAgICAgICMgMS4gVGFyZ2V0IHRoZSBwYWlyX3BhdHRlcm4gZm9yIGFsaWFzZWQgZGVzdHJ1Y3R1cmluZ1xuICAgICAgICAtIGtpbmQ6IHBhaXJfcGF0dGVyblxuICAgICAgICAjIDIuIENhcHR1cmUgdGhlIG9yaWdpbmFsIGlkZW50aWZpZXIgKGtleSlcbiAgICAgICAgLSBoYXM6XG4gICAgICAgICAgICBmaWVsZDoga2V5XG4gICAgICAgICAgICBraW5kOiBwcm9wZXJ0eV9pZGVudGlmaWVyICMgQ291bGQgYmUgc3RyaW5nL251bWJlciBsaXRlcmFsIHRvbywgYnV0IHByb3BlcnR5X2lkZW50aWZpZXIgaXMgY29tbW9uXG4gICAgICAgICAgICBwYXR0ZXJuOiAkT1JJR0lOQUxcbiAgICAgICAgIyAzLiBDYXB0dXJlIHRoZSBhbGlhcyBpZGVudGlmaWVyICh2YWx1ZSlcbiAgICAgICAgLSBoYXM6XG4gICAgICAgICAgICBmaWVsZDogdmFsdWVcbiAgICAgICAgICAgIGtpbmQ6IGlkZW50aWZpZXJcbiAgICAgICAgICAgIHBhdHRlcm46ICRBTElBU1xuICAgICAgICAjIDQuIEVuc3VyZSBpdCdzIGluc2lkZSBhbiBvYmplY3RfcGF0dGVybiB0aGF0IGlzIHRoZSBuYW1lIG9mIGEgdmFyaWFibGVfZGVjbGFyYXRvclxuICAgICAgICAtIGluc2lkZTpcbiAgICAgICAgICAgIGtpbmQ6IG9iamVjdF9wYXR0ZXJuXG4gICAgICAgICAgICBpbnNpZGU6ICMgQ2hlY2sgdGhlIHZhcmlhYmxlX2RlY2xhcmF0b3IgaXQgYmVsb25ncyB0b1xuICAgICAgICAgICAgICBraW5kOiB2YXJpYWJsZV9kZWNsYXJhdG9yXG4gICAgICAgICAgICAgICMgNS4gQ2hlY2sgdGhlIHZhbHVlIGFzc2lnbmVkIGJ5IHRoZSB2YXJpYWJsZV9kZWNsYXJhdG9yXG4gICAgICAgICAgICAgIGhhczpcbiAgICAgICAgICAgICAgICBmaWVsZDogdmFsdWVcbiAgICAgICAgICAgICAgICBhbnk6XG4gICAgICAgICAgICAgICAgICAjIERpcmVjdCBjYWxsXG4gICAgICAgICAgICAgICAgICAtIGFsbDpcbiAgICAgICAgICAgICAgICAgICAgICAtIGtpbmQ6IGNhbGxfZXhwcmVzc2lvblxuICAgICAgICAgICAgICAgICAgICAgIC0gaGFzOiB7IGZpZWxkOiBmdW5jdGlvbiwgcmVnZXg6ICdeKHJlcXVpcmV8aW1wb3J0KSQnIH1cbiAgICAgICAgICAgICAgICAgICAgICAtIGhhczogeyBmaWVsZDogYXJndW1lbnRzLCBoYXM6IHsga2luZDogc3RyaW5nLCBwYXR0ZXJuOiAkU09VUkNFIH0gfSAjIENhcHR1cmUgc291cmNlXG4gICAgICAgICAgICAgICAgICAjIEF3YWl0ZWQgY2FsbFxuICAgICAgICAgICAgICAgICAgLSBraW5kOiBhd2FpdF9leHByZXNzaW9uXG4gICAgICAgICAgICAgICAgICAgIGhhczpcbiAgICAgICAgICAgICAgICAgICAgICBhbGw6XG4gICAgICAgICAgICAgICAgICAgICAgICAtIGtpbmQ6IGNhbGxfZXhwcmVzc2lvblxuICAgICAgICAgICAgICAgICAgICAgICAgLSBoYXM6IHsgZmllbGQ6IGZ1bmN0aW9uLCByZWdleDogJ14ocmVxdWlyZXxpbXBvcnQpJCcgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLSBoYXM6IHsgZmllbGQ6IGFyZ3VtZW50cywgaGFzOiB7IGtpbmQ6IHN0cmluZywgcGF0dGVybjogJFNPVVJDRSB9IH0gIyBDYXB0dXJlIHNvdXJjZVxuICAgICAgICAgICAgICBzdG9wQnk6IGVuZCAjIFNlYXJjaCBhbmNlc3RvcnMgdG8gZmluZCB0aGUgY29ycmVjdCB2YXJpYWJsZV9kZWNsYXJhdG9yXG4gICAgICAgICAgICBzdG9wQnk6IGVuZCAjIEVuc3VyZSB3ZSBjaGVjayBhbmNlc3RvcnMgZm9yIHRoZSB2YXJpYWJsZV9kZWNsYXJhdG9yXG5cbiAgICAjIERZTkFNSUMgSU1QT1JUUyAoU2lkZSBFZmZlY3QgLyBTb3VyY2UgT25seSkgXG4gICAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAjIGVnOiAocmVxdWlyZSgnU09VUkNFJykpXG4gICAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAtIGFsbDpcbiAgICAgICAgLSBraW5kOiBzdHJpbmcgIyBUYXJnZXQgdGhlIHNvdXJjZSBzdHJpbmcgbGl0ZXJhbCBkaXJlY3RseVxuICAgICAgICAtIHBhdHRlcm46ICRTT1VSQ0VcbiAgICAgICAgLSBpbnNpZGU6ICMgU3RyaW5nIG11c3QgYmUgdGhlIGFyZ3VtZW50IG9mIHJlcXVpcmUoKSBvciBpbXBvcnQoKVxuICAgICAgICAgICAga2luZDogYXJndW1lbnRzXG4gICAgICAgICAgICBwYXJlbnQ6XG4gICAgICAgICAgICAgIGtpbmQ6IGNhbGxfZXhwcmVzc2lvblxuICAgICAgICAgICAgICBoYXM6XG4gICAgICAgICAgICAgICAgZmllbGQ6IGZ1bmN0aW9uXG4gICAgICAgICAgICAgICAgIyBNYXRjaCAncmVxdWlyZScgaWRlbnRpZmllciBvciAnaW1wb3J0JyBrZXl3b3JkIHVzZWQgZHluYW1pY2FsbHlcbiAgICAgICAgICAgICAgICByZWdleDogJ14ocmVxdWlyZXxpbXBvcnQpJCdcbiAgICAgICAgICAgIHN0b3BCeTogZW5kICMgU2VhcmNoIGFuY2VzdG9ycyBpZiBuZWVkZWQgKGZvciB0aGUgYXJndW1lbnRzL2NhbGxfZXhwcmVzc2lvbilcbiAgICAgICAgLSBub3Q6XG4gICAgICAgICAgICBpbnNpZGU6XG4gICAgICAgICAgICAgIGtpbmQ6IGxleGljYWxfZGVjbGFyYXRpb25cbiAgICAgICAgICAgICAgc3RvcEJ5OiBlbmQgIyBTZWFyY2ggYWxsIGFuY2VzdG9ycyB1cCB0byB0aGUgcm9vdFxuXG4gICAgIyBOQU1FU1BBQ0UgSU1QT1JUUyBcbiAgICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICMgZWc6IChpbXBvcnQgKiBhcyBucyBmcm9tICdtb2QnKVxuICAgICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLSBhbGw6XG4gICAgICAgIC0ga2luZDogaW1wb3J0X3N0YXRlbWVudFxuICAgICAgICAtIGhhczpcbiAgICAgICAgICAgIGtpbmQ6IGltcG9ydF9jbGF1c2VcbiAgICAgICAgICAgIGhhczpcbiAgICAgICAgICAgICAga2luZDogbmFtZXNwYWNlX2ltcG9ydFxuICAgICAgICAgICAgICBoYXM6XG4gICAgICAgICAgICAgICAgIyBuYW1lc3BhY2VfaW1wb3J0J3MgY2hpbGQgaWRlbnRpZmllciBpcyB0aGUgYWxpYXNcbiAgICAgICAgICAgICAgICBraW5kOiBpZGVudGlmaWVyXG4gICAgICAgICAgICAgICAgcGF0dGVybjogJE5BTUVTUEFDRV9BTElBU1xuICAgICAgICAtIGhhczpcbiAgICAgICAgICAgIGZpZWxkOiBzb3VyY2VcbiAgICAgICAgICAgIHBhdHRlcm46ICRTT1VSQ0VcblxuICAgICMgU0lERSBFRkZFQ1QgSU1QT1JUUyBcbiAgICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICMgZWc6IChpbXBvcnQgJ21vZCcpXG4gICAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAtIGFsbDpcbiAgICAgICAgLSBraW5kOiBpbXBvcnRfc3RhdGVtZW50XG4gICAgICAgIC0gbm90OiAjIE11c3QgTk9UIGhhdmUgYW4gaW1wb3J0X2NsYXVzZVxuICAgICAgICAgICAgaGFzOiB7IGtpbmQ6IGltcG9ydF9jbGF1c2UgfVxuICAgICAgICAtIGhhczogIyBCdXQgbXVzdCBoYXZlIGEgc291cmNlXG4gICAgICAgICAgICBmaWVsZDogc291cmNlXG4gICAgICAgICAgICBwYXR0ZXJuOiAkU09VUkNFXG4iLCJzb3VyY2UiOiIvL0B0cy1ub2NoZWNrXG4vLyBOYW1lZCBpbXBvcnRcbmltcG9ydCB7IHRlc3RpbmcgfSBmcm9tICcuL3Rlc3RzJztcblxuLy8gQWxpYXNlZCBpbXBvcnRcbmltcG9ydCB7IHRlc3RpbmcgYXMgdGVzdCB9IGZyb20gJy4vdGVzdHMyJztcblxuLy8gRGVmYXVsdCBpbXBvcnRcbmltcG9ydCBoZWxsbyBmcm9tICdoZWxsb193b3JsZDEnO1xuXG4vLyBOYW1lc3BhY2UgaW1wb3J0XG5pbXBvcnQgKiBhcyBzb21ldGhpbmcgZnJvbSAnaGVsbG9fd29ybGQyJztcblxuLy8gU2lkZS1lZmZlY3QgaW1wb3J0XG5pbXBvcnQgJ0BmYXN0aWZ5L3N0YXRpYyc7XG5cbi8vIFR5cGUgaW1wb3J0XG5pbXBvcnQge3R5cGUgaGVsbG8xMjQzIGFzIHRlc3Rpbmd9IGZyb20gJ2hlbGxvJztcblxuLy8gUmVxdWlyZSBwYXR0ZXJuc1xuY29uc3QgbW9kID0gcmVxdWlyZSgnc29tZS1tb2R1bGUnKTtcbnJlcXVpcmUoJ3BvbHlmaWxsJyk7XG5cbi8vIERlc3RydWN0dXJlZCByZXF1aXJlXG5jb25zdCB7IHRlc3QxMjIsIHRlc3QyIH0gPSByZXF1aXJlKCcuL2Rlc3RydWN0dXJlZDEnKTtcbi8vIEFsaWFzZWQgcmVxdWlyZVxuY29uc3QgeyB0ZXN0MTIyOiB0ZXN0MTIzLCB0ZXN0MjogdGVzdDIzLCB0ZXN0MzogdGVzdDMzIH0gPSByZXF1aXJlKCcuL2Rlc3RydWN0dXJlZDInKTtcblxuLy8gTWl4ZWQgaW1wb3J0c1xuaW1wb3J0IGRlZmF1bHRFeHBvcnQsIHsgbmFtZWRFeHBvcnQgfSBmcm9tICcuL21peGVkJztcbmltcG9ydCBkZWZhdWx0RXhwb3J0MiwgKiBhcyBuYW1lc3BhY2UgZnJvbSAnLi9taXhlZDInO1xuXG5cbi8vIE11bHRpcGxlIGltcG9ydCBsaW5lcyBmcm9tIHRoZSBzYW1lIGZpbGVcbmltcG9ydCB7IG9uZSwgdHdvIGFzIGFsaWFzLCB0aHJlZSB9IGZyb20gJy4vbXVsdGlwbGUnO1xuaW1wb3J0IHsgbmV2ZXIsIGdvbm5hLCBnaXZlLCB5b3UsIHVwIH0gZnJvbSAnLi9tdWx0aXBsZSc7XG5cbi8vIFN0cmluZyBsaXRlcmFsIHZhcmlhdGlvbnNcbmltcG9ydCB7IHRlc3QxIH0gZnJvbSBcIi4vZG91YmxlLXF1b3RlZFwiO1xuaW1wb3J0IHsgdGVzdDIgfSBmcm9tICcuL3NpbmdsZS1xdW90ZWQnO1xuXG4vLyBNdWx0aWxpbmUgaW1wb3J0c1xuaW1wb3J0IHtcbiAgICBsb25nSW1wb3J0MSxcbiAgICBsb25nSW1wb3J0MiBhcyBhbGlhczIsXG4gICAgbG9uZ0ltcG9ydDNcbn0gZnJvbSAnLi9tdWx0aWxpbmUnO1xuXG4vLyBEeW5hbWljIGltcG9ydHNcbmNvbnN0IGR5bmFtaWNNb2R1bGUgPSBpbXBvcnQoJy4vZHluYW1pYzEnKTtcbmNvbnN0IHt0ZXN0aW5nLCB0ZXN0aW5nMTIzfSA9IGltcG9ydCgnLi9keW5hbWljMicpO1xuY29uc3QgYXN5bmNEeW5hbWljTW9kdWxlID0gYXdhaXQgaW1wb3J0KCcuL2FzeW5jX2R5bmFtaWMxJykudGhlbihtb2R1bGUgPT4gbW9kdWxlLmRlZmF1bHQpO1xuLy8gQWxpYXNlZCBkeW5hbWljIGltcG9ydFxuY29uc3QgeyBvcmlnaW5hbElkZW50aWZpZXI6IGFsaWFzZWREeW5hbWljSW1wb3J0fSA9IGF3YWl0IGltcG9ydCgnLi9hc3luY19keW5hbWljMicpO1xuXG4vLyBDb21tZW50cyBpbiBpbXBvcnRzXG5pbXBvcnQgLyogdGVzdCAqLyB7IFxuICAgIC8vIENvbW1lbnQgaW4gaW1wb3J0XG4gICAgY29tbWVudGVkSW1wb3J0IFxufSBmcm9tICcuL2NvbW1lbnRlZCc7IC8vIEVuZCBvZiBsaW5lIGNvbW1lbnQgXG5cblxuIn0=)\n\n### Description\n\nFinding import metadata can be useful. Below is a comprehensive snippet for extracting identifiers from various import statements:\n\n- Alias Imports (`import { hello as world } from './file'`)\n- Default & Regular Imports (`import test from './my-test`')\n- Dynamic Imports (`require(...)`, and `import(...)`)\n- Side Effect & Namespace Imports (`import * as myCode from './code`')\n\n<!-- Use YAML in the example. Delete this section if use pattern. -->\n\n### YAML\n\n```yaml\n# find-all-imports-and-identifiers.yaml\nid: find-all-imports-and-identifiers\nlanguage: TypeScript\nrule:\n  any:\n    # ALIAS IMPORTS\n    # ------------------------------------------------------------\n    # import { ORIGINAL as ALIAS } from 'SOURCE'\n    # ------------------------------------------------------------\n    - all:\n        # 1. Target the specific node type for named imports\n        - kind: import_specifier\n        # 2. Ensure it *has* an 'alias' field, capturing the alias identifier\n        - has:\n            field: alias\n            pattern: $ALIAS\n        # 3. Capture the original identifier (which has the 'name' field)\n        - has:\n            field: name\n            pattern: $ORIGINAL\n        # 4. Find an ANCESTOR import_statement and capture its source path\n        - inside:\n            stopBy: end # <<<--- Search ancestors.\n            kind: import_statement\n            has: # Ensure the found import_statement has the source field\n              field: source\n              pattern: $SOURCE\n\n    # DEFAULT IMPORTS\n    # ------------------------------------------------------------\n    # import { ORIGINAL } from 'SOURCE'\n    # ------------------------------------------------------------\n    - all:\n        - kind: import_statement\n        - has:\n            # Ensure it has an import_clause...\n            kind: import_clause\n            has:\n              # ...that directly contains an identifier (the default import name)\n              # This identifier is NOT under a 'named_imports' or 'namespace_import' node\n              kind: identifier\n              pattern: $DEFAULT_NAME\n        - has:\n            field: source\n            pattern: $SOURCE\n\n    # REGULAR IMPORTS\n    # ------------------------------------------------------------\n    # import { ORIGINAL } from 'SOURCE'\n    # ------------------------------------------------------------\n    - all:\n        # 1. Target the specific node type for named imports\n        - kind: import_specifier\n        # 2. Ensure it *has* an 'alias' field, capturing the alias identifier\n        - has:\n            field: name\n            pattern: $ORIGINAL\n        # 4. Find an ANCESTOR import_statement and capture its source path\n        - inside:\n            stopBy: end # <<<--- This is the key fix! Search ancestors.\n            kind: import_statement\n            has: # Ensure the found import_statement has the source field\n              field: source\n              pattern: $SOURCE\n\n    # DYNAMIC IMPORTS (Single Variable Assignment)\n    # ------------------------------------------------------------\n    # const VAR_NAME = require('SOURCE')\n    # ------------------------------------------------------------\n    - all:\n        - kind: variable_declarator\n        - has:\n            field: name\n            kind: identifier\n            pattern: $VAR_NAME # Capture the single variable name\n        - has:\n            field: value\n            any:\n              # Direct call\n              - all: # Wrap conditions in all\n                  - kind: call_expression\n                  - has: { field: function, regex: '^(require|import)$' }\n                  - has: { field: arguments, has: { kind: string, pattern: $SOURCE } } # Capture source\n              # Awaited call\n              - kind: await_expression\n                has:\n                  all: # Wrap conditions in all\n                    - kind: call_expression\n                    - has: { field: function, regex: '^(require|import)$' }\n                    - has: { field: arguments, has: { kind: string, pattern: $SOURCE } } # Capture source\n\n    # DYNAMIC IMPORTS (Destructured Shorthand Assignment)\n    # ------------------------------------------------------------\n    # const { ORIGINAL } = require('SOURCE')\n    # ------------------------------------------------------------\n    - all:\n        # 1. Target the shorthand identifier within the pattern\n        - kind: shorthand_property_identifier_pattern\n        - pattern: $ORIGINAL\n        # 2. Ensure it's inside an object_pattern that is the name of a variable_declarator\n        - inside:\n            kind: object_pattern\n            inside: # Check the variable_declarator it belongs to\n              kind: variable_declarator\n              # 3. Check the value assigned by the variable_declarator\n              has:\n                field: value\n                any:\n                  # Direct call\n                  - all:\n                      - kind: call_expression\n                      - has: { field: function, regex: '^(require|import)$' }\n                      - has: { field: arguments, has: { kind: string, pattern: $SOURCE } } # Capture source\n                  # Awaited call\n                  - kind: await_expression\n                    has:\n                      all:\n                        - kind: call_expression\n                        - has: { field: function, regex: '^(require|import)$' }\n                        - has: { field: arguments, has: { kind: string, pattern: $SOURCE } } # Capture source\n              stopBy: end # Search ancestors to find the correct variable_declarator\n\n    # DYNAMIC IMPORTS (Destructured Alias Assignment)\n    # ------------------------------------------------------------\n    # const { ORIGINAL: ALIAS } = require('SOURCE')\n    # ------------------------------------------------------------\n    - all:\n        # 1. Target the pair_pattern for aliased destructuring\n        - kind: pair_pattern\n        # 2. Capture the original identifier (key)\n        - has:\n            field: key\n            kind: property_identifier # Could be string/number literal too, but property_identifier is common\n            pattern: $ORIGINAL\n        # 3. Capture the alias identifier (value)\n        - has:\n            field: value\n            kind: identifier\n            pattern: $ALIAS\n        # 4. Ensure it's inside an object_pattern that is the name of a variable_declarator\n        - inside:\n            kind: object_pattern\n            inside: # Check the variable_declarator it belongs to\n              kind: variable_declarator\n              # 5. Check the value assigned by the variable_declarator\n              has:\n                field: value\n                any:\n                  # Direct call\n                  - all:\n                      - kind: call_expression\n                      - has: { field: function, regex: '^(require|import)$' }\n                      - has: { field: arguments, has: { kind: string, pattern: $SOURCE } } # Capture source\n                  # Awaited call\n                  - kind: await_expression\n                    has:\n                      all:\n                        - kind: call_expression\n                        - has: { field: function, regex: '^(require|import)$' }\n                        - has: { field: arguments, has: { kind: string, pattern: $SOURCE } } # Capture source\n              stopBy: end # Search ancestors to find the correct variable_declarator\n            stopBy: end # Ensure we check ancestors for the variable_declarator\n\n    # DYNAMIC IMPORTS (Side Effect / Source Only)\n    # ------------------------------------------------------------\n    # require('SOURCE')\n    # ------------------------------------------------------------\n    - all:\n        - kind: string # Target the source string literal directly\n        - pattern: $SOURCE\n        - inside: # String must be the argument of require() or import()\n            kind: arguments\n            parent:\n              kind: call_expression\n              has:\n                field: function\n                # Match 'require' identifier or 'import' keyword used dynamically\n                regex: '^(require|import)$'\n            stopBy: end # Search ancestors if needed (for the arguments/call_expression)\n        - not:\n            inside:\n              kind: lexical_declaration\n              stopBy: end # Search all ancestors up to the root\n\n    # NAMESPACE IMPORTS\n    # ------------------------------------------------------------\n    # import * as ns from 'mod'\n    # ------------------------------------------------------------\n    - all:\n        - kind: import_statement\n        - has:\n            kind: import_clause\n            has:\n              kind: namespace_import\n              has:\n                # namespace_import's child identifier is the alias\n                kind: identifier\n                pattern: $NAMESPACE_ALIAS\n        - has:\n            field: source\n            pattern: $SOURCE\n\n    # SIDE EFFECT IMPORTS\n    # ------------------------------------------------------------\n    # import 'mod'\n    # ------------------------------------------------------------\n    - all:\n        - kind: import_statement\n        - not: # Must NOT have an import_clause\n            has: { kind: import_clause }\n        - has: # But must have a source\n            field: source\n            pattern: $SOURCE\n```\n\n### Example\n\n<!-- highlight matched code in curly-brace {lineNum} -->\n\n```ts {60}\n// @ts-nocheck\n// Named import\nimport { testing } from './tests'\n\n// Aliased import\nimport { testing as test } from './tests2'\n\n// Default import\nimport hello from 'hello_world1'\n\n// Namespace import\nimport * as something from 'hello_world2'\n\n// Side-effect import\nimport '@fastify/static'\n\n// Type import\nimport { type hello1243 as testing } from 'hello'\n\n// Require patterns\nconst mod = require('some-module')\nrequire('polyfill')\n\n// Destructured require\nconst { test122, test2 } = require('./destructured1')\n// Aliased require\nconst { test122: test123, test2: test23, test3: test33 } = require('./destructured2')\n\n// Mixed imports\nimport defaultExport, { namedExport } from './mixed'\nimport defaultExport2, * as namespace from './mixed2'\n\n// Multiple import lines from the same file\nimport { one, three, two as alias } from './multiple'\nimport { give, gonna, never, up, you } from './multiple'\n\n// String literal variations\nimport { test1 } from './double-quoted'\nimport { test2 } from './single-quoted'\n\n// Multiline imports\nimport { longImport1, longImport2 as alias2, longImport3 } from './multiline'\n\n// Dynamic imports\nconst dynamicModule = import('./dynamic1')\nconst { testing, testing123 } = import('./dynamic2')\nconst asyncDynamicModule = await import('./async_dynamic1').then(module => module.default)\n// Aliased dynamic import\nconst { originalIdentifier: aliasedDynamicImport } = await import('./async_dynamic2')\n\n// Comments in imports\nimport /* test */ {\n  // Comment in import\n  commentedImport,\n} from './commented' // End of line comment\n```\n\n### Contributed by\n\n[Michael Angelo Rivera](https://github.com/michaelangeloio)\n",
      "description": "Finding import metadata can be useful. Below is a comprehensive snippet for extracting identifiers from various import statements:\n\n- Alias Imports (`import { hello as world } from './file'`)\n- Default & Regular Imports (`import test from './my-test`')\n- Dynamic Imports (`require(...)`, and `import(...)`)\n- Side Effect & Namespace Imports (`import * as myCode from './code`')\n\n<!-- Use YAML in the example. Delete this section if use pattern. -->",
      "features": [],
      "has_fix": false,
      "id": "find-import-identifiers",
      "language": "typescript",
      "playground_link": "https://ast-grep.github.io/playground.html#",
      "rules": [
        "any",
        "all",
        "kind",
        "has",
        "has",
        "inside",
        "all",
        "kind",
        "has",
        "has",
        "all",
        "kind",
        "has",
        "inside",
        "all",
        "kind",
        "has",
        "has",
        "all",
        "kind",
        "pattern",
        "inside",
        "all",
        "kind",
        "has",
        "has",
        "inside",
        "all",
        "kind",
        "pattern",
        "inside",
        "not",
        "all",
        "kind",
        "has",
        "has",
        "all",
        "kind",
        "not",
        "has"
      ],
      "source_file": "/var/tmp/vibe-kanban/vk-ff35-organized/target/debug/build/organized-grepster-mcp-a639358d381b1d6e/out/ast-grep.github.io/website/catalog/typescript/find-import-identifiers.md",
      "title": "Find Import Identifiers",
      "type": "YAML",
      "yaml_content": "# find-all-imports-and-identifiers.yaml\nid: find-all-imports-and-identifiers\nlanguage: TypeScript\nrule:\n  any:\n    # ALIAS IMPORTS\n    # ------------------------------------------------------------\n    # import { ORIGINAL as ALIAS } from 'SOURCE'\n    # ------------------------------------------------------------\n    - all:\n        # 1. Target the specific node type for named imports\n        - kind: import_specifier\n        # 2. Ensure it *has* an 'alias' field, capturing the alias identifier\n        - has:\n            field: alias\n            pattern: $ALIAS\n        # 3. Capture the original identifier (which has the 'name' field)\n        - has:\n            field: name\n            pattern: $ORIGINAL\n        # 4. Find an ANCESTOR import_statement and capture its source path\n        - inside:\n            stopBy: end # <<<--- Search ancestors.\n            kind: import_statement\n            has: # Ensure the found import_statement has the source field\n              field: source\n              pattern: $SOURCE\n\n    # DEFAULT IMPORTS\n    # ------------------------------------------------------------\n    # import { ORIGINAL } from 'SOURCE'\n    # ------------------------------------------------------------\n    - all:\n        - kind: import_statement\n        - has:\n            # Ensure it has an import_clause...\n            kind: import_clause\n            has:\n              # ...that directly contains an identifier (the default import name)\n              # This identifier is NOT under a 'named_imports' or 'namespace_import' node\n              kind: identifier\n              pattern: $DEFAULT_NAME\n        - has:\n            field: source\n            pattern: $SOURCE\n\n    # REGULAR IMPORTS\n    # ------------------------------------------------------------\n    # import { ORIGINAL } from 'SOURCE'\n    # ------------------------------------------------------------\n    - all:\n        # 1. Target the specific node type for named imports\n        - kind: import_specifier\n        # 2. Ensure it *has* an 'alias' field, capturing the alias identifier\n        - has:\n            field: name\n            pattern: $ORIGINAL\n        # 4. Find an ANCESTOR import_statement and capture its source path\n        - inside:\n            stopBy: end # <<<--- This is the key fix! Search ancestors.\n            kind: import_statement\n            has: # Ensure the found import_statement has the source field\n              field: source\n              pattern: $SOURCE\n\n    # DYNAMIC IMPORTS (Single Variable Assignment)\n    # ------------------------------------------------------------\n    # const VAR_NAME = require('SOURCE')\n    # ------------------------------------------------------------\n    - all:\n        - kind: variable_declarator\n        - has:\n            field: name\n            kind: identifier\n            pattern: $VAR_NAME # Capture the single variable name\n        - has:\n            field: value\n            any:\n              # Direct call\n              - all: # Wrap conditions in all\n                  - kind: call_expression\n                  - has: { field: function, regex: '^(require|import)$' }\n                  - has: { field: arguments, has: { kind: string, pattern: $SOURCE } } # Capture source\n              # Awaited call\n              - kind: await_expression\n                has:\n                  all: # Wrap conditions in all\n                    - kind: call_expression\n                    - has: { field: function, regex: '^(require|import)$' }\n                    - has: { field: arguments, has: { kind: string, pattern: $SOURCE } } # Capture source\n\n    # DYNAMIC IMPORTS (Destructured Shorthand Assignment)\n    # ------------------------------------------------------------\n    # const { ORIGINAL } = require('SOURCE')\n    # ------------------------------------------------------------\n    - all:\n        # 1. Target the shorthand identifier within the pattern\n        - kind: shorthand_property_identifier_pattern\n        - pattern: $ORIGINAL\n        # 2. Ensure it's inside an object_pattern that is the name of a variable_declarator\n        - inside:\n            kind: object_pattern\n            inside: # Check the variable_declarator it belongs to\n              kind: variable_declarator\n              # 3. Check the value assigned by the variable_declarator\n              has:\n                field: value\n                any:\n                  # Direct call\n                  - all:\n                      - kind: call_expression\n                      - has: { field: function, regex: '^(require|import)$' }\n                      - has: { field: arguments, has: { kind: string, pattern: $SOURCE } } # Capture source\n                  # Awaited call\n                  - kind: await_expression\n                    has:\n                      all:\n                        - kind: call_expression\n                        - has: { field: function, regex: '^(require|import)$' }\n                        - has: { field: arguments, has: { kind: string, pattern: $SOURCE } } # Capture source\n              stopBy: end # Search ancestors to find the correct variable_declarator\n\n    # DYNAMIC IMPORTS (Destructured Alias Assignment)\n    # ------------------------------------------------------------\n    # const { ORIGINAL: ALIAS } = require('SOURCE')\n    # ------------------------------------------------------------\n    - all:\n        # 1. Target the pair_pattern for aliased destructuring\n        - kind: pair_pattern\n        # 2. Capture the original identifier (key)\n        - has:\n            field: key\n            kind: property_identifier # Could be string/number literal too, but property_identifier is common\n            pattern: $ORIGINAL\n        # 3. Capture the alias identifier (value)\n        - has:\n            field: value\n            kind: identifier\n            pattern: $ALIAS\n        # 4. Ensure it's inside an object_pattern that is the name of a variable_declarator\n        - inside:\n            kind: object_pattern\n            inside: # Check the variable_declarator it belongs to\n              kind: variable_declarator\n              # 5. Check the value assigned by the variable_declarator\n              has:\n                field: value\n                any:\n                  # Direct call\n                  - all:\n                      - kind: call_expression\n                      - has: { field: function, regex: '^(require|import)$' }\n                      - has: { field: arguments, has: { kind: string, pattern: $SOURCE } } # Capture source\n                  # Awaited call\n                  - kind: await_expression\n                    has:\n                      all:\n                        - kind: call_expression\n                        - has: { field: function, regex: '^(require|import)$' }\n                        - has: { field: arguments, has: { kind: string, pattern: $SOURCE } } # Capture source\n              stopBy: end # Search ancestors to find the correct variable_declarator\n            stopBy: end # Ensure we check ancestors for the variable_declarator\n\n    # DYNAMIC IMPORTS (Side Effect / Source Only)\n    # ------------------------------------------------------------\n    # require('SOURCE')\n    # ------------------------------------------------------------\n    - all:\n        - kind: string # Target the source string literal directly\n        - pattern: $SOURCE\n        - inside: # String must be the argument of require() or import()\n            kind: arguments\n            parent:\n              kind: call_expression\n              has:\n                field: function\n                # Match 'require' identifier or 'import' keyword used dynamically\n                regex: '^(require|import)$'\n            stopBy: end # Search ancestors if needed (for the arguments/call_expression)\n        - not:\n            inside:\n              kind: lexical_declaration\n              stopBy: end # Search all ancestors up to the root\n\n    # NAMESPACE IMPORTS\n    # ------------------------------------------------------------\n    # import * as ns from 'mod'\n    # ------------------------------------------------------------\n    - all:\n        - kind: import_statement\n        - has:\n            kind: import_clause\n            has:\n              kind: namespace_import\n              has:\n                # namespace_import's child identifier is the alias\n                kind: identifier\n                pattern: $NAMESPACE_ALIAS\n        - has:\n            field: source\n            pattern: $SOURCE\n\n    # SIDE EFFECT IMPORTS\n    # ------------------------------------------------------------\n    # import 'mod'\n    # ------------------------------------------------------------\n    - all:\n        - kind: import_statement\n        - not: # Must NOT have an import_clause\n            has: { kind: import_clause }\n        - has: # But must have a source\n            field: source\n            pattern: $SOURCE"
    },
    {
      "content": "## Migrate XState to v5 from v4 <Badge type=\"tip\" text=\"Has Fix\" />\n\n- [Playground Link](/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6ImphdmFzY3JpcHQiLCJxdWVyeSI6ImlmICgkQSkgeyAkJCRCIH0iLCJyZXdyaXRlIjoiaWYgKCEoJEEpKSB7XG4gICAgcmV0dXJuO1xufVxuJCQkQiIsImNvbmZpZyI6InV0aWxzOlxuICBGUk9NX1hTVEFURTogeyBraW5kOiBpbXBvcnRfc3RhdGVtZW50LCBoYXM6IHsga2luZDogc3RyaW5nLCByZWdleDogeHN0YXRlIH0gfVxuICBYU1RBVEVfRVhQT1JUOlxuICAgIGtpbmQ6IGlkZW50aWZpZXJcbiAgICBpbnNpZGU6IHsgaGFzOiB7IG1hdGNoZXM6IEZST01fWFNUQVRFIH0sIHN0b3BCeTogZW5kIH1cbnJ1bGU6IHsgcmVnZXg6IF5NYWNoaW5lfGludGVycHJldCQsIHBhdHRlcm46ICRJTVBPUlQsIG1hdGNoZXM6IFhTVEFURV9FWFBPUlQgfVxudHJhbnNmb3JtOlxuICBTVEVQMTogXG4gICAgcmVwbGFjZToge2J5OiBjcmVhdGUkMSwgcmVwbGFjZTogKE1hY2hpbmUpLCBzb3VyY2U6ICRJTVBPUlQgfVxuICBGSU5BTDpcbiAgICByZXBsYWNlOiB7IGJ5OiBjcmVhdGVBY3RvciwgcmVwbGFjZTogaW50ZXJwcmV0LCBzb3VyY2U6ICRTVEVQMSB9XG5maXg6ICRGSU5BTFxuLS0tIFxucnVsZTogeyBwYXR0ZXJuOiAkTUFDSElORS53aXRoQ29uZmlnIH1cbmZpeDogJE1BQ0hJTkUucHJvdmlkZVxuLS0tXG5ydWxlOlxuICBraW5kOiBwcm9wZXJ0eV9pZGVudGlmaWVyXG4gIHJlZ2V4OiBec2VydmljZXMkXG4gIGluc2lkZTogeyBwYXR0ZXJuOiAgJE0ud2l0aENvbmZpZygkJCRBUkdTKSwgc3RvcEJ5OiBlbmQgfVxuZml4OiBhY3RvcnMiLCJzb3VyY2UiOiJpbXBvcnQgeyBNYWNoaW5lLCBpbnRlcnByZXQgfSBmcm9tICd4c3RhdGUnO1xuXG5jb25zdCBtYWNoaW5lID0gTWFjaGluZSh7IC8qLi4uKi99KTtcblxuY29uc3Qgc3BlY2lmaWNNYWNoaW5lID0gbWFjaGluZS53aXRoQ29uZmlnKHtcbiAgYWN0aW9uczogeyAvKiAuLi4gKi8gfSxcbiAgZ3VhcmRzOiB7IC8qIC4uLiAqLyB9LFxuICBzZXJ2aWNlczogeyAvKiAuLi4gKi8gfSxcbn0pO1xuXG5jb25zdCBhY3RvciA9IGludGVycHJldChzcGVjaWZpY01hY2hpbmUsIHtcbi8qIGFjdG9yIG9wdGlvbnMgKi9cbn0pOyJ9)\n\n### Description\n\n[XState](https://xstate.js.org/) is a state management/orchestration library based on state machines, statecharts, and the actor model. It allows you to model complex logic in event-driven ways, and orchestrate the behavior of many actors communicating with each other.\n\nXState's v5 version introduced some breaking changes and new features compared to v4.\nWhile the migration should be a straightforward process, it is a tedious process and requires knowledge of the differences between v4 and v5.\n\nast-grep provides a way to automate the process and a way to encode valuable knowledge to executable rules.\n\nThe following example picks up some migration items and demonstrates the power of ast-grep's rule system.\n\n### YAML\n\nThe rules below correspond to XState v5's [`createMachine`](https://stately.ai/docs/migration#use-createmachine-not-machine), [`createActor`](https://stately.ai/docs/migration#use-createactor-not-interpret), and [`machine.provide`](https://stately.ai/docs/migration#use-machineprovide-not-machinewithconfig).\n\nThe example shows how ast-grep can use various features like [utility rule](/guide/rule-config/utility-rule.html), [transformation](/reference/yaml/transformation.html) and [multiple rule in single file](/reference/playground.html#test-multiple-rules) to automate the migration. Each rule has a clear and descriptive `id` field that explains its purpose.\n\nFor more information, you can use [Codemod AI](https://app.codemod.com/studio?ai_thread_id=new) to provide more detailed explanation for each rule.\n\n```yaml\nid: migrate-import-name\nutils:\n  FROM_XS: {kind: import_statement, has: {kind: string, regex: xstate}}\n  XS_EXPORT:\n    kind: identifier\n    inside: { has: { matches: FROM_XS }, stopBy: end }\nrule: { regex: ^Machine|interpret$, pattern: $IMPT, matches: XS_EXPORT }\ntransform:\n  STEP1:\n    replace: {by: create$1, replace: (Machine), source: $IMPT }\n  FINAL:\n    replace: { by: createActor, replace: interpret, source: $STEP1 }\nfix: $FINAL\n\n---\n\nid: migrate-to-provide\nrule: { pattern: $MACHINE.withConfig }\nfix: $MACHINE.provide\n\n---\n\nid: migrate-to-actors\nrule:\n  kind: property_identifier\n  regex: ^services$\n  inside: { pattern:  $M.withConfig($$$ARGS), stopBy: end }\nfix: actors\n```\n\n### Example\n\n<!-- highlight matched code in curly-brace {lineNum} -->\n\n```js {1,3,5,8,11}\nimport { interpret, Machine } from 'xstate'\n\nconst machine = Machine({/*...*/})\n\nconst specificMachine = machine.withConfig({\n  actions: {/* ... */},\n  guards: {/* ... */},\n  services: {/* ... */},\n})\n\nconst actor = interpret(specificMachine, {\n  /* actor options */\n})\n```\n\n### Diff\n\n<!-- use // [!code --] and // [!code ++] to annotate diff -->\n\n```js\nimport { Machine, interpret } from 'xstate'; // [!code --]\nimport { createMachine, createActor } from 'xstate'; // [!code ++]\n\nconst machine = Machine({ /*...*/}); // [!code --]\nconst machine = createMachine({ /*...*/}); // [!code ++]\n\nconst specificMachine = machine.withConfig({ // [!code --]\nconst specificMachine = machine.provide({ // [!code ++]\n  actions: { /* ... */ },\n  guards: { /* ... */ },\n  services: { /* ... */ }, // [!code --]\n  actors: { /* ... */ }, // [!code ++]\n});\n\nconst actor = interpret(specificMachine, { // [!code --]\nconst actor = createActor(specificMachine, { // [!code ++]\n  /* actor options */\n});\n```\n\n### Contributed by\n\nInspired by [XState's blog](https://stately.ai/blog/2023-12-01-xstate-v5).\n",
      "description": "[XState](https://xstate.js.org/) is a state management/orchestration library based on state machines, statecharts, and the actor model. It allows you to model complex logic in event-driven ways, and orchestrate the behavior of many actors communicating with each other.\n\nXState's v5 version introduced some breaking changes and new features compared to v4.\nWhile the migration should be a straightforward process, it is a tedious process and requires knowledge of the differences between v4 and v5.\n\nast-grep provides a way to automate the process and a way to encode valuable knowledge to executable rules.\n\nThe following example picks up some migration items and demonstrates the power of ast-grep's rule system.",
      "features": [
        "utils",
        "transform"
      ],
      "has_fix": true,
      "id": "migrate-xstate-v5",
      "language": "typescript",
      "playground_link": "/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6ImphdmFzY3JpcHQiLCJxdWVyeSI6ImlmICgkQSkgeyAkJCRCIH0iLCJyZXdyaXRlIjoiaWYgKCEoJEEpKSB7XG4gICAgcmV0dXJuO1xufVxuJCQkQiIsImNvbmZpZyI6InV0aWxzOlxuICBGUk9NX1hTVEFURTogeyBraW5kOiBpbXBvcnRfc3RhdGVtZW50LCBoYXM6IHsga2luZDogc3RyaW5nLCByZWdleDogeHN0YXRlIH0gfVxuICBYU1RBVEVfRVhQT1JUOlxuICAgIGtpbmQ6IGlkZW50aWZpZXJcbiAgICBpbnNpZGU6IHsgaGFzOiB7IG1hdGNoZXM6IEZST01fWFNUQVRFIH0sIHN0b3BCeTogZW5kIH1cbnJ1bGU6IHsgcmVnZXg6IF5NYWNoaW5lfGludGVycHJldCQsIHBhdHRlcm46ICRJTVBPUlQsIG1hdGNoZXM6IFhTVEFURV9FWFBPUlQgfVxudHJhbnNmb3JtOlxuICBTVEVQMTogXG4gICAgcmVwbGFjZToge2J5OiBjcmVhdGUkMSwgcmVwbGFjZTogKE1hY2hpbmUpLCBzb3VyY2U6ICRJTVBPUlQgfVxuICBGSU5BTDpcbiAgICByZXBsYWNlOiB7IGJ5OiBjcmVhdGVBY3RvciwgcmVwbGFjZTogaW50ZXJwcmV0LCBzb3VyY2U6ICRTVEVQMSB9XG5maXg6ICRGSU5BTFxuLS0tIFxucnVsZTogeyBwYXR0ZXJuOiAkTUFDSElORS53aXRoQ29uZmlnIH1cbmZpeDogJE1BQ0hJTkUucHJvdmlkZVxuLS0tXG5ydWxlOlxuICBraW5kOiBwcm9wZXJ0eV9pZGVudGlmaWVyXG4gIHJlZ2V4OiBec2VydmljZXMkXG4gIGluc2lkZTogeyBwYXR0ZXJuOiAgJE0ud2l0aENvbmZpZygkJCRBUkdTKSwgc3RvcEJ5OiBlbmQgfVxuZml4OiBhY3RvcnMiLCJzb3VyY2UiOiJpbXBvcnQgeyBNYWNoaW5lLCBpbnRlcnByZXQgfSBmcm9tICd4c3RhdGUnO1xuXG5jb25zdCBtYWNoaW5lID0gTWFjaGluZSh7IC8qLi4uKi99KTtcblxuY29uc3Qgc3BlY2lmaWNNYWNoaW5lID0gbWFjaGluZS53aXRoQ29uZmlnKHtcbiAgYWN0aW9uczogeyAvKiAuLi4gKi8gfSxcbiAgZ3VhcmRzOiB7IC8qIC4uLiAqLyB9LFxuICBzZXJ2aWNlczogeyAvKiAuLi4gKi8gfSxcbn0pO1xuXG5jb25zdCBhY3RvciA9IGludGVycHJldChzcGVjaWZpY01hY2hpbmUsIHtcbi8qIGFjdG9yIG9wdGlvbnMgKi9cbn0pOyJ9",
      "rules": [
        "regex",
        "pattern",
        "matches"
      ],
      "source_file": "/var/tmp/vibe-kanban/vk-ff35-organized/target/debug/build/organized-grepster-mcp-a639358d381b1d6e/out/ast-grep.github.io/website/catalog/typescript/migrate-xstate-v5.md",
      "title": "Migrate XState to v5 from v4",
      "type": "YAML",
      "yaml_content": "id: migrate-import-name\nutils:\n  FROM_XS: {kind: import_statement, has: {kind: string, regex: xstate}}\n  XS_EXPORT:\n    kind: identifier\n    inside: { has: { matches: FROM_XS }, stopBy: end }\nrule: { regex: ^Machine|interpret$, pattern: $IMPT, matches: XS_EXPORT }\ntransform:\n  STEP1:\n    replace: {by: create$1, replace: (Machine), source: $IMPT }\n  FINAL:\n    replace: { by: createActor, replace: interpret, source: $STEP1 }\nfix: $FINAL\n\n---\n\nid: migrate-to-provide\nrule: { pattern: $MACHINE.withConfig }\nfix: $MACHINE.provide\n\n---\n\nid: migrate-to-actors\nrule:\n  kind: property_identifier\n  regex: ^services$\n  inside: { pattern:  $M.withConfig($$$ARGS), stopBy: end }\nfix: actors"
    },
    {
      "content": "## No `console` except in `catch` block <Badge type=\"tip\" text=\"Has Fix\" />\n\n- [Playground Link](/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6ImphdmFzY3JpcHQiLCJxdWVyeSI6ImlmICRBLmhhc19mZWF0dXJlP1xuICAgICQkJEJcbmVsc2UgXG4gICAgJCQkQyBcbmVuZCAiLCJyZXdyaXRlIjoiJCQkQiIsImNvbmZpZyI6InJ1bGU6XG4gIGFueTpcbiAgICAtIHBhdHRlcm46IGNvbnNvbGUuZXJyb3IoJCQkKVxuICAgICAgbm90OlxuICAgICAgICBpbnNpZGU6XG4gICAgICAgICAga2luZDogY2F0Y2hfY2xhdXNlXG4gICAgICAgICAgc3RvcEJ5OiBlbmRcbiAgICAtIHBhdHRlcm46IGNvbnNvbGUuJE1FVEhPRCgkJCQpXG5jb25zdHJhaW50czpcbiAgTUVUSE9EOlxuICAgIHJlZ2V4OiAnbG9nfGRlYnVnfHdhcm4nXG5maXg6ICcnIiwic291cmNlIjoiY29uc29sZS5kZWJ1ZygnJylcbnRyeSB7XG4gICAgY29uc29sZS5sb2coJ2hlbGxvJylcbn0gY2F0Y2ggKGUpIHtcbiAgICBjb25zb2xlLmVycm9yKGUpXG59In0=)\n\n### Description\n\nUsing `console` methods is usually for debugging purposes and therefore not suitable to ship to the client.\n`console` can expose sensitive information, clutter the output, or affect the performance.\n\nThe only exception is using `console.error` to log errors in the catch block, which can be useful for debugging production.\n\n<!-- Use YAML in the example. Delete this section if use pattern. -->\n\n### YAML\n\n```yaml\nid: no-console-except-error\nlanguage: typescript\nrule:\n  any:\n    - pattern: console.error($$$)\n      not:\n        inside:\n          kind: catch_clause\n          stopBy: end\n    - pattern: console.$METHOD($$$)\nconstraints:\n  METHOD:\n    regex: 'log|debug|warn'\n```\n\n### Example\n\n<!-- highlight matched code in curly-brace {lineNum} -->\n\n```ts {1,3}\nconsole.debug('')\ntry {\n  console.log('hello')\n} catch (e) {\n  console.error(e) // OK\n}\n```\n\n### Diff\n\n<!-- use // [!code --] and // [!code ++] to annotate diff -->\n\n```ts\nconsole.debug('') // [!code --]\ntry {\n  console.log('hello') // [!code --]\n} catch (e) {\n  console.error(e) // OK\n}\n```\n\n### Contributed by\n\nInspired by [Jerry Mouse](https://github.com/WWK563388548)\n",
      "description": "Using `console` methods is usually for debugging purposes and therefore not suitable to ship to the client.\n`console` can expose sensitive information, clutter the output, or affect the performance.\n\nThe only exception is using `console.error` to log errors in the catch block, which can be useful for debugging production.\n\n<!-- Use YAML in the example. Delete this section if use pattern. -->",
      "features": [
        "constraints"
      ],
      "has_fix": true,
      "id": "no-console-except-catch",
      "language": "typescript",
      "playground_link": "/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6ImphdmFzY3JpcHQiLCJxdWVyeSI6ImlmICRBLmhhc19mZWF0dXJlP1xuICAgICQkJEJcbmVsc2UgXG4gICAgJCQkQyBcbmVuZCAiLCJyZXdyaXRlIjoiJCQkQiIsImNvbmZpZyI6InJ1bGU6XG4gIGFueTpcbiAgICAtIHBhdHRlcm46IGNvbnNvbGUuZXJyb3IoJCQkKVxuICAgICAgbm90OlxuICAgICAgICBpbnNpZGU6XG4gICAgICAgICAga2luZDogY2F0Y2hfY2xhdXNlXG4gICAgICAgICAgc3RvcEJ5OiBlbmRcbiAgICAtIHBhdHRlcm46IGNvbnNvbGUuJE1FVEhPRCgkJCQpXG5jb25zdHJhaW50czpcbiAgTUVUSE9EOlxuICAgIHJlZ2V4OiAnbG9nfGRlYnVnfHdhcm4nXG5maXg6ICcnIiwic291cmNlIjoiY29uc29sZS5kZWJ1ZygnJylcbnRyeSB7XG4gICAgY29uc29sZS5sb2coJ2hlbGxvJylcbn0gY2F0Y2ggKGUpIHtcbiAgICBjb25zb2xlLmVycm9yKGUpXG59In0=",
      "rules": [
        "any",
        "pattern",
        "not",
        "pattern"
      ],
      "source_file": "/var/tmp/vibe-kanban/vk-ff35-organized/target/debug/build/organized-grepster-mcp-a639358d381b1d6e/out/ast-grep.github.io/website/catalog/typescript/no-console-except-catch.md",
      "title": "No `console` except in `catch` block",
      "type": "YAML",
      "yaml_content": "id: no-console-except-error\nlanguage: typescript\nrule:\n  any:\n    - pattern: console.error($$$)\n      not:\n        inside:\n          kind: catch_clause\n          stopBy: end\n    - pattern: console.$METHOD($$$)\nconstraints:\n  METHOD:\n    regex: 'log|debug|warn'"
    },
    {
      "content": "## Prefer Symbol over Proc <Badge type=\"tip\" text=\"Has Fix\" />\n\n- [Playground Link](/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6InJ1YnkiLCJxdWVyeSI6IiRMSVNULnNlbGVjdCB7IHwkVnwgJFYuJE1FVEhPRCB9IiwicmV3cml0ZSI6IiRMSVNULnNlbGVjdCgmOiRNRVRIT0QpIiwiY29uZmlnIjoiaWQ6IHByZWZlci1zeW1ib2wtb3Zlci1wcm9jXG5ydWxlOlxuICBwYXR0ZXJuOiAkTElTVC4kSVRFUiB7IHwkVnwgJFYuJE1FVEhPRCB9XG5sYW5ndWFnZTogUnVieVxuY29uc3RyYWludHM6XG4gIElURVI6XG4gICAgcmVnZXg6ICdtYXB8c2VsZWN0fGVhY2gnXG5maXg6ICckTElTVC4kSVRFUigmOiRNRVRIT0QpJ1xuIiwic291cmNlIjoiWzEsIDIsIDNdLnNlbGVjdCB7IHx2fCB2LmV2ZW4/IH1cbigxLi4xMDApLmVhY2ggeyB8aXwgaS50b19zIH1cbm5vdF9saXN0Lm5vX21hdGNoIHsgfHZ8IHYuZXZlbj8gfVxuIn0=)\n\n### Description\n\nRuby has a more concise symbol shorthand `&:` to invoke methods.\nThis rule simplifies `proc` to `symbol`.\nThis example is inspired by this [dev.to article](https://dev.to/baweaver/future-of-ruby-ast-tooling-9i1).\n\n<!-- Use YAML in the example. Delete this section if use pattern. -->\n\n### YAML\n\n```yaml\nid: prefer-symbol-over-proc\nlanguage: ruby\nrule:\n  pattern: $LIST.$ITER { |$V| $V.$METHOD }\nconstraints:\n  ITER:\n    regex: 'map|select|each'\nfix: '$LIST.$ITER(&:$METHOD)'\n```\n\n### Example\n\n<!-- highlight matched code in curly-brace {lineNum} -->\n\n```rb {1,2}\n[1, 2, 3].select { |v| v.even? }\n(1..100).each { |i| i.to_s }\nnot_list.no_match { |v| v.even? }\n```\n\n### Diff\n\n<!-- use # [!code --] and # [!code ++] to annotate diff -->\n\n```rb\n[1, 2, 3].select { |v| v.even? } # [!code --]\n[1, 2, 3].select(&:even?) # [!code ++]\n(1..100).each { |i| i.to_s } # [!code --]\n(1..100).each(&:to_s) # [!code ++]\n\nnot_list.no_match { |v| v.even? }\n```\n\n### Contributed by\n\n[Herrington Darkholme](https://twitter.com/hd_nvim)\n",
      "description": "Ruby has a more concise symbol shorthand `&:` to invoke methods.\nThis rule simplifies `proc` to `symbol`.\nThis example is inspired by this [dev.to article](https://dev.to/baweaver/future-of-ruby-ast-tooling-9i1).\n\n<!-- Use YAML in the example. Delete this section if use pattern. -->",
      "features": [
        "constraints"
      ],
      "has_fix": true,
      "id": "prefer-symbol-over-proc",
      "language": "ruby",
      "playground_link": "/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6InJ1YnkiLCJxdWVyeSI6IiRMSVNULnNlbGVjdCB7IHwkVnwgJFYuJE1FVEhPRCB9IiwicmV3cml0ZSI6IiRMSVNULnNlbGVjdCgmOiRNRVRIT0QpIiwiY29uZmlnIjoiaWQ6IHByZWZlci1zeW1ib2wtb3Zlci1wcm9jXG5ydWxlOlxuICBwYXR0ZXJuOiAkTElTVC4kSVRFUiB7IHwkVnwgJFYuJE1FVEhPRCB9XG5sYW5ndWFnZTogUnVieVxuY29uc3RyYWludHM6XG4gIElURVI6XG4gICAgcmVnZXg6ICdtYXB8c2VsZWN0fGVhY2gnXG5maXg6ICckTElTVC4kSVRFUigmOiRNRVRIT0QpJ1xuIiwic291cmNlIjoiWzEsIDIsIDNdLnNlbGVjdCB7IHx2fCB2LmV2ZW4/IH1cbigxLi4xMDApLmVhY2ggeyB8aXwgaS50b19zIH1cbm5vdF9saXN0Lm5vX21hdGNoIHsgfHZ8IHYuZXZlbj8gfVxuIn0=",
      "rules": [
        "pattern"
      ],
      "source_file": "/var/tmp/vibe-kanban/vk-ff35-organized/target/debug/build/organized-grepster-mcp-a639358d381b1d6e/out/ast-grep.github.io/website/catalog/ruby/prefer-symbol-over-proc.md",
      "title": "Prefer Symbol over Proc",
      "type": "YAML",
      "yaml_content": "id: prefer-symbol-over-proc\nlanguage: ruby\nrule:\n  pattern: $LIST.$ITER { |$V| $V.$METHOD }\nconstraints:\n  ITER:\n    regex: 'map|select|each'\nfix: '$LIST.$ITER(&:$METHOD)'"
    },
    {
      "content": "## Migrate action_filter in Ruby on Rails <Badge type=\"tip\" text=\"Has Fix\" />\n\n- [Playground Link](/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6InJ1YnkiLCJxdWVyeSI6ImNvbnNvbGUubG9nKCRNQVRDSCkiLCJyZXdyaXRlIjoibG9nZ2VyLmxvZygkTUFUQ0gpIiwiY29uZmlnIjoiIyBhc3QtZ3JlcCBZQU1MIFJ1bGUgaXMgcG93ZXJmdWwgZm9yIGxpbnRpbmchXG4jIGh0dHBzOi8vYXN0LWdyZXAuZ2l0aHViLmlvL2d1aWRlL3J1bGUtY29uZmlnLmh0bWwjcnVsZVxucnVsZTpcbiAgYW55OlxuICAgIC0gcGF0dGVybjogYmVmb3JlX2ZpbHRlciAkJCRBQ1RJT05cbiAgICAtIHBhdHRlcm46IGFyb3VuZF9maWx0ZXIgJCQkQUNUSU9OXG4gICAgLSBwYXR0ZXJuOiBhZnRlcl9maWx0ZXIgJCQkQUNUSU9OXG4gIGhhczpcbiAgICBwYXR0ZXJuOiAkRklMVEVSXG4gICAgZmllbGQ6IG1ldGhvZFxuZml4OiBcbiAgJE5FV19BQ1RJT04gJCQkQUNUSU9OXG50cmFuc2Zvcm06XG4gIE5FV19BQ1RJT046XG4gICAgcmVwbGFjZTpcbiAgICAgIHNvdXJjZTogJEZJTFRFUlxuICAgICAgcmVwbGFjZTogX2ZpbHRlclxuICAgICAgYnk6IF9hY3Rpb24iLCJzb3VyY2UiOiJjbGFzcyBUb2Rvc0NvbnRyb2xsZXIgPCBBcHBsaWNhdGlvbkNvbnRyb2xsZXJcbiAgYmVmb3JlX2ZpbHRlciA6YXV0aGVudGljYXRlXG4gIGFyb3VuZF9maWx0ZXIgOndyYXBfaW5fdHJhbnNhY3Rpb24sIG9ubHk6IDpzaG93XG4gIGFmdGVyX2ZpbHRlciBkbyB8Y29udHJvbGxlcnxcbiAgICBmbGFzaFs6ZXJyb3JdID0gXCJZb3UgbXVzdCBiZSBsb2dnZWQgaW5cIlxuICBlbmRcblxuICBkZWYgaW5kZXhcbiAgICBAdG9kb3MgPSBUb2RvLmFsbFxuICBlbmRcbmVuZFxuIn0=)\n\n### Description\n\nThis rule is used to migrate `{before,after,around}_filter` to `{before,after,around}_action` in Ruby on Rails controllers.\n\nThese are methods that run before, after or around an action is executed, and they can be used to check permissions, set variables, redirect requests, log events, etc. However, these methods are [deprecated](https://stackoverflow.com/questions/16519828/rails-4-before-filter-vs-before-action) in Rails 5.0 and will be removed in Rails 5.1. `{before,after,around}_action` are the new syntax for the same functionality.\n\nThis rule will replace all occurrences of `{before,after,around}_filter` with `{before,after,around}_action` in the controller code.\n\n### YAML\n\n```yaml\nid: migration-action-filter\nlanguage: ruby\nrule:\n  any:\n    - pattern: before_filter $$$ACTION\n    - pattern: around_filter $$$ACTION\n    - pattern: after_filter $$$ACTION\n  has:\n    pattern: $FILTER\n    field: method\nfix:\n  $NEW_ACTION $$$ACTION\ntransform:\n  NEW_ACTION:\n    replace:\n      source: $FILTER\n      replace: _filter\n      by: _action\n```\n\n### Example\n\n<!-- highlight matched code in curly-brace {lineNum} -->\n\n```rb {2-4}\nclass TodosController < ApplicationController\n  before_filter :authenticate\n  around_filter :wrap_in_transaction, only: :show\n  after_filter do |controller|\n    flash[:error] = \"You must be logged in\"\n  end\n\n  def index\n    @todos = Todo.all\n  end\nend\n```\n\n### Diff\n\n<!-- use # [!code --] and # [!code ++] to annotate diff -->\n\n```rb\nclass TodosController < ApplicationController\n  before_action :authenticate  # [!code --]\n  before_filter :authenticate # [!code ++]\n  around_action :wrap_in_transaction, only: :show # [!code --]\n  around_filter :wrap_in_transaction, only: :show # [!code ++]\n  after_action do |controller|  # [!code --]\n     flash[:error] = \"You must be logged in\" # [!code --]\n  end # [!code --]\n  after_filter do |controller| # [!code ++]\n    flash[:error] = \"You must be logged in\" # [!code ++]\n  end # [!code ++]\n\n  def index\n    @todos = Todo.all\n  end\nend\n```\n\n### Contributed by\n\n[Herrington Darkholme](https://twitter.com/hd_nvim), inspired by [Future of Ruby - AST Tooling](https://dev.to/baweaver/future-of-ruby-ast-tooling-9i1).\n",
      "description": "This rule is used to migrate `{before,after,around}_filter` to `{before,after,around}_action` in Ruby on Rails controllers.\n\nThese are methods that run before, after or around an action is executed, and they can be used to check permissions, set variables, redirect requests, log events, etc. However, these methods are [deprecated](https://stackoverflow.com/questions/16519828/rails-4-before-filter-vs-before-action) in Rails 5.0 and will be removed in Rails 5.1. `{before,after,around}_action` are the new syntax for the same functionality.\n\nThis rule will replace all occurrences of `{before,after,around}_filter` with `{before,after,around}_action` in the controller code.",
      "features": [
        "transform"
      ],
      "has_fix": true,
      "id": "migrate-action-filter",
      "language": "ruby",
      "playground_link": "/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6InJ1YnkiLCJxdWVyeSI6ImNvbnNvbGUubG9nKCRNQVRDSCkiLCJyZXdyaXRlIjoibG9nZ2VyLmxvZygkTUFUQ0gpIiwiY29uZmlnIjoiIyBhc3QtZ3JlcCBZQU1MIFJ1bGUgaXMgcG93ZXJmdWwgZm9yIGxpbnRpbmchXG4jIGh0dHBzOi8vYXN0LWdyZXAuZ2l0aHViLmlvL2d1aWRlL3J1bGUtY29uZmlnLmh0bWwjcnVsZVxucnVsZTpcbiAgYW55OlxuICAgIC0gcGF0dGVybjogYmVmb3JlX2ZpbHRlciAkJCRBQ1RJT05cbiAgICAtIHBhdHRlcm46IGFyb3VuZF9maWx0ZXIgJCQkQUNUSU9OXG4gICAgLSBwYXR0ZXJuOiBhZnRlcl9maWx0ZXIgJCQkQUNUSU9OXG4gIGhhczpcbiAgICBwYXR0ZXJuOiAkRklMVEVSXG4gICAgZmllbGQ6IG1ldGhvZFxuZml4OiBcbiAgJE5FV19BQ1RJT04gJCQkQUNUSU9OXG50cmFuc2Zvcm06XG4gIE5FV19BQ1RJT046XG4gICAgcmVwbGFjZTpcbiAgICAgIHNvdXJjZTogJEZJTFRFUlxuICAgICAgcmVwbGFjZTogX2ZpbHRlclxuICAgICAgYnk6IF9hY3Rpb24iLCJzb3VyY2UiOiJjbGFzcyBUb2Rvc0NvbnRyb2xsZXIgPCBBcHBsaWNhdGlvbkNvbnRyb2xsZXJcbiAgYmVmb3JlX2ZpbHRlciA6YXV0aGVudGljYXRlXG4gIGFyb3VuZF9maWx0ZXIgOndyYXBfaW5fdHJhbnNhY3Rpb24sIG9ubHk6IDpzaG93XG4gIGFmdGVyX2ZpbHRlciBkbyB8Y29udHJvbGxlcnxcbiAgICBmbGFzaFs6ZXJyb3JdID0gXCJZb3UgbXVzdCBiZSBsb2dnZWQgaW5cIlxuICBlbmRcblxuICBkZWYgaW5kZXhcbiAgICBAdG9kb3MgPSBUb2RvLmFsbFxuICBlbmRcbmVuZFxuIn0=",
      "rules": [
        "any",
        "pattern",
        "pattern",
        "pattern",
        "has"
      ],
      "source_file": "/var/tmp/vibe-kanban/vk-ff35-organized/target/debug/build/organized-grepster-mcp-a639358d381b1d6e/out/ast-grep.github.io/website/catalog/ruby/migrate-action-filter.md",
      "title": "Migrate action_filter in Ruby on Rails",
      "type": "YAML",
      "yaml_content": "id: migration-action-filter\nlanguage: ruby\nrule:\n  any:\n    - pattern: before_filter $$$ACTION\n    - pattern: around_filter $$$ACTION\n    - pattern: after_filter $$$ACTION\n  has:\n    pattern: $FILTER\n    field: method\nfix:\n  $NEW_ACTION $$$ACTION\ntransform:\n  NEW_ACTION:\n    replace:\n      source: $FILTER\n      replace: _filter\n      by: _action"
    },
    {
      "content": "## Find key/value and Show Message\n\n- [Playground Link](/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6InlhbWwiLCJxdWVyeSI6IiIsInJld3JpdGUiOiIiLCJzdHJpY3RuZXNzIjoic21hcnQiLCJzZWxlY3RvciI6IiIsImNvbmZpZyI6ImlkOiBkZXRlY3QtaG9zdC1wb3J0XG5tZXNzYWdlOiBZb3UgYXJlIHVzaW5nICRIT1NUIG9uIFBvcnQgJFBPUlQsIHBsZWFzZSBjaGFuZ2UgaXQgdG8gODAwMFxuc2V2ZXJpdHk6IGVycm9yXG5ydWxlOlxuICBhbnk6XG4gIC0gcGF0dGVybjogfFxuICAgICBwb3J0OiAkUE9SVFxuICAtIHBhdHRlcm46IHxcbiAgICAgaG9zdDogJEhPU1QiLCJzb3VyY2UiOiJkYjpcbiAgIHVzZXJuYW1lOiByb290XG4gICBwYXNzd29yZDogcm9vdFxuXG5zZXJ2ZXI6XG4gIGhvc3Q6IDEyNy4wLjAuMVxuICBwb3J0OiA4MDAxIn0=)\n\n### Description\n\nThis YAML rule helps detecting specific host and port configurations in your code. For example, it checks if the port is set to something other than 8000 or if a particular host is used. It provides an error message prompting you to update the configuration.\n\n### YAML\n\n```yaml\nid: detect-host-port\nmessage: You are using $HOST on Port $PORT, please change it to 8000\nseverity: error\nrule:\n  any:\n    - pattern: |\n        port: $PORT\n    - pattern: |\n        host: $HOST\n```\n\n### Example\n\n<!-- highlight matched code in curly-brace {lineNum} -->\n\n```yaml {5,6}\ndb:\n  username: root\n  password: root\nserver:\n  host: 127.0.0.1\n  port: 8001\n```\n\n### Contributed by\n\n[rohitcoder](https://twitter.com/rohitcoder) on [Discord](https://discord.com/invite/4YZjf6htSQ).\n",
      "description": "This YAML rule helps detecting specific host and port configurations in your code. For example, it checks if the port is set to something other than 8000 or if a particular host is used. It provides an error message prompting you to update the configuration.",
      "features": [],
      "has_fix": false,
      "id": "find-key-value",
      "language": "yaml",
      "playground_link": "/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6InlhbWwiLCJxdWVyeSI6IiIsInJld3JpdGUiOiIiLCJzdHJpY3RuZXNzIjoic21hcnQiLCJzZWxlY3RvciI6IiIsImNvbmZpZyI6ImlkOiBkZXRlY3QtaG9zdC1wb3J0XG5tZXNzYWdlOiBZb3UgYXJlIHVzaW5nICRIT1NUIG9uIFBvcnQgJFBPUlQsIHBsZWFzZSBjaGFuZ2UgaXQgdG8gODAwMFxuc2V2ZXJpdHk6IGVycm9yXG5ydWxlOlxuICBhbnk6XG4gIC0gcGF0dGVybjogfFxuICAgICBwb3J0OiAkUE9SVFxuICAtIHBhdHRlcm46IHxcbiAgICAgaG9zdDogJEhPU1QiLCJzb3VyY2UiOiJkYjpcbiAgIHVzZXJuYW1lOiByb290XG4gICBwYXNzd29yZDogcm9vdFxuXG5zZXJ2ZXI6XG4gIGhvc3Q6IDEyNy4wLjAuMVxuICBwb3J0OiA4MDAxIn0=",
      "rules": [
        "any",
        "pattern",
        "pattern"
      ],
      "source_file": "/var/tmp/vibe-kanban/vk-ff35-organized/target/debug/build/organized-grepster-mcp-a639358d381b1d6e/out/ast-grep.github.io/website/catalog/yaml/find-key-value.md",
      "title": "Find key/value and Show Message",
      "type": "YAML",
      "yaml_content": "id: detect-host-port\nmessage: You are using $HOST on Port $PORT, please change it to 8000\nseverity: error\nrule:\n  any:\n    - pattern: |\n        port: $PORT\n    - pattern: |\n        host: $HOST"
    },
    {
      "content": "## Prefer Generator Expressions <Badge type=\"tip\" text=\"Has Fix\" />\n\n- [Playground Link](/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6InB5dGhvbiIsInF1ZXJ5IjoiWyQkJEFdIiwicmV3cml0ZSI6IiRBPy4oKSIsImNvbmZpZyI6InJ1bGU6XG4gIHBhdHRlcm46ICRGVU5DKCRMSVNUKVxuY29uc3RyYWludHM6XG4gIExJU1Q6IHsga2luZDogbGlzdF9jb21wcmVoZW5zaW9uIH1cbiAgRlVOQzpcbiAgICBhbnk6XG4gICAgICAtIHBhdHRlcm46IGFueVxuICAgICAgLSBwYXR0ZXJuOiBhbGxcbiAgICAgIC0gcGF0dGVybjogc3VtXG4gICAgICAjIC4uLlxudHJhbnNmb3JtOlxuICBJTk5FUjpcbiAgICBzdWJzdHJpbmc6IHtzb3VyY2U6ICRMSVNULCBzdGFydENoYXI6IDEsIGVuZENoYXI6IC0xIH1cbmZpeDogJEZVTkMoJElOTkVSKSIsInNvdXJjZSI6ImFsbChbeCBmb3IgeCBpbiB5XSlcblt4IGZvciB4IGluIHldIn0=)\n\n### Description\n\nList comprehensions like `[x for x in range(10)]` are a concise way to create lists in Python. However, we can achieve better memory efficiency by using generator expressions like `(x for x in range(10))` instead. List comprehensions create the entire list in memory, while generator expressions generate each element one at a time. We can make the change by replacing the square brackets with parentheses.\n\n### YAML\n\n```yaml\nid: prefer-generator-expressions\nlanguage: python\nrule:\n  pattern: $LIST\n  kind: list_comprehension\ntransform:\n  INNER:\n    substring: {source: $LIST, startChar: 1, endChar: -1 }\nfix: ($INNER)\n```\n\nThis rule converts every list comprehension to a generator expression. However, **not every list comprehension can be replaced with a generator expression.** If the list is used multiple times, is modified, is sliced, or is indexed, a generator is not a suitable replacement.\n\nSome common functions like `any`, `all`, and `sum` take an `iterable` as an argument. A generator function counts as an `iterable`, so it is safe to change a list comprehension to a generator expression in this context.\n\n```yaml\nid: prefer-generator-expressions\nlanguage: python\nrule:\n  pattern: $FUNC($LIST)\nconstraints:\n  LIST: { kind: list_comprehension }\n  FUNC:\n    any:\n      - pattern: any\n      - pattern: all\n      - pattern: sum\n      # ...\ntransform:\n  INNER:\n    substring: {source: $LIST, startChar: 1, endChar: -1 }\nfix: $FUNC($INNER)\n```\n\n### Example\n\n<!-- highlight matched code in curly-brace {lineNum} -->\n\n```python\nany([x for x in range(10)])\n```\n\n### Diff\n\n<!-- use # [!code --] and # [!code ++] to annotate diff -->\n\n```python\nany([x for x in range(10)]) # [!code --]\nany(x for x in range(10)) # [!code ++]\n```\n\n### Contributed by\n\n[Steven Love](https://github.com/StevenLove)\n",
      "description": "List comprehensions like `[x for x in range(10)]` are a concise way to create lists in Python. However, we can achieve better memory efficiency by using generator expressions like `(x for x in range(10))` instead. List comprehensions create the entire list in memory, while generator expressions generate each element one at a time. We can make the change by replacing the square brackets with parentheses.",
      "features": [
        "transform"
      ],
      "has_fix": true,
      "id": "prefer-generator-expressions",
      "language": "python",
      "playground_link": "/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6InB5dGhvbiIsInF1ZXJ5IjoiWyQkJEFdIiwicmV3cml0ZSI6IiRBPy4oKSIsImNvbmZpZyI6InJ1bGU6XG4gIHBhdHRlcm46ICRGVU5DKCRMSVNUKVxuY29uc3RyYWludHM6XG4gIExJU1Q6IHsga2luZDogbGlzdF9jb21wcmVoZW5zaW9uIH1cbiAgRlVOQzpcbiAgICBhbnk6XG4gICAgICAtIHBhdHRlcm46IGFueVxuICAgICAgLSBwYXR0ZXJuOiBhbGxcbiAgICAgIC0gcGF0dGVybjogc3VtXG4gICAgICAjIC4uLlxudHJhbnNmb3JtOlxuICBJTk5FUjpcbiAgICBzdWJzdHJpbmc6IHtzb3VyY2U6ICRMSVNULCBzdGFydENoYXI6IDEsIGVuZENoYXI6IC0xIH1cbmZpeDogJEZVTkMoJElOTkVSKSIsInNvdXJjZSI6ImFsbChbeCBmb3IgeCBpbiB5XSlcblt4IGZvciB4IGluIHldIn0=",
      "rules": [
        "pattern",
        "kind"
      ],
      "source_file": "/var/tmp/vibe-kanban/vk-ff35-organized/target/debug/build/organized-grepster-mcp-a639358d381b1d6e/out/ast-grep.github.io/website/catalog/python/prefer-generator-expressions.md",
      "title": "Prefer Generator Expressions",
      "type": "YAML",
      "yaml_content": "id: prefer-generator-expressions\nlanguage: python\nrule:\n  pattern: $LIST\n  kind: list_comprehension\ntransform:\n  INNER:\n    substring: {source: $LIST, startChar: 1, endChar: -1 }\nfix: ($INNER)"
    },
    {
      "content": "## Migrate OpenAI SDK <Badge type=\"tip\" text=\"Has Fix\" />\n\n- [Playground Link](/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6InB5dGhvbiIsInF1ZXJ5IjoiZGVmICRGVU5DKCQkJEFSR1MpOiAkJCRCT0RZIiwicmV3cml0ZSI6IiIsImNvbmZpZyI6InJ1bGU6XG4gIHBhdHRlcm46IGltcG9ydCBvcGVuYWlcbmZpeDogZnJvbSBvcGVuYWkgaW1wb3J0IENsaWVudFxuLS0tXG5ydWxlOlxuICBwYXR0ZXJuOiBvcGVuYWkuYXBpX2tleSA9ICRLRVlcbmZpeDogY2xpZW50ID0gQ2xpZW50KCRLRVkpXG4tLS1cbnJ1bGU6XG4gIHBhdHRlcm46IG9wZW5haS5Db21wbGV0aW9uLmNyZWF0ZSgkJCRBUkdTKVxuZml4OiB8LVxuICBjbGllbnQuY29tcGxldGlvbnMuY3JlYXRlKFxuICAgICQkJEFSR1NcbiAgKSIsInNvdXJjZSI6ImltcG9ydCBvc1xuaW1wb3J0IG9wZW5haVxuZnJvbSBmbGFzayBpbXBvcnQgRmxhc2ssIGpzb25pZnlcblxuYXBwID0gRmxhc2soX19uYW1lX18pXG5vcGVuYWkuYXBpX2tleSA9IG9zLmdldGVudihcIk9QRU5BSV9BUElfS0VZXCIpXG5cblxuQGFwcC5yb3V0ZShcIi9jaGF0XCIsIG1ldGhvZHM9KFwiUE9TVFwiKSlcbmRlZiBpbmRleCgpOlxuICAgIGFuaW1hbCA9IHJlcXVlc3QuZm9ybVtcImFuaW1hbFwiXVxuICAgIHJlc3BvbnNlID0gb3BlbmFpLkNvbXBsZXRpb24uY3JlYXRlKFxuICAgICAgICBtb2RlbD1cInRleHQtZGF2aW5jaS0wMDNcIixcbiAgICAgICAgcHJvbXB0PWdlbmVyYXRlX3Byb21wdChhbmltYWwpLFxuICAgICAgICB0ZW1wZXJhdHVyZT0wLjYsXG4gICAgKVxuICAgIHJldHVybiBqc29uaWZ5KHJlc3BvbnNlLmNob2ljZXMpIn0=)\n\n### Description\n\nOpenAI has introduced some breaking changes in their API, such as using `Client` to initialize the service and renaming the `Completion` method to `completions` . This example shows how to use ast-grep to automatically update your code to the new API.\n\nAPI migration requires multiple related rules to work together.\nThe example shows how to write [multiple rules](/reference/playground.html#test-multiple-rules) in a [single YAML](/guide/rewrite-code.html#using-fix-in-yaml-rule) file.\nThe rules and patterns in the example are simple and self-explanatory, so we will not explain them further.\n\n### YAML\n\n```yaml\nid: import-openai\nlanguage: python\nrule:\n  pattern: import openai\nfix: from openai import Client\n---\nid: rewrite-client\nlanguage: python\nrule:\n  pattern: openai.api_key = $KEY\nfix: client = Client($KEY)\n---\nid: rewrite-chat-completion\nlanguage: python\nrule:\n  pattern: openai.Completion.create($$$ARGS)\nfix: |-\n  client.completions.create(\n    $$$ARGS\n  )\n```\n\n### Example\n\n<!-- highlight matched code in curly-brace {lineNum} -->\n\n```python {2,6,11-15}\nimport os\nimport openai\nfrom flask import Flask, jsonify\n\napp = Flask(__name__)\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\n\n@app.route(\"/chat\", methods=(\"POST\"))\ndef index():\n    animal = request.form[\"animal\"]\n    response = openai.Completion.create(\n        model=\"text-davinci-003\",\n        prompt=generate_prompt(animal),\n        temperature=0.6,\n    )\n    return jsonify(response.choices)\n```\n\n### Diff\n\n<!-- use # [!code --] and # [!code ++] to annotate diff -->\n\n```python\nimport os\nimport openai # [!code --]\nfrom openai import Client # [!code ++]\nfrom flask import Flask, jsonify\n\napp = Flask(__name__)\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\") # [!code --]\nclient = Client(os.getenv(\"OPENAI_API_KEY\")) # [!code ++]\n\n@app.route(\"/chat\", methods=(\"POST\"))\ndef index():\n    animal = request.form[\"animal\"]\n    response = openai.Completion.create( # [!code --]\n    response = client.completions.create( # [!code ++]\n      model=\"text-davinci-003\",\n      prompt=generate_prompt(animal),\n      temperature=0.6,\n    )\n    return jsonify(response.choices)\n```\n\n### Contributed by\n\n[Herrington Darkholme](https://twitter.com/hd_nvim), inspired by [Morgante](https://twitter.com/morgantepell/status/1721668781246750952) from [grit.io](https://www.grit.io/)\n",
      "description": "OpenAI has introduced some breaking changes in their API, such as using `Client` to initialize the service and renaming the `Completion` method to `completions` . This example shows how to use ast-grep to automatically update your code to the new API.\n\nAPI migration requires multiple related rules to work together.\nThe example shows how to write [multiple rules](/reference/playground.html#test-multiple-rules) in a [single YAML](/guide/rewrite-code.html#using-fix-in-yaml-rule) file.\nThe rules and patterns in the example are simple and self-explanatory, so we will not explain them further.",
      "features": [],
      "has_fix": true,
      "id": "migrate-openai-sdk",
      "language": "python",
      "playground_link": "/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6InB5dGhvbiIsInF1ZXJ5IjoiZGVmICRGVU5DKCQkJEFSR1MpOiAkJCRCT0RZIiwicmV3cml0ZSI6IiIsImNvbmZpZyI6InJ1bGU6XG4gIHBhdHRlcm46IGltcG9ydCBvcGVuYWlcbmZpeDogZnJvbSBvcGVuYWkgaW1wb3J0IENsaWVudFxuLS0tXG5ydWxlOlxuICBwYXR0ZXJuOiBvcGVuYWkuYXBpX2tleSA9ICRLRVlcbmZpeDogY2xpZW50ID0gQ2xpZW50KCRLRVkpXG4tLS1cbnJ1bGU6XG4gIHBhdHRlcm46IG9wZW5haS5Db21wbGV0aW9uLmNyZWF0ZSgkJCRBUkdTKVxuZml4OiB8LVxuICBjbGllbnQuY29tcGxldGlvbnMuY3JlYXRlKFxuICAgICQkJEFSR1NcbiAgKSIsInNvdXJjZSI6ImltcG9ydCBvc1xuaW1wb3J0IG9wZW5haVxuZnJvbSBmbGFzayBpbXBvcnQgRmxhc2ssIGpzb25pZnlcblxuYXBwID0gRmxhc2soX19uYW1lX18pXG5vcGVuYWkuYXBpX2tleSA9IG9zLmdldGVudihcIk9QRU5BSV9BUElfS0VZXCIpXG5cblxuQGFwcC5yb3V0ZShcIi9jaGF0XCIsIG1ldGhvZHM9KFwiUE9TVFwiKSlcbmRlZiBpbmRleCgpOlxuICAgIGFuaW1hbCA9IHJlcXVlc3QuZm9ybVtcImFuaW1hbFwiXVxuICAgIHJlc3BvbnNlID0gb3BlbmFpLkNvbXBsZXRpb24uY3JlYXRlKFxuICAgICAgICBtb2RlbD1cInRleHQtZGF2aW5jaS0wMDNcIixcbiAgICAgICAgcHJvbXB0PWdlbmVyYXRlX3Byb21wdChhbmltYWwpLFxuICAgICAgICB0ZW1wZXJhdHVyZT0wLjYsXG4gICAgKVxuICAgIHJldHVybiBqc29uaWZ5KHJlc3BvbnNlLmNob2ljZXMpIn0=",
      "rules": [
        "pattern"
      ],
      "source_file": "/var/tmp/vibe-kanban/vk-ff35-organized/target/debug/build/organized-grepster-mcp-a639358d381b1d6e/out/ast-grep.github.io/website/catalog/python/migrate-openai-sdk.md",
      "title": "Migrate OpenAI SDK",
      "type": "YAML",
      "yaml_content": "id: import-openai\nlanguage: python\nrule:\n  pattern: import openai\nfix: from openai import Client\n---\nid: rewrite-client\nlanguage: python\nrule:\n  pattern: openai.api_key = $KEY\nfix: client = Client($KEY)\n---\nid: rewrite-chat-completion\nlanguage: python\nrule:\n  pattern: openai.Completion.create($$$ARGS)\nfix: |-\n  client.completions.create(\n    $$$ARGS\n  )"
    },
    {
      "content": "## Remove `async` function <Badge type=\"tip\" text=\"Has Fix\" />\n\n- [Playground Link](/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6InB5dGhvbiIsInF1ZXJ5IjoiYXdhaXQgJCQkQ0FMTCIsInJld3JpdGUiOiIkJCRDQUxMICIsImNvbmZpZyI6ImlkOiByZW1vdmUtYXN5bmMtZGVmXG5sYW5ndWFnZTogcHl0aG9uXG5ydWxlOlxuICBwYXR0ZXJuOlxuICAgIGNvbnRleHQ6ICdhc3luYyBkZWYgJEZVTkMoJCQkQVJHUyk6ICQkJEJPRFknXG4gICAgc2VsZWN0b3I6IGZ1bmN0aW9uX2RlZmluaXRpb25cbnRyYW5zZm9ybTpcbiAgUkVNT1ZFRF9CT0RZOlxuICAgIHJld3JpdGU6XG4gICAgICByZXdyaXRlcnM6IFtyZW1vdmUtYXdhaXQtY2FsbF1cbiAgICAgIHNvdXJjZTogJCQkQk9EWVxuZml4OiB8LVxuICBkZWYgJEZVTkMoJCQkQVJHUyk6XG4gICAgJFJFTU9WRURfQk9EWVxucmV3cml0ZXJzOlxuLSBpZDogcmVtb3ZlLWF3YWl0LWNhbGxcbiAgcnVsZTpcbiAgICBwYXR0ZXJuOiAnYXdhaXQgJCQkQ0FMTCdcbiAgZml4OiAkJCRDQUxMXG4iLCJzb3VyY2UiOiJhc3luYyBkZWYgbWFpbjMoKTpcbiAgYXdhaXQgc29tZWNhbGwoMSwgNSkifQ==)\n\n### Description\n\nThe `async` keyword in Python is used to define asynchronous functions that can be `await`ed.\n\nIn this example, we want to remove the `async` keyword from a function definition and replace it with a synchronous version of the function. We also need to remove the `await` keyword from the function body.\n\nBy default, ast-grep will not apply overlapping replacements. This means `await` keywords will not be modified because they are inside the async function body.\n\nHowever, we can use the [`rewriter`](https://ast-grep.github.io/reference/yaml/rewriter.html) to apply changes inside the matched function body.\n\n### YAML\n\n```yaml\nid: remove-async-def\nlanguage: python\nrule:\n  # match async function definition\n  pattern:\n    context: 'async def $FUNC($$$ARGS): $$$BODY'\n    selector: function_definition\nrewriters:\n# define a rewriter to remove the await keyword\n  remove-await-call:\n    pattern: 'await $$$CALL'\n    fix: $$$CALL # remove await keyword\n# apply the rewriter to the function body\ntransform:\n  REMOVED_BODY:\n    rewrite:\n      rewriters: [remove-await-call]\n      source: $$$BODY\nfix: |-\n  def $FUNC($$$ARGS):\n    $REMOVED_BODY\n```\n\n### Example\n\n<!-- highlight matched code in curly-brace {lineNum} -->\n\n```python\nasync def main3():\n  await somecall(1, 5)\n```\n\n### Diff\n\n<!-- use # [!code --] and # [!code ++] to annotate diff -->\n\n```python\nasync def main3(): # [!code --]\n  await somecall(1, 5) # [!code --]\ndef main3(): # [!code ++]\n  somecall(1, 5) # [!code ++]\n```\n\n### Contributed by\n\nInspired by the ast-grep issue [#1185](https://github.com/ast-grep/ast-grep/issues/1185)\n",
      "description": "The `async` keyword in Python is used to define asynchronous functions that can be `await`ed.\n\nIn this example, we want to remove the `async` keyword from a function definition and replace it with a synchronous version of the function. We also need to remove the `await` keyword from the function body.\n\nBy default, ast-grep will not apply overlapping replacements. This means `await` keywords will not be modified because they are inside the async function body.\n\nHowever, we can use the [`rewriter`](https://ast-grep.github.io/reference/yaml/rewriter.html) to apply changes inside the matched function body.",
      "features": [
        "transform",
        "rewriters"
      ],
      "has_fix": true,
      "id": "remove-async-await",
      "language": "python",
      "playground_link": "/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6InB5dGhvbiIsInF1ZXJ5IjoiYXdhaXQgJCQkQ0FMTCIsInJld3JpdGUiOiIkJCRDQUxMICIsImNvbmZpZyI6ImlkOiByZW1vdmUtYXN5bmMtZGVmXG5sYW5ndWFnZTogcHl0aG9uXG5ydWxlOlxuICBwYXR0ZXJuOlxuICAgIGNvbnRleHQ6ICdhc3luYyBkZWYgJEZVTkMoJCQkQVJHUyk6ICQkJEJPRFknXG4gICAgc2VsZWN0b3I6IGZ1bmN0aW9uX2RlZmluaXRpb25cbnRyYW5zZm9ybTpcbiAgUkVNT1ZFRF9CT0RZOlxuICAgIHJld3JpdGU6XG4gICAgICByZXdyaXRlcnM6IFtyZW1vdmUtYXdhaXQtY2FsbF1cbiAgICAgIHNvdXJjZTogJCQkQk9EWVxuZml4OiB8LVxuICBkZWYgJEZVTkMoJCQkQVJHUyk6XG4gICAgJFJFTU9WRURfQk9EWVxucmV3cml0ZXJzOlxuLSBpZDogcmVtb3ZlLWF3YWl0LWNhbGxcbiAgcnVsZTpcbiAgICBwYXR0ZXJuOiAnYXdhaXQgJCQkQ0FMTCdcbiAgZml4OiAkJCRDQUxMXG4iLCJzb3VyY2UiOiJhc3luYyBkZWYgbWFpbjMoKTpcbiAgYXdhaXQgc29tZWNhbGwoMSwgNSkifQ==",
      "rules": [
        "pattern"
      ],
      "source_file": "/var/tmp/vibe-kanban/vk-ff35-organized/target/debug/build/organized-grepster-mcp-a639358d381b1d6e/out/ast-grep.github.io/website/catalog/python/remove-async-await.md",
      "title": "Remove `async` function",
      "type": "YAML",
      "yaml_content": "id: remove-async-def\nlanguage: python\nrule:\n  # match async function definition\n  pattern:\n    context: 'async def $FUNC($$$ARGS): $$$BODY'\n    selector: function_definition\nrewriters:\n# define a rewriter to remove the await keyword\n  remove-await-call:\n    pattern: 'await $$$CALL'\n    fix: $$$CALL # remove await keyword\n# apply the rewriter to the function body\ntransform:\n  REMOVED_BODY:\n    rewrite:\n      rewriters: [remove-await-call]\n      source: $$$BODY\nfix: |-\n  def $FUNC($$$ARGS):\n    $REMOVED_BODY"
    },
    {
      "content": "## Recursive Rewrite Type <Badge type=\"tip\" text=\"Has Fix\" />\n\n- [Playground Link](/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6InB5dGhvbiIsInF1ZXJ5IjoiIiwicmV3cml0ZSI6IiIsInN0cmljdG5lc3MiOiJzbWFydCIsInNlbGVjdG9yIjoiIiwiY29uZmlnIjoicmV3cml0ZXJzOlxyXG4tIGlkOiBvcHRpb25hbFxyXG4gIGxhbmd1YWdlOiBQeXRob25cclxuICBydWxlOlxyXG4gICAgYW55OlxyXG4gICAgLSBwYXR0ZXJuOlxyXG4gICAgICAgIGNvbnRleHQ6ICdhcmc6IE9wdGlvbmFsWyRUWVBFXSdcclxuICAgICAgICBzZWxlY3RvcjogZ2VuZXJpY190eXBlXHJcbiAgICAtIHBhdHRlcm46IE9wdGlvbmFsWyRUWVBFXVxyXG4gIHRyYW5zZm9ybTpcclxuICAgIE5UOlxyXG4gICAgICByZXdyaXRlOiBcclxuICAgICAgICByZXdyaXRlcnM6IFtvcHRpb25hbCwgdW5pb25zXVxyXG4gICAgICAgIHNvdXJjZTogJFRZUEVcclxuICBmaXg6ICROVCB8IE5vbmVcclxuLSBpZDogdW5pb25zXHJcbiAgbGFuZ3VhZ2U6IFB5dGhvblxyXG4gIHJ1bGU6XHJcbiAgICBwYXR0ZXJuOlxyXG4gICAgICBjb250ZXh0OiAnYTogVW5pb25bJCQkVFlQRVNdJ1xyXG4gICAgICBzZWxlY3RvcjogZ2VuZXJpY190eXBlXHJcbiAgdHJhbnNmb3JtOlxyXG4gICAgVU5JT05TOlxyXG4gICAgICByZXdyaXRlOlxyXG4gICAgICAgIHJld3JpdGVyczpcclxuICAgICAgICAgIC0gcmV3cml0ZS11bmlvbnNcclxuICAgICAgICBzb3VyY2U6ICQkJFRZUEVTXHJcbiAgICAgICAgam9pbkJ5OiBcIiB8IFwiXHJcbiAgZml4OiAkVU5JT05TXHJcbi0gaWQ6IHJld3JpdGUtdW5pb25zXHJcbiAgcnVsZTpcclxuICAgIHBhdHRlcm46ICRUWVBFXHJcbiAgICBraW5kOiB0eXBlXHJcbiAgdHJhbnNmb3JtOlxyXG4gICAgTlQ6XHJcbiAgICAgIHJld3JpdGU6IFxyXG4gICAgICAgIHJld3JpdGVyczogW29wdGlvbmFsLCB1bmlvbnNdXHJcbiAgICAgICAgc291cmNlOiAkVFlQRVxyXG4gIGZpeDogJE5UXHJcbnJ1bGU6XHJcbiAga2luZDogdHlwZVxyXG4gIHBhdHRlcm46ICRUUEVcclxudHJhbnNmb3JtOlxyXG4gIE5FV19UWVBFOlxyXG4gICAgcmV3cml0ZTogXHJcbiAgICAgIHJld3JpdGVyczogW29wdGlvbmFsLCB1bmlvbnNdXHJcbiAgICAgIHNvdXJjZTogJFRQRVxyXG5maXg6ICRORVdfVFlQRSIsInNvdXJjZSI6InJlc3VsdHM6ICBPcHRpb25hbFtVbmlvbltMaXN0W1VuaW9uW3N0ciwgZGljdF1dLCBzdHJdXVxuIn0=)\n\n### Description\n\nSuppose we want to transform Python's `Union[T1, T2]` to `T1 | T2` and `Optional[T]` to `T | None`.\n\nBy default, ast-grep will only fix the outermost node that matches a pattern and will not rewrite the inner AST nodes inside a match. This avoids unexpected rewriting or infinite rewriting loop.\n\nSo if you are using non-recursive rewriter like [this](https://github.com/ast-grep/ast-grep/discussions/1566#discussion-7401382), `Optional[Union[int, str]]` will only be converted to `Union[int, str] | None`. Note the inner `Union[int, str]` is not enabled. This is because the rewriter `optional` matches `Optional[$TYPE]` and rewrite it to `$TYPE | None`. The inner `$TYPE` is not processed.\n\nHowever, we can apply `rewriters` to inner types recursively. Take the `optional` rewriter as an example, we need to apply rewriters, `optional` and `unions`, **recursively** to `$TYPE` and get a new variable `$NT`.\n\n### YAML\n\n```yml\nid: recursive-rewrite-types\nlanguage: python\nrewriters:\n# rewrite Optional[T] to T | None\n- id: optional\n  rule:\n    any:\n    - pattern:\n        context: 'arg: Optional[$TYPE]'\n        selector: generic_type\n    - pattern: Optional[$TYPE]\n  # recursively apply rewriters to $TYPE\n  transform:\n    NT:\n      rewrite:\n        rewriters: [optional, unions]\n        source: $TYPE\n  # use the new variable $NT\n  fix: $NT | None\n\n# similar to Optional, rewrite Union[T1, T2] to T1 | T2\n- id: unions\n  language: Python\n  rule:\n    pattern:\n      context: 'a: Union[$$$TYPES]'\n      selector: generic_type\n  transform:\n    UNIONS:\n      # rewrite all types inside $$$TYPES\n      rewrite:\n        rewriters: [ rewrite-unions ]\n        source: $$$TYPES\n        joinBy: \" | \"\n  fix: $UNIONS\n- id: rewrite-unions\n  rule:\n    pattern: $TYPE\n    kind: type\n  # recursive part\n  transform:\n    NT:\n      rewrite:\n        rewriters: [optional, unions]\n        source: $TYPE\n  fix: $NT\n\n# find all types\nrule:\n  kind: type\n  pattern: $TPE\n# apply the recursive rewriters\ntransform:\n  NEW_TYPE:\n    rewrite:\n      rewriters: [optional, unions]\n      source: $TPE\n# output\nfix: $NEW_TYPE\n```\n\n### Example\n\n<!-- highlight matched code in curly-brace {lineNum} -->\n\n```python\nresults:  Optional[Union[List[Union[str, dict]], str]]\n```\n\n### Diff\n\n<!-- use # [!code --] and # [!code ++] to annotate diff -->\n\n```python\nresults:  Optional[Union[List[Union[str, dict]], str]] # [!code --]\nresults:  List[str | dict] | str | None #[!code ++]\n```\n\n### Contributed by\n\nInspired by [steinuil](https://github.com/ast-grep/ast-grep/discussions/1566)\n",
      "description": "Suppose we want to transform Python's `Union[T1, T2]` to `T1 | T2` and `Optional[T]` to `T | None`.\n\nBy default, ast-grep will only fix the outermost node that matches a pattern and will not rewrite the inner AST nodes inside a match. This avoids unexpected rewriting or infinite rewriting loop.\n\nSo if you are using non-recursive rewriter like [this](https://github.com/ast-grep/ast-grep/discussions/1566#discussion-7401382), `Optional[Union[int, str]]` will only be converted to `Union[int, str] | None`. Note the inner `Union[int, str]` is not enabled. This is because the rewriter `optional` matches `Optional[$TYPE]` and rewrite it to `$TYPE | None`. The inner `$TYPE` is not processed.\n\nHowever, we can apply `rewriters` to inner types recursively. Take the `optional` rewriter as an example, we need to apply rewriters, `optional` and `unions`, **recursively** to `$TYPE` and get a new variable `$NT`.",
      "features": [
        "transform",
        "rewriters"
      ],
      "has_fix": true,
      "id": "recursive-rewrite-type",
      "language": "python",
      "playground_link": "/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6InB5dGhvbiIsInF1ZXJ5IjoiIiwicmV3cml0ZSI6IiIsInN0cmljdG5lc3MiOiJzbWFydCIsInNlbGVjdG9yIjoiIiwiY29uZmlnIjoicmV3cml0ZXJzOlxyXG4tIGlkOiBvcHRpb25hbFxyXG4gIGxhbmd1YWdlOiBQeXRob25cclxuICBydWxlOlxyXG4gICAgYW55OlxyXG4gICAgLSBwYXR0ZXJuOlxyXG4gICAgICAgIGNvbnRleHQ6ICdhcmc6IE9wdGlvbmFsWyRUWVBFXSdcclxuICAgICAgICBzZWxlY3RvcjogZ2VuZXJpY190eXBlXHJcbiAgICAtIHBhdHRlcm46IE9wdGlvbmFsWyRUWVBFXVxyXG4gIHRyYW5zZm9ybTpcclxuICAgIE5UOlxyXG4gICAgICByZXdyaXRlOiBcclxuICAgICAgICByZXdyaXRlcnM6IFtvcHRpb25hbCwgdW5pb25zXVxyXG4gICAgICAgIHNvdXJjZTogJFRZUEVcclxuICBmaXg6ICROVCB8IE5vbmVcclxuLSBpZDogdW5pb25zXHJcbiAgbGFuZ3VhZ2U6IFB5dGhvblxyXG4gIHJ1bGU6XHJcbiAgICBwYXR0ZXJuOlxyXG4gICAgICBjb250ZXh0OiAnYTogVW5pb25bJCQkVFlQRVNdJ1xyXG4gICAgICBzZWxlY3RvcjogZ2VuZXJpY190eXBlXHJcbiAgdHJhbnNmb3JtOlxyXG4gICAgVU5JT05TOlxyXG4gICAgICByZXdyaXRlOlxyXG4gICAgICAgIHJld3JpdGVyczpcclxuICAgICAgICAgIC0gcmV3cml0ZS11bmlvbnNcclxuICAgICAgICBzb3VyY2U6ICQkJFRZUEVTXHJcbiAgICAgICAgam9pbkJ5OiBcIiB8IFwiXHJcbiAgZml4OiAkVU5JT05TXHJcbi0gaWQ6IHJld3JpdGUtdW5pb25zXHJcbiAgcnVsZTpcclxuICAgIHBhdHRlcm46ICRUWVBFXHJcbiAgICBraW5kOiB0eXBlXHJcbiAgdHJhbnNmb3JtOlxyXG4gICAgTlQ6XHJcbiAgICAgIHJld3JpdGU6IFxyXG4gICAgICAgIHJld3JpdGVyczogW29wdGlvbmFsLCB1bmlvbnNdXHJcbiAgICAgICAgc291cmNlOiAkVFlQRVxyXG4gIGZpeDogJE5UXHJcbnJ1bGU6XHJcbiAga2luZDogdHlwZVxyXG4gIHBhdHRlcm46ICRUUEVcclxudHJhbnNmb3JtOlxyXG4gIE5FV19UWVBFOlxyXG4gICAgcmV3cml0ZTogXHJcbiAgICAgIHJld3JpdGVyczogW29wdGlvbmFsLCB1bmlvbnNdXHJcbiAgICAgIHNvdXJjZTogJFRQRVxyXG5maXg6ICRORVdfVFlQRSIsInNvdXJjZSI6InJlc3VsdHM6ICBPcHRpb25hbFtVbmlvbltMaXN0W1VuaW9uW3N0ciwgZGljdF1dLCBzdHJdXVxuIn0=",
      "rules": [
        "kind",
        "pattern"
      ],
      "source_file": "/var/tmp/vibe-kanban/vk-ff35-organized/target/debug/build/organized-grepster-mcp-a639358d381b1d6e/out/ast-grep.github.io/website/catalog/python/recursive-rewrite-type.md",
      "title": "Recursive Rewrite Type",
      "type": "YAML",
      "yaml_content": "id: recursive-rewrite-types\nlanguage: python\nrewriters:\n# rewrite Optional[T] to T | None\n- id: optional\n  rule:\n    any:\n    - pattern:\n        context: 'arg: Optional[$TYPE]'\n        selector: generic_type\n    - pattern: Optional[$TYPE]\n  # recursively apply rewriters to $TYPE\n  transform:\n    NT:\n      rewrite:\n        rewriters: [optional, unions]\n        source: $TYPE\n  # use the new variable $NT\n  fix: $NT | None\n\n# similar to Optional, rewrite Union[T1, T2] to T1 | T2\n- id: unions\n  language: Python\n  rule:\n    pattern:\n      context: 'a: Union[$$$TYPES]'\n      selector: generic_type\n  transform:\n    UNIONS:\n      # rewrite all types inside $$$TYPES\n      rewrite:\n        rewriters: [ rewrite-unions ]\n        source: $$$TYPES\n        joinBy: \" | \"\n  fix: $UNIONS\n- id: rewrite-unions\n  rule:\n    pattern: $TYPE\n    kind: type\n  # recursive part\n  transform:\n    NT:\n      rewrite:\n        rewriters: [optional, unions]\n        source: $TYPE\n  fix: $NT\n\n# find all types\nrule:\n  kind: type\n  pattern: $TPE\n# apply the recursive rewriters\ntransform:\n  NEW_TYPE:\n    rewrite:\n      rewriters: [optional, unions]\n      source: $TPE\n# output\nfix: $NEW_TYPE"
    },
    {
      "content": "## Refactor pytest fixtures\n\n- [Playground Link](/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6InB5dGhvbiIsInF1ZXJ5IjoiZGVmIGZvbygkWCk6XG4gICRTIiwicmV3cml0ZSI6ImxvZ2dlci5sb2coJE1BVENIKSIsImNvbmZpZyI6ImlkOiBweXRlc3QtdHlwZS1oaW50LWZpeHR1cmVcbmxhbmd1YWdlOiBQeXRob25cbnV0aWxzOlxuICBpcy1maXh0dXJlLWZ1bmN0aW9uOlxuICAgIGtpbmQ6IGZ1bmN0aW9uX2RlZmluaXRpb25cbiAgICBmb2xsb3dzOlxuICAgICAga2luZDogZGVjb3JhdG9yXG4gICAgICBoYXM6XG4gICAgICAgIGtpbmQ6IGlkZW50aWZpZXJcbiAgICAgICAgcmVnZXg6IF5maXh0dXJlJFxuICAgICAgICBzdG9wQnk6IGVuZFxuICBpcy10ZXN0LWZ1bmN0aW9uOlxuICAgIGtpbmQ6IGZ1bmN0aW9uX2RlZmluaXRpb25cbiAgICBoYXM6XG4gICAgICBmaWVsZDogbmFtZVxuICAgICAgcmVnZXg6IF50ZXN0X1xuICBpcy1weXRlc3QtY29udGV4dDpcbiAgICAjIFB5dGVzdCBjb250ZXh0IGlzIGEgbm9kZSBpbnNpZGUgYSBweXRlc3RcbiAgICAjIHRlc3QvZml4dHVyZVxuICAgIGluc2lkZTpcbiAgICAgIHN0b3BCeTogZW5kXG4gICAgICBhbnk6XG4gICAgICAgIC0gbWF0Y2hlczogaXMtZml4dHVyZS1mdW5jdGlvblxuICAgICAgICAtIG1hdGNoZXM6IGlzLXRlc3QtZnVuY3Rpb25cbiAgaXMtZml4dHVyZS1hcmc6XG4gICAgIyBGaXh0dXJlIGFyZ3VtZW50cyBhcmUgaWRlbnRpZmllcnMgaW5zaWRlIHRoZSBcbiAgICAjIHBhcmFtZXRlcnMgb2YgYSB0ZXN0L2ZpeHR1cmUgZnVuY3Rpb25cbiAgICBhbGw6XG4gICAgICAtIGtpbmQ6IGlkZW50aWZpZXJcbiAgICAgIC0gbWF0Y2hlczogaXMtcHl0ZXN0LWNvbnRleHRcbiAgICAgIC0gaW5zaWRlOlxuICAgICAgICAgIGtpbmQ6IHBhcmFtZXRlcnNcbnJ1bGU6XG4gIG1hdGNoZXM6IGlzLWZpeHR1cmUtYXJnXG4gIHJlZ2V4OiBeZm9vJFxuZml4OiAnZm9vOiBpbnQnXG4iLCJzb3VyY2UiOiJmcm9tIGNvbGxlY3Rpb25zLmFiYyBpbXBvcnQgSXRlcmFibGVcbmZyb20gdHlwaW5nIGltcG9ydCBBbnlcblxuaW1wb3J0IHB5dGVzdFxuZnJvbSBweXRlc3QgaW1wb3J0IGZpeHR1cmVcblxuQHB5dGVzdC5maXh0dXJlKHNjb3BlPVwic2Vzc2lvblwiKVxuZGVmIGZvbygpIC0+IEl0ZXJhYmxlW2ludF06XG4gICAgeWllbGQgNVxuXG5AZml4dHVyZVxuZGVmIGJhcihmb28pIC0+IHN0cjpcbiAgICByZXR1cm4gc3RyKGZvbylcblxuZGVmIHJlZ3VsYXJfZnVuY3Rpb24oZm9vKSAtPiBOb25lOlxuICAgICMgVGhpcyBmdW5jdGlvbiBkb2Vzbid0IHVzZSB0aGUgJ2ZvbycgZml4dHVyZVxuICAgIHByaW50KGZvbylcblxuZGVmIHRlc3RfMShmb28sIGJhcik6XG4gICAgcHJpbnQoZm9vLCBiYXIpXG5cbmRlZiB0ZXN0XzIoYmFyKTpcbiAgICAuLi4ifQ==)\n\n### Description\n\nOne of the most commonly used testing framework in Python is [pytest](https://docs.pytest.org/en/8.2.x/). Among other things, it allows the use of [fixtures](https://docs.pytest.org/en/6.2.x/fixture.html).\n\nFixtures are defined as functions that can be required in test code, or in other fixtures, as an argument. This means that all functions arguments with a given name in a pytest context (test function or fixture) are essentially the same entity. However, not every editor's LSP is able to keep track of this, making refactoring challenging.\n\nUsing ast-grep, we can define some rules to match fixture definition and usage without catching similarly named entities in a non-test context.\n\nFirst, we define utils to select pytest test/fixture functions.\n\n```yaml\nutils:\n  is-fixture-function:\n    kind: function_definition\n    follows:\n      kind: decorator\n      has:\n        kind: identifier\n        regex: ^fixture$\n        stopBy: end\n  is-test-function:\n    kind: function_definition\n    has:\n      field: name\n      regex: ^test_\n```\n\nPytest fixtures are declared with a decorator `@pytest.fixture`. We match the `function_definition` node that directly follows a `decorator` node. That decorator node must have a `fixture` identifier somewhere. This accounts for different location of the `fixture` node depending on the type of imports and whether the decorator is used as is or called with parameters.\n\nPytest functions are fairly straightforward to detect, as they always start with `test_` by convention.\n\nThe next utils builds onto those two to incrementally:\n\n- Find if a node is inside a pytest context (test/fixture)\n- Find if a node is an argument in such a context\n\n```yaml\nutils:\n  is-pytest-context:\n    # Pytest context is a node inside a pytest\n    # test/fixture\n    inside:\n      stopBy: end\n      any:\n        - matches: is-fixture-function\n        - matches: is-test-function\n  is-fixture-arg:\n    # Fixture arguments are identifiers inside the \n    # parameters of a test/fixture function\n    all:\n      - kind: identifier\n      - inside:\n          kind: parameters\n      - matches: is-pytest-context\n```\n\nOnce those utils are declared, you can perform various refactoring on a specific fixture.\n\nThe following rule adds a type-hint to a fixture.\n\n```yaml\nrule:\n  matches: is-fixture-arg\n  regex: ^foo$\nfix: 'foo: int'\n```\n\nThis one renames a fixture and all its references.\n\n```yaml\nrule:\n  kind: identifier\n  matches: is-fixture-context\n  regex: ^foo$\nfix: 'five'\n```\n\n### Example\n\n#### Renaming Fixtures\n\n```python {2,6,7,12,13}\n@pytest.fixture\ndef foo() -> int:\n    return 5\n\n@pytest.fixture(scope=\"function\")\ndef some_fixture(foo: int) -> str:\n    return str(foo)\n\ndef regular_function(foo) -> None:\n    ...\n\ndef test_code(foo: int) -> None:\n    assert foo == 5\n```\n\n#### Diff\n\n```python {2,6,7,12}\n@pytest.fixture\ndef foo() -> int: # [!code --]\ndef five() -> int: # [!code ++]\n    return 5\n\n@pytest.fixture(scope=\"function\")\ndef some_fixture(foo: int) -> str: # [!code --]\ndef some_fixture(five: int) -> str: # [!code ++]\n    return str(foo)\n\ndef regular_function(foo) -> None:\n    ...\n\ndef test_code(foo: int) -> None: # [!code --]\ndef test_code(five: int) -> None: # [!code ++]\n    assert foo == 5 # [!code --]\n    assert five == 5 # [!code ++]\n```\n\n#### Type Hinting Fixtures\n\n```python {6,12}\n@pytest.fixture\ndef foo() -> int:\n    return 5\n\n@pytest.fixture(scope=\"function\")\ndef some_fixture(foo) -> str:\n    return str(foo)\n\ndef regular_function(foo) -> None:\n    ...\n\ndef test_code(foo) -> None:\n    assert foo == 5\n```\n\n#### Diff\n\n```python {2,6,7,12}\n@pytest.fixture\ndef foo() -> int:\n    return 5\n\n@pytest.fixture(scope=\"function\")\ndef some_fixture(foo) -> str: # [!code --]\ndef some_fixture(foo: int) -> str: # [!code ++]\n    return str(foo)\n\ndef regular_function(foo) -> None:\n    ...\n\ndef test_code(foo) -> None: # [!code --]\ndef test_code(foo: int) -> None: # [!code ++]\n    assert foo == 5\n```\n",
      "description": "One of the most commonly used testing framework in Python is [pytest](https://docs.pytest.org/en/8.2.x/). Among other things, it allows the use of [fixtures](https://docs.pytest.org/en/6.2.x/fixture.html).\n\nFixtures are defined as functions that can be required in test code, or in other fixtures, as an argument. This means that all functions arguments with a given name in a pytest context (test function or fixture) are essentially the same entity. However, not every editor's LSP is able to keep track of this, making refactoring challenging.\n\nUsing ast-grep, we can define some rules to match fixture definition and usage without catching similarly named entities in a non-test context.\n\nFirst, we define utils to select pytest test/fixture functions.",
      "features": [
        "utils"
      ],
      "has_fix": false,
      "id": "refactor-pytest-fixtures",
      "language": "python",
      "playground_link": "/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6InB5dGhvbiIsInF1ZXJ5IjoiZGVmIGZvbygkWCk6XG4gICRTIiwicmV3cml0ZSI6ImxvZ2dlci5sb2coJE1BVENIKSIsImNvbmZpZyI6ImlkOiBweXRlc3QtdHlwZS1oaW50LWZpeHR1cmVcbmxhbmd1YWdlOiBQeXRob25cbnV0aWxzOlxuICBpcy1maXh0dXJlLWZ1bmN0aW9uOlxuICAgIGtpbmQ6IGZ1bmN0aW9uX2RlZmluaXRpb25cbiAgICBmb2xsb3dzOlxuICAgICAga2luZDogZGVjb3JhdG9yXG4gICAgICBoYXM6XG4gICAgICAgIGtpbmQ6IGlkZW50aWZpZXJcbiAgICAgICAgcmVnZXg6IF5maXh0dXJlJFxuICAgICAgICBzdG9wQnk6IGVuZFxuICBpcy10ZXN0LWZ1bmN0aW9uOlxuICAgIGtpbmQ6IGZ1bmN0aW9uX2RlZmluaXRpb25cbiAgICBoYXM6XG4gICAgICBmaWVsZDogbmFtZVxuICAgICAgcmVnZXg6IF50ZXN0X1xuICBpcy1weXRlc3QtY29udGV4dDpcbiAgICAjIFB5dGVzdCBjb250ZXh0IGlzIGEgbm9kZSBpbnNpZGUgYSBweXRlc3RcbiAgICAjIHRlc3QvZml4dHVyZVxuICAgIGluc2lkZTpcbiAgICAgIHN0b3BCeTogZW5kXG4gICAgICBhbnk6XG4gICAgICAgIC0gbWF0Y2hlczogaXMtZml4dHVyZS1mdW5jdGlvblxuICAgICAgICAtIG1hdGNoZXM6IGlzLXRlc3QtZnVuY3Rpb25cbiAgaXMtZml4dHVyZS1hcmc6XG4gICAgIyBGaXh0dXJlIGFyZ3VtZW50cyBhcmUgaWRlbnRpZmllcnMgaW5zaWRlIHRoZSBcbiAgICAjIHBhcmFtZXRlcnMgb2YgYSB0ZXN0L2ZpeHR1cmUgZnVuY3Rpb25cbiAgICBhbGw6XG4gICAgICAtIGtpbmQ6IGlkZW50aWZpZXJcbiAgICAgIC0gbWF0Y2hlczogaXMtcHl0ZXN0LWNvbnRleHRcbiAgICAgIC0gaW5zaWRlOlxuICAgICAgICAgIGtpbmQ6IHBhcmFtZXRlcnNcbnJ1bGU6XG4gIG1hdGNoZXM6IGlzLWZpeHR1cmUtYXJnXG4gIHJlZ2V4OiBeZm9vJFxuZml4OiAnZm9vOiBpbnQnXG4iLCJzb3VyY2UiOiJmcm9tIGNvbGxlY3Rpb25zLmFiYyBpbXBvcnQgSXRlcmFibGVcbmZyb20gdHlwaW5nIGltcG9ydCBBbnlcblxuaW1wb3J0IHB5dGVzdFxuZnJvbSBweXRlc3QgaW1wb3J0IGZpeHR1cmVcblxuQHB5dGVzdC5maXh0dXJlKHNjb3BlPVwic2Vzc2lvblwiKVxuZGVmIGZvbygpIC0+IEl0ZXJhYmxlW2ludF06XG4gICAgeWllbGQgNVxuXG5AZml4dHVyZVxuZGVmIGJhcihmb28pIC0+IHN0cjpcbiAgICByZXR1cm4gc3RyKGZvbylcblxuZGVmIHJlZ3VsYXJfZnVuY3Rpb24oZm9vKSAtPiBOb25lOlxuICAgICMgVGhpcyBmdW5jdGlvbiBkb2Vzbid0IHVzZSB0aGUgJ2ZvbycgZml4dHVyZVxuICAgIHByaW50KGZvbylcblxuZGVmIHRlc3RfMShmb28sIGJhcik6XG4gICAgcHJpbnQoZm9vLCBiYXIpXG5cbmRlZiB0ZXN0XzIoYmFyKTpcbiAgICAuLi4ifQ==",
      "rules": [],
      "source_file": "/var/tmp/vibe-kanban/vk-ff35-organized/target/debug/build/organized-grepster-mcp-a639358d381b1d6e/out/ast-grep.github.io/website/catalog/python/refactor-pytest-fixtures.md",
      "title": "Refactor pytest fixtures",
      "type": "YAML",
      "yaml_content": "utils:\n  is-fixture-function:\n    kind: function_definition\n    follows:\n      kind: decorator\n      has:\n        kind: identifier\n        regex: ^fixture$\n        stopBy: end\n  is-test-function:\n    kind: function_definition\n    has:\n      field: name\n      regex: ^test_"
    },
    {
      "content": "## Use Walrus Operator in `if` statement<Badge type=\"tip\" text=\"Has Fix\" />\n\n- [Playground Link](/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6InB5dGhvbiIsInF1ZXJ5IjoiZm4gbWFpbigpIHsgXG4gICAgJCQkO1xuICAgIGlmKCRBKXskJCRCfSBcbiAgICBpZigkQSl7JCQkQ30gXG4gICAgJCQkRlxufSIsInJld3JpdGUiOiJmbiBtYWluKCkgeyAkJCRFOyBpZigkQSl7JCQkQiAkJCRDfSAkJCRGfSIsImNvbmZpZyI6ImlkOiB1c2Utd2FscnVzLW9wZXJhdG9yXG5ydWxlOlxuICBmb2xsb3dzOlxuICAgIHBhdHRlcm46XG4gICAgICBjb250ZXh0OiAkVkFSID0gJCQkRVhQUlxuICAgICAgc2VsZWN0b3I6IGV4cHJlc3Npb25fc3RhdGVtZW50XG4gIHBhdHRlcm46IFwiaWYgJFZBUjogJCQkQlwiXG5maXg6IHwtXG4gIGlmICRWQVIgOj0gJCQkRVhQUjpcbiAgICAkJCRCXG4tLS1cbmlkOiByZW1vdmUtZGVjbGFyYXRpb25cbnJ1bGU6XG4gIHBhdHRlcm46XG4gICAgY29udGV4dDogJFZBUiA9ICQkJEVYUFJcbiAgICBzZWxlY3RvcjogZXhwcmVzc2lvbl9zdGF0ZW1lbnRcbiAgcHJlY2VkZXM6XG4gICAgcGF0dGVybjogXCJpZiAkVkFSOiAkJCRCXCJcbmZpeDogJyciLCJzb3VyY2UiOiJhID0gZm9vKClcblxuaWYgYTpcbiAgICBkb19iYXIoKSJ9)\n\n### Description\n\nThe walrus operator (`:=`) introduced in Python 3.8 allows you to assign values to variables as part of an expression. This rule aims to simplify code by using the walrus operator in `if` statements.\n\nThis first part of the rule identifies cases where a variable is assigned a value and then immediately used in an `if` statement to control flow.\n\n```yaml\nid: use-walrus-operator\nlanguage: python\nrule:\n  pattern: \"if $VAR: $$$B\"\n  follows:\n    pattern:\n      context: $VAR = $$$EXPR\n      selector: expression_statement\nfix: |-\n  if $VAR := $$$EXPR:\n    $$$B\n```\n\nThe `pattern` clause finds an `if` statement that checks the truthiness of `$VAR`.\nIf this pattern `follows` an expression statement where `$VAR` is assigned `$$$EXPR`, the `fix` clause changes the `if` statements to use the walrus operator.\n\nThe second part of the rule:\n\n```yaml\nid: remove-declaration\nrule:\n  pattern:\n    context: $VAR = $$$EXPR\n    selector: expression_statement\n  precedes:\n    pattern: \"if $VAR: $$$B\"\nfix: ''\n```\n\nThis rule removes the standalone variable assignment when it directly precedes an `if` statement that uses the walrus operator. Since the assignment is now part of the `if` statement, the separate declaration is no longer needed.\n\nBy applying these rules, you can refactor your Python code to be more concise and readable, taking advantage of the walrus operator's ability to combine an assignment with an expression.\n\n### YAML\n\n```yaml\nid: use-walrus-operator\nlanguage: python\nrule:\n  follows:\n    pattern:\n      context: $VAR = $$$EXPR\n      selector: expression_statement\n  pattern: \"if $VAR: $$$B\"\nfix: |-\n  if $VAR := $$$EXPR:\n    $$$B\n---\nid: remove-declaration\nlanguage: python\nrule:\n  pattern:\n    context: $VAR = $$$EXPR\n    selector: expression_statement\n  precedes:\n    pattern: \"if $VAR: $$$B\"\nfix: ''\n```\n\n### Example\n\n<!-- highlight matched code in curly-brace {lineNum} -->\n\n```python\na = foo()\n\nif a:\n    do_bar()\n```\n\n### Diff\n\n<!-- use # [!code --] and # [!code ++] to annotate diff -->\n\n```python\na = foo() # [!code --]\n\nif a: # [!code --]\nif a := foo(): # [!code ++]\n    do_bar()\n```\n\n### Contributed by\n\nInspired by reddit user [/u/jackerhack](https://www.reddit.com/r/rust/comments/13eg738/comment/kagdklw/?)\n",
      "description": "The walrus operator (`:=`) introduced in Python 3.8 allows you to assign values to variables as part of an expression. This rule aims to simplify code by using the walrus operator in `if` statements.\n\nThis first part of the rule identifies cases where a variable is assigned a value and then immediately used in an `if` statement to control flow.",
      "features": [],
      "has_fix": true,
      "id": "use-walrus-operator-in-if",
      "language": "python",
      "playground_link": "/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6InB5dGhvbiIsInF1ZXJ5IjoiZm4gbWFpbigpIHsgXG4gICAgJCQkO1xuICAgIGlmKCRBKXskJCRCfSBcbiAgICBpZigkQSl7JCQkQ30gXG4gICAgJCQkRlxufSIsInJld3JpdGUiOiJmbiBtYWluKCkgeyAkJCRFOyBpZigkQSl7JCQkQiAkJCRDfSAkJCRGfSIsImNvbmZpZyI6ImlkOiB1c2Utd2FscnVzLW9wZXJhdG9yXG5ydWxlOlxuICBmb2xsb3dzOlxuICAgIHBhdHRlcm46XG4gICAgICBjb250ZXh0OiAkVkFSID0gJCQkRVhQUlxuICAgICAgc2VsZWN0b3I6IGV4cHJlc3Npb25fc3RhdGVtZW50XG4gIHBhdHRlcm46IFwiaWYgJFZBUjogJCQkQlwiXG5maXg6IHwtXG4gIGlmICRWQVIgOj0gJCQkRVhQUjpcbiAgICAkJCRCXG4tLS1cbmlkOiByZW1vdmUtZGVjbGFyYXRpb25cbnJ1bGU6XG4gIHBhdHRlcm46XG4gICAgY29udGV4dDogJFZBUiA9ICQkJEVYUFJcbiAgICBzZWxlY3RvcjogZXhwcmVzc2lvbl9zdGF0ZW1lbnRcbiAgcHJlY2VkZXM6XG4gICAgcGF0dGVybjogXCJpZiAkVkFSOiAkJCRCXCJcbmZpeDogJyciLCJzb3VyY2UiOiJhID0gZm9vKClcblxuaWYgYTpcbiAgICBkb19iYXIoKSJ9",
      "rules": [
        "pattern",
        "follows"
      ],
      "source_file": "/var/tmp/vibe-kanban/vk-ff35-organized/target/debug/build/organized-grepster-mcp-a639358d381b1d6e/out/ast-grep.github.io/website/catalog/python/use-walrus-operator-in-if.md",
      "title": "Use Walrus Operator in `if` statement",
      "type": "YAML",
      "yaml_content": "id: use-walrus-operator\nlanguage: python\nrule:\n  pattern: \"if $VAR: $$$B\"\n  follows:\n    pattern:\n      context: $VAR = $$$EXPR\n      selector: expression_statement\nfix: |-\n  if $VAR := $$$EXPR:\n    $$$B"
    },
    {
      "content": "## Rewrite `Optional[Type]` to `Type | None` <Badge type=\"tip\" text=\"Has Fix\" />\n\n- [Playground Link](/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6InB5dGhvbiIsInF1ZXJ5IjoiIiwicmV3cml0ZSI6IiIsInN0cmljdG5lc3MiOiJzaWduYXR1cmUiLCJzZWxlY3RvciI6IiIsImNvbmZpZyI6InJ1bGU6XG4gIHBhdHRlcm46IFxuICAgIGNvbnRleHQ6ICdhOiBPcHRpb25hbFskVF0nXG4gICAgc2VsZWN0b3I6IGdlbmVyaWNfdHlwZVxuZml4OiAkVCB8IE5vbmUiLCJzb3VyY2UiOiJkZWYgYShhcmc6IE9wdGlvbmFsW0ludF0pOiBwYXNzIn0=)\n\n### Description\n\n[PEP 604](https://peps.python.org/pep-0604/) recommends that `Type | None` is preferred over `Optional[Type]` for Python 3.10+.\n\nThis rule performs such rewriting. Note `Optional[$T]` alone is interpreted as subscripting expression instead of generic type, we need to use [pattern object](/guide/rule-config/atomic-rule.html#pattern-object) to disambiguate it with more context code.\n\n<!-- Use YAML in the example. Delete this section if use pattern. -->\n\n### YAML\n\n```yaml\nid: optional-to-none-union\nlanguage: python\nrule:\n  pattern:\n    context: 'a: Optional[$T]'\n    selector: generic_type\nfix: $T | None\n```\n\n### Example\n\n<!-- highlight matched code in curly-brace {lineNum} -->\n\n```py {1}\ndef a(arg: Optional[int]): pass\n```\n\n### Diff\n\n<!-- use // [!code --] and // [!code ++] to annotate diff -->\n\n```py\ndef a(arg: Optional[int]): pass # [!code --]\ndef a(arg: int | None): pass # [!code ++]\n```\n\n### Contributed by\n\n[Bede Carroll](https://github.com/ast-grep/ast-grep/discussions/1492)\n",
      "description": "[PEP 604](https://peps.python.org/pep-0604/) recommends that `Type | None` is preferred over `Optional[Type]` for Python 3.10+.\n\nThis rule performs such rewriting. Note `Optional[$T]` alone is interpreted as subscripting expression instead of generic type, we need to use [pattern object](/guide/rule-config/atomic-rule.html#pattern-object) to disambiguate it with more context code.\n\n<!-- Use YAML in the example. Delete this section if use pattern. -->",
      "features": [],
      "has_fix": true,
      "id": "optional-to-none-union",
      "language": "python",
      "playground_link": "/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6InB5dGhvbiIsInF1ZXJ5IjoiIiwicmV3cml0ZSI6IiIsInN0cmljdG5lc3MiOiJzaWduYXR1cmUiLCJzZWxlY3RvciI6IiIsImNvbmZpZyI6InJ1bGU6XG4gIHBhdHRlcm46IFxuICAgIGNvbnRleHQ6ICdhOiBPcHRpb25hbFskVF0nXG4gICAgc2VsZWN0b3I6IGdlbmVyaWNfdHlwZVxuZml4OiAkVCB8IE5vbmUiLCJzb3VyY2UiOiJkZWYgYShhcmc6IE9wdGlvbmFsW0ludF0pOiBwYXNzIn0=",
      "rules": [
        "pattern"
      ],
      "source_file": "/var/tmp/vibe-kanban/vk-ff35-organized/target/debug/build/organized-grepster-mcp-a639358d381b1d6e/out/ast-grep.github.io/website/catalog/python/optional-to-none-union.md",
      "title": "Rewrite `Optional[Type]` to `Type | None`",
      "type": "YAML",
      "yaml_content": "id: optional-to-none-union\nlanguage: python\nrule:\n  pattern:\n    context: 'a: Optional[$T]'\n    selector: generic_type\nfix: $T | None"
    },
    {
      "content": "<!-- Remove Badge if it does not have fix-->\n\n## Ensure Clean Architecture\n\n- [Playground Link](/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6ImtvdGxpbiIsInF1ZXJ5IjoiIiwicmV3cml0ZSI6IiIsInN0cmljdG5lc3MiOiJyZWxheGVkIiwic2VsZWN0b3IiOiIiLCJjb25maWciOiJpZDogaW1wb3J0LWRlcGVuZGVuY3ktdmlvbGF0aW9uXG5tZXNzYWdlOiBJbXBvcnQgRGVwZW5kZW5jeSBWaW9sYXRpb24gXG5ub3RlczogRW5zdXJlcyB0aGF0IGltcG9ydHMgY29tcGx5IHdpdGggYXJjaGl0ZWN0dXJhbCBydWxlcy4gXG5zZXZlcml0eTogZXJyb3JcbnJ1bGU6XG4gIHBhdHRlcm46IGltcG9ydCAkUEFUSFxuY29uc3RyYWludHM6XG4gIFBBVEg6XG4gICAgYW55OlxuICAgIC0gcmVnZXg6IGNvbVxcLmV4YW1wbGUoXFwuXFx3KykqXFwuZGF0YVxuICAgIC0gcmVnZXg6IGNvbVxcLmV4YW1wbGUoXFwuXFx3KykqXFwucHJlc2VudGF0aW9uXG5maWxlczpcbi0gY29tL2V4YW1wbGUvZG9tYWluLyoqLyoua3QiLCJzb3VyY2UiOiJpbXBvcnQgYW5kcm9pZHgubGlmZWN5Y2xlLlZpZXdNb2RlbFxuaW1wb3J0IGFuZHJvaWR4LmxpZmVjeWNsZS5WaWV3TW9kZWxTY29wZVxuaW1wb3J0IGNvbS5leGFtcGxlLmN1c3RvbWxpbnRleGFtcGxlLmRhdGEubW9kZWxzLlVzZXJEdG9cbmltcG9ydCBjb20uZXhhbXBsZS5jdXN0b21saW50ZXhhbXBsZS5kb21haW4udXNlY2FzZXMuR2V0VXNlclVzZUNhc2VcbmltcG9ydCBjb20uZXhhbXBsZS5jdXN0b21saW50ZXhhbXBsZS5wcmVzZW50YXRpb24uc3RhdGVzLk1haW5TdGF0ZVxuaW1wb3J0IGRhZ2dlci5oaWx0LmFuZHJvaWQubGlmZWN5Y2xlLkhpbHRWaWV3TW9kZWwifQ==)\n\n### Description\n\nThis ast-grep rule ensures that the **domain** package in a [Clean Architecture](https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html) project does not import classes from the **data** or **presentation** packages. It enforces the separation of concerns by preventing the domain layer from depending on other layers, maintaining the integrity of the architecture.\n\nFor example, the rule will trigger an error if an import statement like `import com.example.data.SomeClass` or `import com.example.presentation.AnotherClass` is found within the domain package.\n\nThe rule uses the [`files`](/reference/yaml.html#files) field to apply only to the domain package.\n\n### YAML\n\n```yaml\nid: import-dependency-violation\nmessage: Import Dependency Violation\nnotes: Ensures that imports comply with architectural rules.\nseverity: error\nrule:\n  pattern: import $PATH  # capture the import statement\nconstraints:\n  PATH: # find specific package imports\n    any:\n    - regex: com\\.example(\\.\\w+)*\\.data\n    - regex: com\\.example(\\.\\w+)*\\.presentation\nfiles:  # apply only to domain package\n- com/example/domain/**/*.kt\n```\n\n### Example\n\n<!-- highlight matched code in curly-brace {lineNum} -->\n\n```kotlin {3,5}\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.ViewModelScope\nimport com.example.customlintexample.data.models.UserDto\nimport com.example.customlintexample.domain.usecases.GetUserUseCase\nimport com.example.customlintexample.presentation.states.MainState\nimport dagger.hilt.android.lifecycle.HiltViewModel\n```\n\n### Contributed by\n\nInspired by the post [Custom Lint Task Configuration in Gradle with Kotlin DSL](https://www.sngular.com/insights/320/custom-lint-task-configuration-in-gradle-with-kotlin-dsl)\n",
      "description": "This ast-grep rule ensures that the **domain** package in a [Clean Architecture](https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html) project does not import classes from the **data** or **presentation** packages. It enforces the separation of concerns by preventing the domain layer from depending on other layers, maintaining the integrity of the architecture.\n\nFor example, the rule will trigger an error if an import statement like `import com.example.data.SomeClass` or `import com.example.presentation.AnotherClass` is found within the domain package.\n\nThe rule uses the [`files`](/reference/yaml.html#files) field to apply only to the domain package.",
      "features": [
        "constraints"
      ],
      "has_fix": false,
      "id": "ensure-clean-architecture",
      "language": "kotlin",
      "playground_link": "/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6ImtvdGxpbiIsInF1ZXJ5IjoiIiwicmV3cml0ZSI6IiIsInN0cmljdG5lc3MiOiJyZWxheGVkIiwic2VsZWN0b3IiOiIiLCJjb25maWciOiJpZDogaW1wb3J0LWRlcGVuZGVuY3ktdmlvbGF0aW9uXG5tZXNzYWdlOiBJbXBvcnQgRGVwZW5kZW5jeSBWaW9sYXRpb24gXG5ub3RlczogRW5zdXJlcyB0aGF0IGltcG9ydHMgY29tcGx5IHdpdGggYXJjaGl0ZWN0dXJhbCBydWxlcy4gXG5zZXZlcml0eTogZXJyb3JcbnJ1bGU6XG4gIHBhdHRlcm46IGltcG9ydCAkUEFUSFxuY29uc3RyYWludHM6XG4gIFBBVEg6XG4gICAgYW55OlxuICAgIC0gcmVnZXg6IGNvbVxcLmV4YW1wbGUoXFwuXFx3KykqXFwuZGF0YVxuICAgIC0gcmVnZXg6IGNvbVxcLmV4YW1wbGUoXFwuXFx3KykqXFwucHJlc2VudGF0aW9uXG5maWxlczpcbi0gY29tL2V4YW1wbGUvZG9tYWluLyoqLyoua3QiLCJzb3VyY2UiOiJpbXBvcnQgYW5kcm9pZHgubGlmZWN5Y2xlLlZpZXdNb2RlbFxuaW1wb3J0IGFuZHJvaWR4LmxpZmVjeWNsZS5WaWV3TW9kZWxTY29wZVxuaW1wb3J0IGNvbS5leGFtcGxlLmN1c3RvbWxpbnRleGFtcGxlLmRhdGEubW9kZWxzLlVzZXJEdG9cbmltcG9ydCBjb20uZXhhbXBsZS5jdXN0b21saW50ZXhhbXBsZS5kb21haW4udXNlY2FzZXMuR2V0VXNlclVzZUNhc2VcbmltcG9ydCBjb20uZXhhbXBsZS5jdXN0b21saW50ZXhhbXBsZS5wcmVzZW50YXRpb24uc3RhdGVzLk1haW5TdGF0ZVxuaW1wb3J0IGRhZ2dlci5oaWx0LmFuZHJvaWQubGlmZWN5Y2xlLkhpbHRWaWV3TW9kZWwifQ==",
      "rules": [
        "pattern"
      ],
      "source_file": "/var/tmp/vibe-kanban/vk-ff35-organized/target/debug/build/organized-grepster-mcp-a639358d381b1d6e/out/ast-grep.github.io/website/catalog/kotlin/ensure-clean-architecture.md",
      "title": "Ensure Clean Architecture",
      "type": "YAML",
      "yaml_content": "id: import-dependency-violation\nmessage: Import Dependency Violation\nnotes: Ensures that imports comply with architectural rules.\nseverity: error\nrule:\n  pattern: import $PATH  # capture the import statement\nconstraints:\n  PATH: # find specific package imports\n    any:\n    - regex: com\\.example(\\.\\w+)*\\.data\n    - regex: com\\.example(\\.\\w+)*\\.presentation\nfiles:  # apply only to domain package\n- com/example/domain/**/*.kt"
    },
    {
      "content": "## Find function declarations with names of certain pattern\n\n- [Playground Link](/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6ImdvIiwicXVlcnkiOiJyJ15bQS1aYS16MC05Xy1dKyciLCJyZXdyaXRlIjoiIiwiY29uZmlnIjoiaWQ6IHRlc3QtZnVuY3Rpb25zXG5sYW5ndWFnZTogZ29cbnJ1bGU6XG4gIGtpbmQ6IGZ1bmN0aW9uX2RlY2xhcmF0aW9uXG4gIGhhczpcbiAgICBmaWVsZDogbmFtZVxuICAgIHJlZ2V4OiBUZXN0LipcbiIsInNvdXJjZSI6InBhY2thZ2UgYWJzXG5pbXBvcnQgXCJ0ZXN0aW5nXCJcbmZ1bmMgVGVzdEFicyh0ICp0ZXN0aW5nLlQpIHtcbiAgICBnb3QgOj0gQWJzKC0xKVxuICAgIGlmIGdvdCAhPSAxIHtcbiAgICAgICAgdC5FcnJvcmYoXCJBYnMoLTEpID0gJWQ7IHdhbnQgMVwiLCBnb3QpXG4gICAgfVxufVxuIn0=)\n\n### Description\n\nast-grep can find function declarations by their names. But not all names can be matched by a meta variable pattern. For instance, you cannot use a meta variable pattern to find function declarations whose names start with a specific prefix, e.g. `TestAbs` with the prefix `Test`. Attempting `Test$_` will fail because it is not a valid syntax.\n\nInstead, you can use a [YAML rule](/reference/rule.html) to use the [`regex`](/guide/rule-config/atomic-rule.html#regex) atomic rule.\n\n### YAML\n\n```yaml\nid: test-functions\nlanguage: go\nrule:\n  kind: function_declaration\n  has:\n    field: name\n    regex: Test.*\n```\n\n### Example\n\n<!-- highlight matched code in curly-brace {lineNum} -->\n\n```go{3-8}\npackage abs\nimport \"testing\"\nfunc TestAbs(t *testing.T) {\n    got := Abs(-1)\n    if got != 1 {\n        t.Errorf(\"Abs(-1) = %d; want 1\", got)\n    }\n}\n```\n\n### Contributed by\n\n[kevinkjt2000](https://twitter.com/kevinkjt2000) on [Discord](https://discord.com/invite/4YZjf6htSQ).\n",
      "description": "ast-grep can find function declarations by their names. But not all names can be matched by a meta variable pattern. For instance, you cannot use a meta variable pattern to find function declarations whose names start with a specific prefix, e.g. `TestAbs` with the prefix `Test`. Attempting `Test$_` will fail because it is not a valid syntax.\n\nInstead, you can use a [YAML rule](/reference/rule.html) to use the [`regex`](/guide/rule-config/atomic-rule.html#regex) atomic rule.",
      "features": [],
      "has_fix": false,
      "id": "find-func-declaration-with-prefix",
      "language": "go",
      "playground_link": "/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6ImdvIiwicXVlcnkiOiJyJ15bQS1aYS16MC05Xy1dKyciLCJyZXdyaXRlIjoiIiwiY29uZmlnIjoiaWQ6IHRlc3QtZnVuY3Rpb25zXG5sYW5ndWFnZTogZ29cbnJ1bGU6XG4gIGtpbmQ6IGZ1bmN0aW9uX2RlY2xhcmF0aW9uXG4gIGhhczpcbiAgICBmaWVsZDogbmFtZVxuICAgIHJlZ2V4OiBUZXN0LipcbiIsInNvdXJjZSI6InBhY2thZ2UgYWJzXG5pbXBvcnQgXCJ0ZXN0aW5nXCJcbmZ1bmMgVGVzdEFicyh0ICp0ZXN0aW5nLlQpIHtcbiAgICBnb3QgOj0gQWJzKC0xKVxuICAgIGlmIGdvdCAhPSAxIHtcbiAgICAgICAgdC5FcnJvcmYoXCJBYnMoLTEpID0gJWQ7IHdhbnQgMVwiLCBnb3QpXG4gICAgfVxufVxuIn0=",
      "rules": [
        "kind",
        "has"
      ],
      "source_file": "/var/tmp/vibe-kanban/vk-ff35-organized/target/debug/build/organized-grepster-mcp-a639358d381b1d6e/out/ast-grep.github.io/website/catalog/go/find-func-declaration-with-prefix.md",
      "title": "Find function declarations with names of certain pattern",
      "type": "YAML",
      "yaml_content": "id: test-functions\nlanguage: go\nrule:\n  kind: function_declaration\n  has:\n    field: name\n    regex: Test.*"
    },
    {
      "content": "## Match Function Call in Golang\n\n- [Playground Link](/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6ImdvIiwicXVlcnkiOiJhd2FpdCAkQSIsInJld3JpdGUiOiJ0cnkge1xuICAgIGF3YWl0ICRBXG59IGNhdGNoKGUpIHtcbiAgICAvLyB0b2RvXG59IiwiY29uZmlnIjoicnVsZTpcbiAgcGF0dGVybjpcbiAgICBjb250ZXh0OiAnZnVuYyB0KCkgeyBmbXQuUHJpbnRsbigkJCRBKSB9J1xuICAgIHNlbGVjdG9yOiBjYWxsX2V4cHJlc3Npb25cbiIsInNvdXJjZSI6ImZ1bmMgbWFpbigpIHtcbiAgICBmbXQuUHJpbnRsbihcIk9LXCIpXG59In0=)\n\n### Description\n\nOne of the common questions of ast-grep is to match function calls in Golang.\n\nA plain pattern like `fmt.Println($A)` will not work. This is because Golang syntax also allows type conversions, e.g. `int(3.14)`, that look like function calls. Tree-sitter, ast-grep's parser, will prefer parsing `func_call(arg)` as a type conversion instead of a call expression.\n\nTo avoid this ambiguity, ast-grep lets us write a [contextual pattern](/guide/rule-config/atomic-rule.html#pattern), which is a pattern inside a larger code snippet.\nWe can use `context` to write a pattern like this: `func t() { fmt.Println($A) }`. Then, we can use the selector `call_expression` to match only function calls.\n\nPlease also read the [deep dive](/advanced/pattern-parse.html) on [ambiguous pattern](/advanced/pattern-parse.html#ambiguous-pattern-code).\n\n### YAML\n\n```yaml\nid: match-function-call\nlanguage: go\nrule:\n  pattern:\n    context: 'func t() { fmt.Println($A) }'\n    selector: call_expression\n```\n\n### Example\n\n<!-- highlight matched code in curly-brace {lineNum} -->\n\n```go{2}\nfunc main() {\n    fmt.Println(\"OK\")\n}\n```\n\n### Contributed by\n\nInspired by [QuantumGhost](https://github.com/QuantumGhost) from [ast-grep/ast-grep#646](https://github.com/ast-grep/ast-grep/issues/646)\n",
      "description": "One of the common questions of ast-grep is to match function calls in Golang.\n\nA plain pattern like `fmt.Println($A)` will not work. This is because Golang syntax also allows type conversions, e.g. `int(3.14)`, that look like function calls. Tree-sitter, ast-grep's parser, will prefer parsing `func_call(arg)` as a type conversion instead of a call expression.\n\nTo avoid this ambiguity, ast-grep lets us write a [contextual pattern](/guide/rule-config/atomic-rule.html#pattern), which is a pattern inside a larger code snippet.\nWe can use `context` to write a pattern like this: `func t() { fmt.Println($A) }`. Then, we can use the selector `call_expression` to match only function calls.\n\nPlease also read the [deep dive](/advanced/pattern-parse.html) on [ambiguous pattern](/advanced/pattern-parse.html#ambiguous-pattern-code).",
      "features": [],
      "has_fix": false,
      "id": "match-function-call",
      "language": "go",
      "playground_link": "/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6ImdvIiwicXVlcnkiOiJhd2FpdCAkQSIsInJld3JpdGUiOiJ0cnkge1xuICAgIGF3YWl0ICRBXG59IGNhdGNoKGUpIHtcbiAgICAvLyB0b2RvXG59IiwiY29uZmlnIjoicnVsZTpcbiAgcGF0dGVybjpcbiAgICBjb250ZXh0OiAnZnVuYyB0KCkgeyBmbXQuUHJpbnRsbigkJCRBKSB9J1xuICAgIHNlbGVjdG9yOiBjYWxsX2V4cHJlc3Npb25cbiIsInNvdXJjZSI6ImZ1bmMgbWFpbigpIHtcbiAgICBmbXQuUHJpbnRsbihcIk9LXCIpXG59In0=",
      "rules": [
        "pattern"
      ],
      "source_file": "/var/tmp/vibe-kanban/vk-ff35-organized/target/debug/build/organized-grepster-mcp-a639358d381b1d6e/out/ast-grep.github.io/website/catalog/go/match-function-call.md",
      "title": "Match Function Call in Golang",
      "type": "YAML",
      "yaml_content": "id: match-function-call\nlanguage: go\nrule:\n  pattern:\n    context: 'func t() { fmt.Println($A) }'\n    selector: call_expression"
    },
    {
      "content": "## Match package import in Golang\n\n- [Playground Link](/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6ImdvIiwicXVlcnkiOiIiLCJyZXdyaXRlIjoiIiwic3RyaWN0bmVzcyI6InNtYXJ0Iiwic2VsZWN0b3IiOiIiLCJjb25maWciOiJpZDogbWF0Y2gtcGFja2FnZS1pbXBvcnRcbmxhbmd1YWdlOiBnb1xucnVsZTpcbiAga2luZDogaW1wb3J0X3NwZWNcbiAgaGFzOlxuICAgIHJlZ2V4OiBnaXRodWIuY29tL2dvbGFuZy1qd3Qvand0Iiwic291cmNlIjoicGFja2FnZSBtYWluXG5cbmltcG9ydCAoXG5cdFwiZm10XCJcblx0XCJnaXRodWIuY29tL2dvbGFuZy1qd3Qvand0XCIgIC8vIFRoaXMgbWF0Y2hlcyB0aGUgQVNUIHJ1bGVcbilcblxuZnVuYyBtYWluKCkge1xuXHQvLyBDcmVhdGUgYSBuZXcgdG9rZW5cblx0dG9rZW4gOj0gand0Lk5ldyhqd3QuU2lnbmluZ01ldGhvZEhTMjU2KVxuXHRcblx0Ly8gQWRkIHNvbWUgY2xhaW1zXG5cdHRva2VuLkNsYWltcyA9IGp3dC5NYXBDbGFpbXN7XG5cdFx0XCJ1c2VyXCI6IFwiYWxpY2VcIixcblx0XHRcInJvbGVcIjogXCJhZG1pblwiLFxuXHR9XG5cdFxuXHQvLyBTaWduIHRoZSB0b2tlblxuXHR0b2tlblN0cmluZywgZXJyIDo9IHRva2VuLlNpZ25lZFN0cmluZyhbXWJ5dGUoXCJteS1zZWNyZXRcIikpXG5cdGlmIGVyciAhPSBuaWwge1xuXHRcdGZtdC5QcmludGYoXCJFcnJvciBzaWduaW5nIHRva2VuOiAldlxcblwiLCBlcnIpXG5cdFx0cmV0dXJuXG5cdH1cblx0XG5cdGZtdC5QcmludGYoXCJHZW5lcmF0ZWQgdG9rZW46ICVzXFxuXCIsIHRva2VuU3RyaW5nKVxufSJ9)\n\n### Description\n\nA generic rule template for detecting imports of specific packages in Go source code. This rule can be customized to match any package by modifying the regex pattern, making it useful for security auditing, dependency management, and compliance checking.\n\nThis rule identifies Go import statements based on the configured regex pattern, including:\n\nDirect imports: `import \"package/name\"`\\\nVersioned imports: `import \"package/name/v4\"`\\\nSubpackage imports: `import \"package/name/subpkg\"`\\\nGrouped imports within `import () blocks`\n\n### YAML\n\n```yaml\nid: match-package-import\nlanguage: go\nrule:\n  kind: import_spec\n  has:\n    regex: PACKAGE_PATTERN_HERE\n```\n\n### Example\n\nJWT Library Detection\n\n```go{5}\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/golang-jwt/jwt\" // This matches the AST rule\n)\n\nfunc main() {\n\ttoken := jwt.New(jwt.SigningMethodHS256) // Create a new token\n\t// Add some claims\n\ttoken.Claims = jwt.MapClaims{\"user\": \"alice\", \"role\": \"admin\"}\n\ttokenString, err := token.SignedString([]byte(\"my-secret\")) // Sign the token\n\tif err != nil {\n\t\tfmt.Printf(\"Error signing token: %v\\n\", err)\n\t\treturn\n\t}\n\tfmt.Printf(\"Generated token: %s\\n\", tokenString)\n}\n```\n\n### Contributed by\n\n[Sudesh Gutta](https://github.com/sudeshgutta)\n",
      "description": "A generic rule template for detecting imports of specific packages in Go source code. This rule can be customized to match any package by modifying the regex pattern, making it useful for security auditing, dependency management, and compliance checking.\n\nThis rule identifies Go import statements based on the configured regex pattern, including:\n\nDirect imports: `import \"package/name\"`\\\nVersioned imports: `import \"package/name/v4\"`\\\nSubpackage imports: `import \"package/name/subpkg\"`\\\nGrouped imports within `import () blocks`",
      "features": [],
      "has_fix": false,
      "id": "match-package-import",
      "language": "go",
      "playground_link": "/playground.html#eyJtb2RlIjoiQ29uZmlnIiwibGFuZyI6ImdvIiwicXVlcnkiOiIiLCJyZXdyaXRlIjoiIiwic3RyaWN0bmVzcyI6InNtYXJ0Iiwic2VsZWN0b3IiOiIiLCJjb25maWciOiJpZDogbWF0Y2gtcGFja2FnZS1pbXBvcnRcbmxhbmd1YWdlOiBnb1xucnVsZTpcbiAga2luZDogaW1wb3J0X3NwZWNcbiAgaGFzOlxuICAgIHJlZ2V4OiBnaXRodWIuY29tL2dvbGFuZy1qd3Qvand0Iiwic291cmNlIjoicGFja2FnZSBtYWluXG5cbmltcG9ydCAoXG5cdFwiZm10XCJcblx0XCJnaXRodWIuY29tL2dvbGFuZy1qd3Qvand0XCIgIC8vIFRoaXMgbWF0Y2hlcyB0aGUgQVNUIHJ1bGVcbilcblxuZnVuYyBtYWluKCkge1xuXHQvLyBDcmVhdGUgYSBuZXcgdG9rZW5cblx0dG9rZW4gOj0gand0Lk5ldyhqd3QuU2lnbmluZ01ldGhvZEhTMjU2KVxuXHRcblx0Ly8gQWRkIHNvbWUgY2xhaW1zXG5cdHRva2VuLkNsYWltcyA9IGp3dC5NYXBDbGFpbXN7XG5cdFx0XCJ1c2VyXCI6IFwiYWxpY2VcIixcblx0XHRcInJvbGVcIjogXCJhZG1pblwiLFxuXHR9XG5cdFxuXHQvLyBTaWduIHRoZSB0b2tlblxuXHR0b2tlblN0cmluZywgZXJyIDo9IHRva2VuLlNpZ25lZFN0cmluZyhbXWJ5dGUoXCJteS1zZWNyZXRcIikpXG5cdGlmIGVyciAhPSBuaWwge1xuXHRcdGZtdC5QcmludGYoXCJFcnJvciBzaWduaW5nIHRva2VuOiAldlxcblwiLCBlcnIpXG5cdFx0cmV0dXJuXG5cdH1cblx0XG5cdGZtdC5QcmludGYoXCJHZW5lcmF0ZWQgdG9rZW46ICVzXFxuXCIsIHRva2VuU3RyaW5nKVxufSJ9",
      "rules": [
        "kind",
        "has"
      ],
      "source_file": "/var/tmp/vibe-kanban/vk-ff35-organized/target/debug/build/organized-grepster-mcp-a639358d381b1d6e/out/ast-grep.github.io/website/catalog/go/match-package-import.md",
      "title": "Match package import in Golang",
      "type": "YAML",
      "yaml_content": "id: match-package-import\nlanguage: go\nrule:\n  kind: import_spec\n  has:\n    regex: PACKAGE_PATTERN_HERE"
    }
  ],
  "generated_at": "2025-07-12T20:25:47.989159838+00:00",
  "source": "ast-grep.github.io",
  "version": "1.0"
}